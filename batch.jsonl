{"custom_id": "Depots_Nu0_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain by \nadding a load_limit to the truck. \n\nThis will require adding 3 functions: \nload_limit per truck, current_load per truck and the weight per crate\n\nModify the load and unload actions accordingly\n\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n)\n\n(:functions  \n\t(fuel-cost)\n)\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t(increase (fuel-cost) 10)))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z)) (increase (fuel-cost) 1)))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Nu1_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd fuel-cost tracking\n\nThis will require adding 1 function fuel-cost \n\nDriving will cost 10 fuel while using the Lift costs 1 fuel\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n)\n\n(:functions \n\t(load_limit ?t - truck) \n\t(current_load ?t - truck) \n\t(weight ?c - crate)\n)\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z))))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y)\n\t\t(<= (+ (current_load ?z) (weight ?y)) (load_limit ?z)))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)\n\t\t(increase (current_load ?z) (weight ?y))))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)\n\t\t(decrease (current_load ?z) (weight ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Nu2_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL\nRemove the fuel consumption concept\n\nThis modification will require removing 3 functions: fuel-tank, current-fuel and distance\n\nModify the actions accordingly\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n    truck hoist surface - locatable\n    pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n             (fuel-available ?x - truck) ; predicate indicating if the truck has fuel\n)\n\n(:functions \n\t(load_limit ?t - truck) \n\t(current_load ?t - truck) \n\t(weight ?c - crate)\n\t(fuel-cost)\n    (fuel-tank ?t - truck) ; maximum fuel capacity of the truck\n    (current-fuel ?t - truck) ; current fuel level of the truck\n    (distance ?y ?z - place) ; distance between places\n)\n\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y) (>= (current-fuel ?x) (* (distance ?y ?z) (+ 1 (current_load ?x)))))\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n             (decrease (current-fuel ?x) (* (distance ?y ?z) (+ 1 (current_load ?x))))\n             (increase (fuel-cost) (* (distance ?y ?z) (+ 1 (current_load ?x))))))\n\n(:action Refuel\n:parameters (?x - truck ?p - place)\n:precondition (at ?x ?p)\n:effect (assign (current-fuel ?x) (fuel-tank ?x)))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z)) (increase (fuel-cost) 1)))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y)\n\t\t(<= (+ (current_load ?z) (weight ?y)) (load_limit ?z)))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)\n\t\t(increase (current_load ?z) (weight ?y))))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)\n\t\t(decrease (current_load ?z) (weight ?y))))\n\n)\n\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Nu3_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain \nAdd the ability to drive from one location to another\n\nThe drive action increases the fuel cost by 10\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n)\n\n(:functions \n\t(load_limit ?t - truck) \n\t(current_load ?t - truck) \n\t(weight ?c - crate)\n\t(fuel-cost)\n)\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z)) (increase (fuel-cost) 1)))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y)\n\t\t(<= (+ (current_load ?z) (weight ?y)) (load_limit ?z)))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)\n\t\t(increase (current_load ?z) (weight ?y))))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)\n\t\t(decrease (current_load ?z) (weight ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Nu4_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd lift and drop actions\n\nThis will require adding the lifting predicate to indicate the hoist lifting the crate as well as a Lift and Drop action\n\nThe Lift action will increase the fuel-cost by 1.\n\nReview and understand the logic of the domain and create the actions accordingly\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (available ?x - hoist)\n             (clear ?x - surface)\n)\n\n(:functions \n\t(load_limit ?t - truck) \n\t(current_load ?t - truck) \n\t(weight ?c - crate)\n\t(fuel-cost)\n)\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t(increase (fuel-cost) 10)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x)\n\t\t(<= (+ (current_load ?z) (weight ?y)) (load_limit ?z)))\n:effect (and (in ?y ?z) (available ?x)\n\t\t(increase (current_load ?z) (weight ?y))))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (available ?x)\n\t\t(decrease (current_load ?z) (weight ?y))))\n\n)"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Nu5_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the ability to load and unload creates into the truck and for the truck to drive from one location to another\n\nThis will require adding 3 functions, 3 actions and 1 predicates\nfunctions: load_limit per truck, current_load per truck and weight per crate\npredicate: in (crate in truck)\nactions: Load Unload Drive\n\nThe Load action loads the crate currently on the hoist into the truck, The unload does the opposite and the drive action moves the truck from a to b and costs 10 fuel. \nUsing commonsense and the domain add the required elements think step by step\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n)\n\n(:functions \n\t(fuel-cost)\n)\n\t\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z)) (increase (fuel-cost) 1)))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n)"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Nu6_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL\nAdd the ability to Lift and Drop crates using the hoist, and to Load and Unload the truck with crates using the hoist\n\nThis will require adding 3 functions, 4 actions and 1 predicates\nfunctions: load_limit per truck, current_load per truck and weight per crate\npredicate: lifting hoist lifts crate\n\nThe Load action loads the crate currently on the hoist into the truck, The unload does the opposite\nThe Lift action uses the hoist to lift a crate that is clear of a surface and costs 1 fuel, Drop liberates the Hoist and places the crate on a clear surface\nUsing commonsense and the domain add the required elements think step by step\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (available ?x - hoist)\n             (clear ?x - surface)\n)\n\n(:functions \n\t(fuel-cost)\n)\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t(increase (fuel-cost) 10)))\n\n)"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Nu7_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL\nAdd the ability to Lift and Drop crates using the hoist, and to Load and Unload the truck with crates using the hoist\n\nThis will require adding 3 functions, 5 actions and 1 predicates\nfunctions: load_limit per truck, current_load per truck and weight per crate\npredicate: lifting hoist lifts crate\n\nThe drive action costs 10 fuel and moves the truck from start to finnish\nThe Load action loads the crate currently on the hoist into the truck, The unload does the opposite\nThe Lift action uses the hoist to lift a crate that is clear of a surface and costs 1 fuel, Drop liberates the Hoist and places the crate on a clear surface\nUsing commonsense and the domain add the required elements think step by step\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n)\n\n(:functions \n\t(load_limit ?t - truck) \n\t(current_load ?t - truck) \n\t(weight ?c - crate)\n\t(fuel-cost)\n)\n\t\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Nu8_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd the clear check to make sure a surface of an object is clear before trying to lift it or putting something on it\n\nThis will require adding 1 predicate and modifying 2 actions\npredicate: clear surface, a surface can be a pallet or crate\n\nUsing common sense\nModify the lift and drop actions to include this condition\nThink step by step\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n)\n\n(:functions \n\t(load_limit ?t - truck) \n\t(current_load ?t - truck) \n\t(weight ?c - crate)\n\t(fuel-cost)\n)\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t(increase (fuel-cost) 10)))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) )\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (available ?x)) \n              (not (on ?y ?z)) (increase (fuel-cost) 1)))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y)\n\t\t(<= (+ (current_load ?z) (weight ?y)) (load_limit ?z)))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)\n\t\t(increase (current_load ?z) (weight ?y))))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)\n\t\t(decrease (current_load ?z) (weight ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Nu9_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the day condition\n\nRemove the day predicate and condition from the domain\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n    truck hoist surface - locatable\n    pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n             (day) ; predicate indicating if it is day\n)\n\n(:functions \n\t(load_limit ?t - truck) \n\t(current_load ?t - truck) \n\t(weight ?c - crate)\n\t(fuel-cost)\n)\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (day) (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t(increase (fuel-cost) 10)))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (day) (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z)) (increase (fuel-cost) 1)))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (day) (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (day) (at ?x ?p) (at ?z ?p) (lifting ?x ?y)\n\t\t(<= (+ (current_load ?z) (weight ?y)) (load_limit ?z)))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)\n\t\t(increase (current_load ?z) (weight ?y))))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (day) (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)\n\t\t(decrease (current_load ?z) (weight ?y))))\n\n)\n\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Nu10_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the need for inspection\n\nRemove the inspected predicate and condition from the actions. Remove the inspect action\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n    truck hoist surface - locatable\n    pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n             (inspected ?y - crate) ; predicate indicating if the crate has been inspected\n)\n\n(:functions \n\t(load_limit ?t - truck) \n\t(current_load ?t - truck) \n\t(weight ?c - crate)\n\t(fuel-cost)\n)\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t(increase (fuel-cost) 10)))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z)) (increase (fuel-cost) 1)))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y) (inspected ?y)\n\t\t(<= (+ (current_load ?z) (weight ?y)) (load_limit ?z)))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)\n\t\t(increase (current_load ?z) (weight ?y))))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)\n\t\t(decrease (current_load ?z) (weight ?y))))\n\n(:action Inspect\n:parameters (?x - hoist ?y - crate ?p - place)\n:precondition (and (at ?x ?p) (at ?y ?p) (available ?x))\n:effect (and (inspected ?y) (increase (fuel-cost) 0.5)))\n)\n\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Nu11_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the concept of inspection\n\nRemove the inspected predicate\nRemove the the inspect and bride actions\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n    truck hoist surface - locatable\n    pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n             (inspected ?y - crate) ; predicate indicating if the crate has been inspected\n)\n\n(:functions \n\t(load_limit ?t - truck) \n\t(current_load ?t - truck) \n\t(weight ?c - crate)\n\t(fuel-cost)\n)\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t(increase (fuel-cost) 10)))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z)) (increase (fuel-cost) 1)))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y) (inspected ?y)\n\t\t(<= (+ (current_load ?z) (weight ?y)) (load_limit ?z)))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)\n\t\t(increase (current_load ?z) (weight ?y))))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)\n\t\t(decrease (current_load ?z) (weight ?y))))\n\n(:action Inspect\n:parameters (?x - hoist ?y - crate ?p - place)\n:precondition (and (at ?x ?p) (at ?y ?p) (available ?x))\n:effect (and (inspected ?y) (increase (fuel-cost) 0.5)))\n\n(:action Bribe\n:parameters (?x - hoist ?y - crate ?p - place)\n:precondition (and (at ?x ?p) (at ?y ?p) (available ?x))\n:effect (inspected ?y))\n)\n\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Nu0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain by \nadding a load_limit to the truck. \n\nThis will require adding 3 functions: \nload_limit per truck, current_load per truck and the weight per crate\n\nThe load action will have an extra predicate where the load_limit for the truck must be lower then the current_load + the weight of the crate\nThe effect will have the current_weight increased by the crate weight\n\nThe Unload action will add the effect to decrease the current_load by the weight\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n)\n\n(:functions  \n\t(fuel-cost)\n)\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t(increase (fuel-cost) 10)))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z)) (increase (fuel-cost) 1)))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Nu1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd fuel-cost tracking\n\nThis will require adding 1 function fuel-cost \n\nThe Drive action effect increases the fuel-cost by 10\nThe Lift action increases the fuel-cost by 1\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n)\n\n(:functions \n\t(load_limit ?t - truck) \n\t(current_load ?t - truck) \n\t(weight ?c - crate)\n)\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z))))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y)\n\t\t(<= (+ (current_load ?z) (weight ?y)) (load_limit ?z)))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)\n\t\t(increase (current_load ?z) (weight ?y))))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)\n\t\t(decrease (current_load ?z) (weight ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Nu2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL\nRemove the fuel consumption concept\n\nThis modification will require removing 3 functions: fuel-tank, current-fuel and distance\n\nRemove the Refuel action\nRemove current-fuel check and decrease from the Drive function\nRemove distance from the drive function\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n    truck hoist surface - locatable\n    pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n             (fuel-available ?x - truck) ; predicate indicating if the truck has fuel\n)\n\n(:functions \n\t(load_limit ?t - truck) \n\t(current_load ?t - truck) \n\t(weight ?c - crate)\n\t(fuel-cost)\n    (fuel-tank ?t - truck) ; maximum fuel capacity of the truck\n    (current-fuel ?t - truck) ; current fuel level of the truck\n    (distance ?y ?z - place) ; distance between places\n)\n\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y) (>= (current-fuel ?x) (* (distance ?y ?z) (+ 1 (current_load ?x)))))\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n             (decrease (current-fuel ?x) (* (distance ?y ?z) (+ 1 (current_load ?x))))\n             (increase (fuel-cost) (* (distance ?y ?z) (+ 1 (current_load ?x))))))\n\n(:action Refuel\n:parameters (?x - truck ?p - place)\n:precondition (at ?x ?p)\n:effect (assign (current-fuel ?x) (fuel-tank ?x)))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z)) (increase (fuel-cost) 1)))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y)\n\t\t(<= (+ (current_load ?z) (weight ?y)) (load_limit ?z)))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)\n\t\t(increase (current_load ?z) (weight ?y))))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)\n\t\t(decrease (current_load ?z) (weight ?y))))\n\n)\n\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Nu3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain \nAdd the ability to drive from one location to another\n\nThe drive action increases the fuel cost by 10 and moves the truck from one place to another\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n)\n\n(:functions \n\t(load_limit ?t - truck) \n\t(current_load ?t - truck) \n\t(weight ?c - crate)\n\t(fuel-cost)\n)\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z)) (increase (fuel-cost) 1)))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y)\n\t\t(<= (+ (current_load ?z) (weight ?y)) (load_limit ?z)))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)\n\t\t(increase (current_load ?z) (weight ?y))))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)\n\t\t(decrease (current_load ?z) (weight ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Nu4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd lift and drop actions\n\nThis will require adding the lifting predicate to indicate the hoist lifting the crate as well as a Lift and Drop action\n\nThe Lift action can only lift a crate if it is at the same place as the hoist, that the hoist is available, the the crate is clear and the crate is on a surface\nThis action will increase the fuel-cost by 1, have the hoist lifting the crate and the surface will be clear\n\nThe Drop action drops the crate at the same place as the surface, the surface and the hoist must be at the same place, \ncan only drop a crate on a clear surface and does not cost any fuel, the surface will no longer be clear after dropping on it, the hoist becomes available again, \nand the crate will be clear in case other crates need to be stacked on top\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (available ?x - hoist)\n             (clear ?x - surface)\n)\n\n(:functions \n\t(load_limit ?t - truck) \n\t(current_load ?t - truck) \n\t(weight ?c - crate)\n\t(fuel-cost)\n)\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t(increase (fuel-cost) 10)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x)\n\t\t(<= (+ (current_load ?z) (weight ?y)) (load_limit ?z)))\n:effect (and (in ?y ?z) (available ?x)\n\t\t(increase (current_load ?z) (weight ?y))))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (available ?x)\n\t\t(decrease (current_load ?z) (weight ?y))))\n\n)"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Nu5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the ability to load and unload creates into the truck and for the truck to drive from one location to another\n\nThis will require adding 3 functions, 3 actions and 1 predicates\nfunctions: load_limit per truck, current_load per truck and weight per crate\npredicate: in (crate in truck)\n\nactions:\nconditions: the hoist and the truck must be at the same place, the hoist must be lifting the crate and the load_limit must be less then the weight of the crate + the current_load of the truck\neffect: the hoist will no longer be lifting the crate and will be available again, the crate will be in the truck and the current_load of the truck will increase by the weight of the crate\n\nUnload\nconditions: the hoist and the truck must be at the same place, the hoist must be available and the crate must be in the truck\neffect: the crate will no longer be in the truck, the hoist will be lifting the crate and thus no longer be available and the current_load of the truck will decrease by the weight of the crate\n\nDrive:\nThe drive action increases the fuel cost by 10 and moves the truck from one place to another\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n)\n\n(:functions \n\t(fuel-cost)\n)\n\t\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z)) (increase (fuel-cost) 1)))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n)"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Nu6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL\nAdd the ability to Lift and Drop crates using the hoist, and to Load and Unload the truck with crates using the hoist\n\nThis will require adding 3 functions, 4 actions and 1 predicates\nfunctions: load_limit per truck, current_load per truck and weight per crate\npredicate: lifting hoist lifts crate\n\nactions:\nconditions: the hoist and the truck must be at the same place, the hoist must be lifting the crate and the load_limit must be less then the weight of the crate + the current_load of the truck\neffect: the hoist will no longer be lifting the crate and will be available again, the crate will be in the truck and the current_load of the truck will increase by the weight of the crate\n\nUnload\nconditions: the hoist and the truck must be at the same place, the hoist must be available and the crate must be in the truck\neffect: the crate will no longer be in the truck, the hoist will be lifting the crate and thus no longer be available and the current_load of the truck will decrease by the weight of the crate\n\nLift\nCondition: The Hoist, if available lifts a crate if both are at the same place, for the hoist to lift the crate, the crate must be clear and on a surface\nEffect: Lifting the crate off the surface will leave it clear, the crate will no longer be clear since it's in the air, \nthe hoist lifting the crate with no longer be available, the crate is no longer at the same place as the hoist, lifting increases the fuel-cost by 1\n\nDrop \nCondition: the hoist drops the crate at the same place as the surface, the surface and the hoist must be at the same place, the hoist can only drop a crate on a clear surface\nEffect : The surface will no longer be clear after dropping the crate on it, the hoist becomes available again, the crate will be clear in case other crates need to be stacked on top\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (available ?x - hoist)\n             (clear ?x - surface)\n)\n\n(:functions \n\t(fuel-cost)\n)\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t(increase (fuel-cost) 10)))\n\n)"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Nu7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL\nAdd the ability to Lift and Drop crates using the hoist, and to Load and Unload the truck with crates using the hoist and to Drive from one location to another\n\nThis will require adding 5 actions\n\nactions:\nDrive:\nCondition: The truck is at the starting place\neffect: the truck is no longer at the starting place but at the other place and the fuel-cost increases by 10\n\nLoad\nconditions: the hoist and the truck must be at the same place, the hoist must be lifting the crate and the load_limit must be less then the weight of the crate + the current_load of the truck\neffect: the hoist will no longer be lifting the crate and will be available again, the crate will be in the truck and the current_load of the truck will increase by the weight of the crate\n\nUnload\nconditions: the hoist and the truck must be at the same place, the hoist must be available and the crate must be in the truck\neffect: the crate will no longer be in the truck, the hoist will be lifting the crate and thus no longer be available and the current_load of the truck will decrease by the weight of the crate\n\nLift\nCondition: The Hoist, if available lifts a crate if both are at the same place, for the hoist to lift the crate, the crate must be clear and on a surface\nEffect: Lifting the crate off the surface will leave it clear, the crate will no longer be clear since it's in the air, \nthe hoist lifting the crate with no longer be available, the crate is no longer at the same place as the hoist, lifting increases the fuel-cost by 1\n\nDrop \nCondition: the hoist drops the crate at the same place as the surface, the surface and the hoist must be at the same place, the hoist can only drop a crate on a clear surface\nEffect : The surface will no longer be clear after dropping the crate on it, the hoist becomes available again, the crate will be clear in case other crates need to be stacked on top\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n)\n\n(:functions \n\t(load_limit ?t - truck) \n\t(current_load ?t - truck) \n\t(weight ?c - crate)\n\t(fuel-cost)\n)\n\t\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Nu8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd the clear check to make sure a surface of an object is clear before trying to lift it or putting something on it\n\nThis will require adding 1 predicate and modifying 2 actions\npredicate: clear surface, a surface can be a pallet or crate\n\nactions:\nLift\nWhen lifting a crate it must be clear, once lifted the surface the crate was on is now clear and the clear is no longer clear\n\nDrop\nThe crate must be dropped on a clear surface, once dropped on the surface it is no longer clear, the crate on the surface is now clear\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n)\n\n(:functions \n\t(load_limit ?t - truck) \n\t(current_load ?t - truck) \n\t(weight ?c - crate)\n\t(fuel-cost)\n)\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t(increase (fuel-cost) 10)))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) )\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (available ?x)) \n              (not (on ?y ?z)) (increase (fuel-cost) 1)))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y)\n\t\t(<= (+ (current_load ?z) (weight ?y)) (load_limit ?z)))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)\n\t\t(increase (current_load ?z) (weight ?y))))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)\n\t\t(decrease (current_load ?z) (weight ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Nu9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the day condition\n\nRemove the day predicate and condition from the domain\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n    truck hoist surface - locatable\n    pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n             (day) ; predicate indicating if it is day\n)\n\n(:functions \n\t(load_limit ?t - truck) \n\t(current_load ?t - truck) \n\t(weight ?c - crate)\n\t(fuel-cost)\n)\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (day) (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t(increase (fuel-cost) 10)))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (day) (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z)) (increase (fuel-cost) 1)))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (day) (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (day) (at ?x ?p) (at ?z ?p) (lifting ?x ?y)\n\t\t(<= (+ (current_load ?z) (weight ?y)) (load_limit ?z)))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)\n\t\t(increase (current_load ?z) (weight ?y))))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (day) (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)\n\t\t(decrease (current_load ?z) (weight ?y))))\n\n)\n\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Nu10", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the need for inspection\n\nRemove the inspected predicate and condition from the actions. Remove the inspect action\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n    truck hoist surface - locatable\n    pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n             (inspected ?y - crate) ; predicate indicating if the crate has been inspected\n)\n\n(:functions \n\t(load_limit ?t - truck) \n\t(current_load ?t - truck) \n\t(weight ?c - crate)\n\t(fuel-cost)\n)\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t(increase (fuel-cost) 10)))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z)) (increase (fuel-cost) 1)))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y) (inspected ?y)\n\t\t(<= (+ (current_load ?z) (weight ?y)) (load_limit ?z)))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)\n\t\t(increase (current_load ?z) (weight ?y))))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)\n\t\t(decrease (current_load ?z) (weight ?y))))\n\n(:action Inspect\n:parameters (?x - hoist ?y - crate ?p - place)\n:precondition (and (at ?x ?p) (at ?y ?p) (available ?x))\n:effect (and (inspected ?y) (increase (fuel-cost) 0.5)))\n)\n\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Nu11", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the concept of inspection\n\nRemove the inspected predicate\nRemove the the inspect and bride actions\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n    truck hoist surface - locatable\n    pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n             (inspected ?y - crate) ; predicate indicating if the crate has been inspected\n)\n\n(:functions \n\t(load_limit ?t - truck) \n\t(current_load ?t - truck) \n\t(weight ?c - crate)\n\t(fuel-cost)\n)\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t(increase (fuel-cost) 10)))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z)) (increase (fuel-cost) 1)))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y) (inspected ?y)\n\t\t(<= (+ (current_load ?z) (weight ?y)) (load_limit ?z)))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)\n\t\t(increase (current_load ?z) (weight ?y))))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)\n\t\t(decrease (current_load ?z) (weight ?y))))\n\n(:action Inspect\n:parameters (?x - hoist ?y - crate ?p - place)\n:precondition (and (at ?x ?p) (at ?y ?p) (available ?x))\n:effect (and (inspected ?y) (increase (fuel-cost) 0.5)))\n\n(:action Bribe\n:parameters (?x - hoist ?y - crate ?p - place)\n:precondition (and (at ?x ?p) (at ?y ?p) (available ?x))\n:effect (inspected ?y))\n)\n\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Si0_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain \nAdd durative-actions to the requirements and convert all actions into durative actions\n\nDrive has a duration of 10\nLift has a duration of 1\nDrop has a duration of 1\nLoad has a duration of 3\nUnload has a duration of 4\n\n(define (domain Depot)\n(:requirements :typing)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z))))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Si1_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain \nModify the durations of the actions\n\nDrive duration 10\nLift duration 1\nDrop duration 1\nLoad duration 3\nUnload duration 4\n\n(define (domain Depot)\n(:requirements :typing :durative-actions)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration 1)\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Si2_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain \nModify the durations of the actions\n\nDrive duration 10\nLift duration 1\nDrop duration 1\nLoad duration 3\nUnload duration 4\n\n(define (domain Depot)\n(:requirements :typing :durative-actions)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration 10)\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 3)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 4)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Si3_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain \nAdd the ability to drive from one location to another\n\nThe drive action changes the location of the truck from one place to another and has a duration of 10\n\n(define (domain Depot)\n(:requirements :typing :durative-actions)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 3)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 4)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Si4_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd lift and drop actions\n\nThis will require adding the lifting predicate to indicate the hoist lifting the crate as well as a Lift and Drop action\nBoth actions have a duration of 1\n\nUsing commonsense reasoning and thinking step by step\n\n(define (domain Depot)\n(:requirements :typing :durative-actions)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration 10)\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 3)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)))\n:effect (and (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 4)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x)))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Si5_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the ability to load and unload creates into the truck and for the truck to drive from one location to another\n\nThis will require adding 3 actions\nactions: Load Unload Drive\n\nThe Load action loads the crate currently on the hoist into the truck, The unload does the opposite and the drive action moves the truck from a to b. \nThe drive action has a duration of 10, the load a duration of 3 and Unload a duration of 4\nUsing commonsense and the domain add the required elements think step by step\n\n(define (domain Depot)\n(:requirements :typing :durative-actions)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n\t\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Si6_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL\nAdd the ability to Lift and Drop crates using the hoist, and to Load and Unload the truck with crates using the hoist\n\nThis will require adding  4 actions\n\n\nThe Load action loads the crate currently on the hoist into the truck, The Unload action does the opposite\nThe Lift action uses the hoist to lift a crate that is clear of a surface, Drop renders the hoist available and places the crate being lifted on a clear surface\nThe Lift and Drop actions have a duration of 1, the Load action a duratioon of 3 and the Unload action 4\nUsing commonsense and the domain add the required elements think step by step\n\n(define (domain Depot)\n(:requirements :typing :durative-actions)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration 10)\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Si7_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL\nAdd the ability to Lift and Drop crates using the hoist, and to Load and Unload the truck with crates using the hoist\n\nThis will require adding 5 actions\n\nThe drive action moves the truck from start to finnish and has a duration of 10\nThe Load action loads the crate currently on the hoist into the truck, The unload does the opposite\nThe Lift action uses the hoist to lift a crate that is clear of a surface, Drop liberates the Hoist and places the crate on a clear surface\nThe lift and drop actions have a duration of 1. The load and Unload actions have a duration of 3 and 4 respectively\nUsing commonsense and the domain add the required elements think step by step\n\n(define (domain Depot)\n(:requirements :typing :durative-actions)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration 10)\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Si8_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nCrates no longer require inspection to be loaded\n\nUsing common sense\nRemove the concept of inspection\nThink step by step\n\n(define (domain Depot)\n(:requirements :typing :durative-actions)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n             (inspected ?x - crate))  ;; New predicate to indicate inspection status\n\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration 10)\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 3)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)) (at start (inspected ?y))) ;; Inspected condition added\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 4)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n(:durative-action Inspect  ;; New action for inspecting crates\n:parameters (?x - hoist ?y - crate ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (clear ?y)))\n:effect (and (at end (inspected ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Si9_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nCrates no longer require inspection to be loaded\n\nUsing common sense\nRemove the concept of inspection\nThink step by step\n\n(define (domain Depot)\n(:requirements :typing :durative-actions)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n             (inspected ?x - crate))  ;; Predicate to indicate inspection status\n\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration 10)\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 3)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)) (at start (inspected ?y))) ;; Inspected condition added\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 4)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n(:durative-action Inspect  ;; Modified action for inspecting crates\n:parameters (?x - hoist ?y - crate ?p - place)\n:duration (= ?duration 3)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (clear ?y)))\n:effect (and (at end (inspected ?y))))\n\n(:durative-action Bribe  ;; New action for bribing to get the inspected attribute\n:parameters (?x - crate ?p - place)\n:duration (= ?duration 1)\n:condition (at start (at ?x ?p))\n:effect (at end (inspected ?x)))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Si10_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the need for it to be day to perform actions\n\n(define (domain Depot)\n(:requirements :typing :durative-actions)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n             (day))  ;; New predicate to indicate daytime\n\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration 10)\n:condition (and (at start (at ?x ?y)) (over all (day)))  ;; Added day condition\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (day)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (day)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 3)\n:condition (and (over all (at ?x ?p)) (over all (day)) (over all (at ?z ?p)) (over all (lifting ?x ?y)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 4)\n:condition (and (over all (at ?x ?p)) (over all (day)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n)\n\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Si0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain \nAdd durative-actions to the requirements and convert all actions into durative actions\n\nDrive has a duration of 10\nLift has a duration of 1\nDrop has a duration of 1\nLoad has a duration of 3\nUnload has a duration of 4\n\n(define (domain Depot)\n(:requirements :typing)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z))))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Si1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain \nModify the durations of the actions\n\nDrive duration 10\nLift duration 1\nDrop duration 1\nLoad duration 3\nUnload duration 4\n\n(define (domain Depot)\n(:requirements :typing :durative-actions)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration 1)\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Si2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain \nModify the durations of the actions\n\nDrive duration 10\nLift duration 1\nDrop duration 1\nLoad duration 3\nUnload duration 4\n\n(define (domain Depot)\n(:requirements :typing :durative-actions)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration 10)\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 3)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 4)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Si3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain \nAdd the ability to drive from one location to another\n\nThe drive action changes the location of the truck from one place to another and has a duration of 10\n\n(define (domain Depot)\n(:requirements :typing :durative-actions)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 3)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 4)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Si4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd lift and drop actions\n\nThis will require adding the lifting predicate to indicate the hoist lifting the crate as well as a Lift and Drop action\n\nThe Lift action can only lift a crate if it is at the same place as the hoist, that the hoist is available, the the crate is clear and the crate is on a surface\nHave the hoist lifting the crate and the surface will be clear\n\nThe Drop action drops the crate at the same place as the surface, the surface and the hoist must be at the same place, \ncan only drop a crate on a clear surface and does not cost any fuel, the surface will no longer be clear after dropping on it, the hoist becomes available again, \nand the crate will be clear in case other crates need to be stacked on top\n\nBoth actions have a duration of 1\n\n(define (domain Depot)\n(:requirements :typing :durative-actions)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration 10)\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 3)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)))\n:effect (and (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 4)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x)))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Si5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the ability to load and unload creates into the truck and for the truck to drive from one location to another\n\nThis will require adding 3 actions\n\nactions:\n\nLoad:\nconditions: the hoist and the truck must be at the same place, the hoist must be lifting the crate\neffect: the hoist will no longer be lifting the crate and will be available again, the crate will be in the truck and the duration of the action is 3\n\nUnload\nconditions: the hoist and the truck must be at the same place, the hoist must be available and the crate must be in the truck\neffect: the crate will no longer be in the truck, the hoist will be lifting the crate and thus no longer be available, the duration of unloading is 4\n\nDrive:\nThe drive action has a duration of 10 and moves the truck from one place to another\n\n(define (domain Depot)\n(:requirements :typing :durative-actions)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n\t\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Si6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL\nAdd the ability to Lift and Drop crates using the hoist, and to Load and Unload the truck with crates using the hoist\n\nThis will require adding 4 actions\n\nactions:\n\nLoad:\nconditions: the hoist and the truck must be at the same place, the hoist must be lifting the crate and the duration of Load is 3\neffect: the hoist will no longer be lifting the crate and will be available again, the crate will be in the truck and the current_load of the truck will increase by the weight of the crate\n\nUnload\nconditions: the hoist and the truck must be at the same place, the hoist must be available and the crate must be in the truck\neffect: the crate will no longer be in the truck, the hoist will be lifting the crate and thus no longer be available and the duration of Unload is 4\n\nLift\nCondition: The Hoist, if available lifts a crate if both are at the same place, for the hoist to lift the crate, the crate must be clear and on a surface\nEffect: Lifting the crate off the surface will leave it clear, the crate will no longer be clear since it's in the air, \nthe hoist lifting the crate with no longer be available, the crate is no longer at the same place as the hoist, the Lift action has a duration of 1\n\nDrop \nCondition: the hoist drops the crate at the same place as the surface, the surface and the hoist must be at the same place, the hoist can only drop a crate on a clear surface\nEffect : The surface will no longer be clear after dropping the crate on it, the hoist becomes available again, the crate will be clear in case other crates need to be stacked on top, the duration of the action is 1\n\n(define (domain Depot)\n(:requirements :typing :durative-actions)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration 10)\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Si7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL\nAdd the ability to Lift and Drop crates using the hoist, and to Load and Unload the truck with crates using the hoist and to Drive from one location to another\n\nThis will require adding 5 actions\n\nactions:\nDrive:\nCondition: The truck is at the starting place\nDuration : 10\neffect: the truck is no longer at the starting place but at the other place\n\nLoad\nconditions: the hoist and the truck must be at the same place, the hoist must be lifting the crates\nduration : 3\neffect: the hoist will no longer be lifting the crate and will be available again, the crate will be in the truck\n\nUnload\nconditions: the hoist and the truck must be at the same place, the hoist must be available and the crate must be in the truck\nduration : 4\neffect: the crate will no longer be in the truck, the hoist will be lifting the crate and thus no longer be available\n\nLift\nCondition: The Hoist, if available lifts a crate if both are at the same place, for the hoist to lift the crate, the crate must be clear and on a surface\nduration : 1\nEffect: Lifting the crate off the surface will leave it clear, the crate will no longer be clear since it's in the air, \nthe hoist lifting the crate with no longer be available, the crate is no longer at the same place as the hoist\n\nDrop \nCondition: the hoist drops the crate at the same place as the surface, the surface and the hoist must be at the same place, the hoist can only drop a crate on a clear surface\nduration : 1\nEffect : The surface will no longer be clear after dropping the crate on it, the hoist becomes available again, the crate will be clear in case other crates need to be stacked on top\n\n(define (domain Depot)\n(:requirements :typing :durative-actions)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration 10)\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Si8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the Inspected predicate and need of it\n\nThis will require removing 1 predicate, 1 action and modifying 1 action\npredicate: inspected crate\n\nactions:\nInspect\nRemove the Inspect action\n\nLoad:\nRemove need for a crate to be inspected to perform load action\n\n(define (domain Depot)\n(:requirements :typing :durative-actions)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n             (inspected ?x - crate))  ;; New predicate to indicate inspection status\n\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration 10)\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 3)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)) (at start (inspected ?y))) ;; Inspected condition added\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 4)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n(:durative-action Inspect  ;; New action for inspecting crates\n:parameters (?x - hoist ?y - crate ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (clear ?y)))\n:effect (and (at end (inspected ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Si9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the Inspected predicate and need of it\n\nThis will require removing 1 predicate, 2 action and modifying 1 action\npredicate: inspected crate\n\nactions:\nInspect\nRemove the Inspect action\nBribe:\nRemove the bribe action\nLoad:\nRemove need for a crate to be inspected to perform load action\n\n(define (domain Depot)\n(:requirements :typing :durative-actions)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n             (inspected ?x - crate))  ;; Predicate to indicate inspection status\n\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration 10)\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 3)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)) (at start (inspected ?y))) ;; Inspected condition added\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 4)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n(:durative-action Inspect  ;; Modified action for inspecting crates\n:parameters (?x - hoist ?y - crate ?p - place)\n:duration (= ?duration 3)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (clear ?y)))\n:effect (and (at end (inspected ?y))))\n\n(:durative-action Bribe  ;; New action for bribing to get the inspected attribute\n:parameters (?x - crate ?p - place)\n:duration (= ?duration 1)\n:condition (at start (at ?x ?p))\n:effect (at end (inspected ?x)))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Si10", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the need for it to be day to perform actions\n\nRemove the day condition from action conditions\n\n(define (domain Depot)\n(:requirements :typing :durative-actions)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n             (day))  ;; New predicate to indicate daytime\n\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration 10)\n:condition (and (at start (at ?x ?y)) (over all (day)))  ;; Added day condition\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (day)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (day)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 3)\n:condition (and (over all (at ?x ?p)) (over all (day)) (over all (at ?z ?p)) (over all (lifting ?x ?y)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 4)\n:condition (and (over all (at ?x ?p)) (over all (day)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n)\n\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_St0_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the need for it to be day to perform actions\n\n(define (domain Depot)\n(:requirements :typing)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n             (day))\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y) (day))\n:effect (and (not (at ?x ?y)) (at ?x ?z)))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y) (day))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z))))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y) (day))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y) (day))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z) (day))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)))\n\n)"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_St1_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain \nRemove the airplane type and change the parameters in load and unload to take truck instead of locatable\n\n\n(define (domain Depot)\n(:requirements :typing)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface airplane - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - locatable)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:action Fly\n:parameters (?x - airplane ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z))\n)\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z))))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - locatable ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - locatable ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_St2_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain \nAdd the ability to drive from one location to another\n\nThe drive action changes the location of the truck from one place to another\n\n(define (domain Depot)\n(:requirements :typing)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z))))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_St3_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd lift and drop actions\n\nThis will require adding the lifting predicate to indicate the hoist lifting the crate as well as a Lift and Drop action\n\nUsing commonsense reasoning and thinking step by step\n\n(define (domain Depot)\n(:requirements :typing)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_St4_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the ability to load and unload creates into the truck and for the truck to drive from one location to another\n\nThis will require adding 3 actions\nactions: Load Unload Drive\n\nThe Load action loads the crate currently on the hoist into the truck, The unload does the opposite and the drive action moves the truck from a to b. \nThe drive action has a duration of 10, the load a duration of 3 and Unload a duration of 4\nUsing commonsense and the domain add the required elements think step by step\n\n(define (domain Depot)\n(:requirements :typing)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z))))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_St5_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL\nAdd the ability to Lift and Drop crates using the hoist, and to Load and Unload the truck with crates using the hoist\n\nThis will require adding  4 actions\n\n\nThe Load action loads the crate currently on the hoist into the truck, The Unload action does the opposite\nThe Lift action uses the hoist to lift a crate that is clear of a surface, Drop renders the hoist available and places the crate being lifted on a clear surface\nUsing commonsense and the domain add the required elements think step by step\n\n(define (domain Depot)\n(:requirements :typing)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_St6_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL\nAdd the ability to Lift and Drop crates using the hoist, and to Load and Unload the truck with crates using the hoist\n\nThis will require adding 5 actions\n\nThe drive action moves the truck from start to finnish and has a duration of 10\nThe Load action loads the crate currently on the hoist into the truck, The unload does the opposite\nThe Lift action uses the hoist to lift a crate that is clear of a surface, Drop liberates the Hoist and places the crate on a clear surface\nUsing commonsense and the domain add the required elements think step by step\n\n(define (domain Depot)\n(:requirements :typing)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_St7_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nCrates no longer require inspection to be loaded\n\nUsing common sense\nRemove the concept of inspection\nThink step by step\n\n(define (domain Depot)\n(:requirements :typing)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n             (verified ?x - crate))\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z))))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y) (verified ?y))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)))\n\n(:action Inspect\n:parameters (?x - hoist ?y - crate ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (clear ?y))\n:effect (and (inspected ?y)))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_St0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the need for it to be day to perform actions\n\nRemove the day condition from action conditions\n\n(define (domain Depot)\n(:requirements :typing)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n             (day))\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y) (day))\n:effect (and (not (at ?x ?y)) (at ?x ?z)))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y) (day))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z))))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y) (day))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y) (day))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z) (day))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)))\n\n)"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_St1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain \nRemove the airplane type and change the parameters in load and unload to take truck instead of locatable\n\n(define (domain Depot)\n(:requirements :typing)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface airplane - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - locatable)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:action Fly\n:parameters (?x - airplane ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z))\n)\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z))))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - locatable ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - locatable ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_St2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain \nAdd the ability to drive from one location to another\n\nThe drive action changes the location of the truck from one place to another\n\n(define (domain Depot)\n(:requirements :typing)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z))))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_St3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd lift and drop actions\n\nThis will require adding the lifting predicate to indicate the hoist lifting the crate as well as a Lift and Drop action\n\nThe Lift action can only lift a crate if it is at the same place as the hoist, that the hoist is available, the the crate is clear and the crate is on a surface\nHave the hoist lifting the crate and the surface will be clear\n\nThe Drop action drops the crate at the same place as the surface, the surface and the hoist must be at the same place, \ncan only drop a crate on a clear surface and does not cost any fuel, the surface will no longer be clear after dropping on it, the hoist becomes available again, \nand the crate will be clear in case other crates need to be stacked on top\n\n\n(define (domain Depot)\n(:requirements :typing)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_St4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the ability to load and unload creates into the truck and for the truck to drive from one location to another\n\nThis will require adding 3 actions\n\nactions:\n\nLoad:\nconditions: the hoist and the truck must be at the same place, the hoist must be lifting the crate\neffect: the hoist will no longer be lifting the crate and will be available again, the crate will be in the truck\n\nUnload\nconditions: the hoist and the truck must be at the same place, the hoist must be available and the crate must be in the truck\neffect: the crate will no longer be in the truck, the hoist will be lifting the crate and thus no longer be available\n\nDrive:\nThe drive action moves the truck from one place to another\n\n(define (domain Depot)\n(:requirements :typing)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z))))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_St5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL\nAdd the ability to Lift and Drop crates using the hoist, and to Load and Unload the truck with crates using the hoist\n\nThis will require adding 4 actions\n\nactions:\n\nLoad:\nconditions: the hoist and the truck must be at the same place, the hoist must be lifting the crate\neffect: the hoist will no longer be lifting the crate and will be available again, the crate will be in the truck and the current_load of the truck will increase by the weight of the crate\n\nUnload\nconditions: the hoist and the truck must be at the same place, the hoist must be available and the crate must be in the truck\neffect: the crate will no longer be in the truck, the hoist will be lifting the crate and thus no longer be available\n\nLift\nCondition: The Hoist, if available lifts a crate if both are at the same place, for the hoist to lift the crate, the crate must be clear and on a surface\nEffect: Lifting the crate off the surface will leave it clear, the crate will no longer be clear since it's in the air, \nthe hoist lifting the crate with no longer be available, the crate is no longer at the same place as the hoist\n\nDrop \nCondition: the hoist drops the crate at the same place as the surface, the surface and the hoist must be at the same place, the hoist can only drop a crate on a clear surface\nEffect : The surface will no longer be clear after dropping the crate on it, the hoist becomes available again, the crate will be clear in case other crates need to be stacked on top\n\n(define (domain Depot)\n(:requirements :typing)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_St6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL\nAdd the ability to Lift and Drop crates using the hoist, and to Load and Unload the truck with crates using the hoist and to Drive from one location to another\n\nThis will require adding 5 actions\n\nactions:\nDrive:\nCondition: The truck is at the starting place\neffect: the truck is no longer at the starting place but at the other place\n\nLoad\nconditions: the hoist and the truck must be at the same place, the hoist must be lifting the crates\neffect: the hoist will no longer be lifting the crate and will be available again, the crate will be in the truck\n\nUnload\nconditions: the hoist and the truck must be at the same place, the hoist must be available and the crate must be in the truck\neffect: the crate will no longer be in the truck, the hoist will be lifting the crate and thus no longer be available\n\nLift\nCondition: The Hoist, if available lifts a crate if both are at the same place, for the hoist to lift the crate, the crate must be clear and on a surface\nEffect: Lifting the crate off the surface will leave it clear, the crate will no longer be clear since it's in the air, \nthe hoist lifting the crate with no longer be available, the crate is no longer at the same place as the hoist\n\nDrop \nCondition: the hoist drops the crate at the same place as the surface, the surface and the hoist must be at the same place, the hoist can only drop a crate on a clear surface\nEffect : The surface will no longer be clear after dropping the crate on it, the hoist becomes available again, the crate will be clear in case other crates need to be stacked on top\n\n(define (domain Depot)\n(:requirements :typing)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_St7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the Inspected predicate and need of it\n\nThis will require removing 1 predicate, 1 action and modifying 1 action\npredicate: inspected crate\n\nactions:\nInspect\nRemove the Inspect action\n\nLoad:\nRemove need for a crate to be inspected to perform load action\n\n(define (domain Depot)\n(:requirements :typing)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n             (verified ?x - crate))\n\t\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z))))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n\t\t(on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y) (verified ?y))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)))\n\n(:action Inspect\n:parameters (?x - hoist ?y - crate ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (clear ?y))\n:effect (and (inspected ?y)))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti0_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain by \nadding a distance and speed function \n\nThis will require adding 2 functions: \nspeed per truck and distance between a place and another place\n\nModify the drive duration to be equal to distance/speed\n\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:functions (weight ?c - crate)\n\t    (power ?h - hoist))\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration 10)\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti1_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain \nModify the durations of the actions\n\nLift duration 1\nDrop duration 1\n\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:functions (distance ?x - place ?y - place)\n\t    (speed ?t - truck)\n\t    (weight ?c - crate)\n\t    (power ?h - hoist))\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration (/ (distance ?y ?z) (speed ?x)))\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 3)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 3)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti2_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain \nAdd power and weight functions to evaluate load and unload durations\n\nthis will require adding 2 functions\nweight per crate and power per hoist\n\nThe duration of the Load and Unload actions is equal to wight/power\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:functions (distance ?x - place ?y - place)\n\t    (speed ?t - truck))\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration (/ (distance ?y ?z) (speed ?x)))\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 5)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 5)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti3_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain \nAdd the ability to drive from one location to another\n\nThe drive action changes the location of the truck from one place to another and has a duration of distance/speed\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:functions (distance ?x - place ?y - place)\n\t    (speed ?t - truck)\n\t    (weight ?c - crate)\n\t    (power ?h - hoist))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti4_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd lift and drop actions\n\nThis will require adding the lifting predicate to indicate the hoist lifting the crate as well as a Lift and Drop action\nBoth actions have a duration of 1\n\nUsing commonsense reasoning and thinking step by step\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (available ?x - hoist))\n\n(:functions (distance ?x - place ?y - place)\n\t    (speed ?t - truck)\n\t    (weight ?c - crate)\n\t    (power ?h - hoist))\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration (/ (distance ?y ?z) (speed ?x)))\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x)))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti5_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the ability to load and unload creates into the truck and for the truck to drive from one location to another\n\nThis will require adding 3 actions and 4 functions\nfunctions: power, weight, distance, speed\nactions: Load Unload Drive\n\nThe Load action loads the crate currently on the hoist into the truck, The unload does the opposite and the drive action moves the truck from a to b. \nThe drive action has a duration of distance/speed, the load and Unload a duration is equal to weight/power\nUsing commonsense and the domain add the required elements think step by step\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti6_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the ability to load and unload creates into the truck and for the truck to drive from one location to another\n\nThis will require adding 3 action\nactions: Load Unload Drive\n\nThe Load action loads the crate currently on the hoist into the truck, The unload does the opposite and the drive action moves the truck from a to b. \nThe drive action has a duration of distance/speed, the load and Unload a duration is equal to weight/power\nUsing commonsense and the domain add the required elements think step by step\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:functions (distance ?x - place ?y - place)\n\t    (speed ?t - truck)\n\t    (weight ?c - crate)\n\t    (power ?h - hoist))\n\t\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti7_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL\nAdd the ability to Lift and Drop crates using the hoist, and to Load and Unload the truck with crates using the hoist\n\nThis will require adding  4 actions\n\n\nThe Load action loads the crate currently on the hoist into the truck, The Unload action does the opposite\nThe Lift action uses the hoist to lift a crate that is clear of a surface, Drop renders the hoist available and places the crate being lifted on a clear surface\nThe Lift and Drop actions have a duration of 1, the Load and Unload actions have a duration of weight/power\nUsing commonsense and the domain add the required elements think step by step\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:functions (distance ?x - place ?y - place)\n\t    (speed ?t - truck)\n\t    (weight ?c - crate)\n\t    (power ?h - hoist))\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration (/ (distance ?y ?z) (speed ?x)))\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti8_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL\nAdd the ability to Lift and Drop crates using the hoist, and to Load and Unload the truck with crates using the hoist\n\nThis will require adding 5 actions\n\nThe drive action moves the truck from start to finnish and has a duration of 10\nThe Load action loads the crate currently on the hoist into the truck, The unload does the opposite\nThe Lift action uses the hoist to lift a crate that is clear of a surface, Drop liberates the Hoist and places the crate on a clear surface\nThe lift and drop actions have a duration of 1. The load and Unload actions have a duration of 3 and 4 respectively\nUsing commonsense and the domain add the required elements think step by step\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:functions (distance ?x - place ?y - place)\n\t    (speed ?t - truck)\n\t    (weight ?c - crate)\n\t    (power ?h - hoist))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti9_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the need for it to be day to perform actions\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n             (day))\n\n(:functions (distance ?x - place ?y - place)\n\t    (speed ?t - truck)\n\t    (weight ?c - crate)\n\t    (power ?h - hoist))\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration (/ (distance ?y ?z) (speed ?x)))\n:condition (and (at start (at ?x ?y)) (over all (day)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)) (over all (day)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)) (over all (day)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)) (over all (day)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)) (over all (day)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti10_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nCrates no longer require inspection to be loaded\n\nUsing common sense\nRemove the concept of inspection\nThink step by step\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n             (inspected ?x - crate))\n\n(:functions (distance ?x - place ?y - place)\n\t    (speed ?t - truck)\n\t    (weight ?c - crate)\n\t    (power ?h - hoist))\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration (/ (distance ?y ?z) (speed ?x)))\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)) (at start (inspected ?y)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n(:durative-action Inspect  ;; New action for inspecting crates\n:parameters (?x - hoist ?y - crate ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (clear ?y)))\n:effect (and (at end (inspected ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti11_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nCrates no longer require inspection to be loaded\n\nUsing common sense\nRemove the concept of inspection\nThink step by step\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n             (inspected ?x - crate))\n\n(:functions (distance ?x - place ?y - place)\n\t    (speed ?t - truck)\n\t    (weight ?c - crate)\n\t    (power ?h - hoist))\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration (/ (distance ?y ?z) (speed ?x)))\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)) (at start (inspected ?y)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n(:durative-action Inspect  ;; New action for inspecting crates\n:parameters (?x - hoist ?y - crate ?p - place)\n:duration (= ?duration 3)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (clear ?y)))\n:effect (and (at end (inspected ?y))))\n\n(:durative-action Bribe  ;; New action for bribing to get the inspected attribute\n:parameters (?x - crate ?p - place)\n:duration (= ?duration 1)\n:condition (at start (at ?x ?p))\n:effect (at end (inspected ?x)))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti12_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain \nAdd durative-actions to the requirements and convert all actions into durative actions\n\nDrive has a duration of distance/speed\nLift has a duration of 1\nDrop has a duration of 1\nLoad has a duration of weight/power\nUnload has a duration of weight/power\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n    depot distributor - place\n    truck hoist surface - locatable\n    pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:functions (distance ?x - place ?y - place)\n            (speed ?t - truck)\n            (weight ?c - crate)\n            (power ?h - hoist))\n\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place)\n:precondition (at ?x ?y)\n:effect (and (not (at ?x ?y)) (at ?x ?z)))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z))))\n\n(:action Drop\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n        (on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)))\n\n(:action Unload\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)))\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti13_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain \nremove fuel-cost\n\nRemove the fuel cost function from the functions and from all actions\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:functions (distance ?x - place ?y - place)\n\t    (speed ?t - truck)\n\t    (weight ?c - crate)\n\t    (power ?h - hoist)\n            (fuel-cost))\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration (/ (distance ?y ?z) (speed ?x)))\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z)) (at end (increase (fuel-cost) 10))))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z))) (at end (increase (fuel-cost) 1))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x)) (at end (increase (fuel-cost) 2))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain by \nadding a distance and speed function \n\nThis will require adding 2 functions: \nspeed per truck and distance between a place and another place\n\nModify the drive duration to be equal to distance/speed\n\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:functions (weight ?c - crate)\n\t    (power ?h - hoist))\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration 10)\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain \nModify the durations of the actions\n\nLift duration = 1\nDrop duration = 1\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:functions (distance ?x - place ?y - place)\n\t    (speed ?t - truck)\n\t    (weight ?c - crate)\n\t    (power ?h - hoist))\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration (/ (distance ?y ?z) (speed ?x)))\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 3)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 3)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain \nAdd power and weight functions to evaluate load and unload durations\n\nthis will require adding 2 functions\nweight per crate and power per hoist\n\nThe duration of the Load and Unload actions is equal to wight/power\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:functions (distance ?x - place ?y - place)\n\t    (speed ?t - truck))\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration (/ (distance ?y ?z) (speed ?x)))\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 5)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration 5)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain \nAdd the ability to drive from one location to another\n\nThe drive action changes the location of the truck from one place to another and has a duration of distance/speed\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:functions (distance ?x - place ?y - place)\n\t    (speed ?t - truck)\n\t    (weight ?c - crate)\n\t    (power ?h - hoist))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd lift and drop actions\n\nThis will require adding the lifting predicate to indicate the hoist lifting the crate as well as a Lift and Drop action\n\nThe Lift action can only lift a crate if it is at the same place as the hoist, that the hoist is available, the the crate is clear and the crate is on a surface\nHave the hoist lifting the crate and the surface will be clear\n\nThe Drop action drops the crate at the same place as the surface, the surface and the hoist must be at the same place, \ncan only drop a crate on a clear surface and does not cost any fuel, the surface will no longer be clear after dropping on it, the hoist becomes available again, \nand the crate will be clear in case other crates need to be stacked on top\n\nBoth actions have a duration of 1\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (available ?x - hoist))\n\n(:functions (distance ?x - place ?y - place)\n\t    (speed ?t - truck)\n\t    (weight ?c - crate)\n\t    (power ?h - hoist))\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration (/ (distance ?y ?z) (speed ?x)))\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x)))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the ability to load and unload creates into the truck and for the truck to drive from one location to another\n\nThis will require adding 3 actions and 4 functions\nfunctions: weight per crate, power per hoist, distance between 2 places and speed per truck\n\nactions:\n\nLoad:\nconditions: the hoist and the truck must be at the same place, the hoist must be lifting the crate\neffect: the hoist will no longer be lifting the crate and will be available again, the crate will be in the truck and the duration of the action is weight/power\n\nUnload\nconditions: the hoist and the truck must be at the same place, the hoist must be available and the crate must be in the truck\neffect: the crate will no longer be in the truck, the hoist will be lifting the crate and thus no longer be available, the duration of unloading is weight/power\n\nDrive:\nThe drive action has a duration distance/speed and moves the truck from one place to another\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the ability to load and unload creates into the truck and for the truck to drive from one location to another\n\nThis will require adding 3 actions\n\nactions:\n\nLoad:\nconditions: the hoist and the truck must be at the same place, the hoist must be lifting the crate\neffect: the hoist will no longer be lifting the crate and will be available again, the crate will be in the truck and the duration of the action is weight/power\n\nUnload\nconditions: the hoist and the truck must be at the same place, the hoist must be available and the crate must be in the truck\neffect: the crate will no longer be in the truck, the hoist will be lifting the crate and thus no longer be available, the duration of unloading is weight/power\n\nDrive:\nThe drive action has a duration distance/speed and moves the truck from one place to another\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:functions (distance ?x - place ?y - place)\n\t    (speed ?t - truck)\n\t    (weight ?c - crate)\n\t    (power ?h - hoist))\n\t\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL\nAdd the ability to Lift and Drop crates using the hoist, and to Load and Unload the truck with crates using the hoist\n\nThis will require adding 4 actions\n\nactions:\n\nLoad:\nconditions: the hoist and the truck must be at the same place, the hoist must be lifting the crate and the duration of Load is weight/power\neffect: the hoist will no longer be lifting the crate and will be available again, the crate will be in the truck and the current_load of the truck will increase by the weight of the crate\n\nUnload\nconditions: the hoist and the truck must be at the same place, the hoist must be available and the crate must be in the truck\neffect: the crate will no longer be in the truck, the hoist will be lifting the crate and thus no longer be available and the duration of Unload is weight/power\n\nLift\nCondition: The Hoist, if available lifts a crate if both are at the same place, for the hoist to lift the crate, the crate must be clear and on a surface\nEffect: Lifting the crate off the surface will leave it clear, the crate will no longer be clear since it's in the air, \nthe hoist lifting the crate with no longer be available, the crate is no longer at the same place as the hoist, the Lift action has a duration of 1\n\nDrop \nCondition: the hoist drops the crate at the same place as the surface, the surface and the hoist must be at the same place, the hoist can only drop a crate on a clear surface\nEffect : The surface will no longer be clear after dropping the crate on it, the hoist becomes available again, the crate will be clear in case other crates need to be stacked on top, the duration of the action is 1\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:functions (distance ?x - place ?y - place)\n\t    (speed ?t - truck)\n\t    (weight ?c - crate)\n\t    (power ?h - hoist))\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration (/ (distance ?y ?z) (speed ?x)))\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL\nAdd the ability to Lift and Drop crates using the hoist, and to Load and Unload the truck with crates using the hoist and to Drive from one location to another\n\nThis will require adding 5 actions\n\nactions:\nDrive:\nCondition: The truck is at the starting place\nDuration : distace/speed\neffect: the truck is no longer at the starting place but at the other place\n\nLoad\nconditions: the hoist and the truck must be at the same place, the hoist must be lifting the crates\nduration : weight/power\neffect: the hoist will no longer be lifting the crate and will be available again, the crate will be in the truck\n\nUnload\nconditions: the hoist and the truck must be at the same place, the hoist must be available and the crate must be in the truck\nduration : weight/power\neffect: the crate will no longer be in the truck, the hoist will be lifting the crate and thus no longer be available\n\nLift\nCondition: The Hoist, if available lifts a crate if both are at the same place, for the hoist to lift the crate, the crate must be clear and on a surface\nduration : 1\nEffect: Lifting the crate off the surface will leave it clear, the crate will no longer be clear since it's in the air, \nthe hoist lifting the crate with no longer be available, the crate is no longer at the same place as the hoist\n\nDrop \nCondition: the hoist drops the crate at the same place as the surface, the surface and the hoist must be at the same place, the hoist can only drop a crate on a clear surface\nduration : 1\nEffect : The surface will no longer be clear after dropping the crate on it, the hoist becomes available again, the crate will be clear in case other crates need to be stacked on top\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:functions (distance ?x - place ?y - place)\n\t    (speed ?t - truck)\n\t    (weight ?c - crate)\n\t    (power ?h - hoist))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the need for it to be day to perform actions\n\nRemove the day condition from action conditions\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n             (day))\n\n(:functions (distance ?x - place ?y - place)\n\t    (speed ?t - truck)\n\t    (weight ?c - crate)\n\t    (power ?h - hoist))\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration (/ (distance ?y ?z) (speed ?x)))\n:condition (and (at start (at ?x ?y)) (over all (day)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)) (over all (day)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)) (over all (day)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)) (over all (day)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)) (over all (day)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti10", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the Inspected predicate and need of it\n\nThis will require removing 1 predicate, 1 action and modifying 1 action\npredicate: inspected crate\n\nactions:\nInspect\nRemove the Inspect action\n\nLoad:\nRemove need for a crate to be inspected to perform load action\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n             (inspected ?x - crate))\n\n(:functions (distance ?x - place ?y - place)\n\t    (speed ?t - truck)\n\t    (weight ?c - crate)\n\t    (power ?h - hoist))\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration (/ (distance ?y ?z) (speed ?x)))\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)) (at start (inspected ?y)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n(:durative-action Inspect  ;; New action for inspecting crates\n:parameters (?x - hoist ?y - crate ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (clear ?y)))\n:effect (and (at end (inspected ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti11", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the Inspected predicate and need of it\n\nThis will require removing 1 predicate, 2 action and modifying 1 action\npredicate: inspected crate\n\nactions:\nInspect\nRemove the Inspect action\nBribe:\nRemove the bribe action\nLoad:\nRemove need for a crate to be inspected to perform load action\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface)\n             (inspected ?x - crate))\n\n(:functions (distance ?x - place ?y - place)\n\t    (speed ?t - truck)\n\t    (weight ?c - crate)\n\t    (power ?h - hoist))\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration (/ (distance ?y ?z) (speed ?x)))\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z)))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)) (at start (inspected ?y)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n(:durative-action Inspect  ;; New action for inspecting crates\n:parameters (?x - hoist ?y - crate ?p - place)\n:duration (= ?duration 3)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (clear ?y)))\n:effect (and (at end (inspected ?y))))\n\n(:durative-action Bribe  ;; New action for bribing to get the inspected attribute\n:parameters (?x - crate ?p - place)\n:duration (= ?duration 1)\n:condition (at start (at ?x ?p))\n:effect (at end (inspected ?x)))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti12", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain \nAdd durative-actions to the requirements and convert all actions into durative actions\n\nDrive has a duration of distance/speed\nLift has a duration of 1\nDrop has a duration of 1\nLoad has a duration of weight/power\nUnload has a duration of weight/power\n\n(define (domain Depot)\n(:requirements :typing :fluents)\n(:types place locatable - object\n    depot distributor - place\n    truck hoist surface - locatable\n    pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:functions (distance ?x - place ?y - place)\n            (speed ?t - truck)\n            (weight ?c - crate)\n            (power ?h - hoist))\n\n(:action Drive\n:parameters (?x - truck ?y - place ?z - place)\n:precondition (at ?x ?y)\n:effect (and (not (at ?x ?y)) (at ?x ?z)))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z))))\n\n(:action Drop\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n        (on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)))\n\n(:action Unload\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)))\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Depots_Ti13", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain \nremove fuel-cost\n\nRemove the fuel cost function from the functions and from all actions\n\n(define (domain Depot)\n(:requirements :typing :durative-actions :fluents)\n(:types place locatable - object\n\tdepot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n\n(:functions (distance ?x - place ?y - place)\n\t    (speed ?t - truck)\n\t    (weight ?c - crate)\n\t    (power ?h - hoist)\n            (fuel-cost))\n\t\n(:durative-action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:duration (= ?duration (/ (distance ?y ?z) (speed ?x)))\n:condition (and (at start (at ?x ?y)))\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z)) (at end (increase (fuel-cost) 10))))\n\n(:durative-action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (available ?x)) (at start (at ?y ?p)) (at start (on ?y ?z)) (at start (clear ?y)))\n:effect (and (at start (not (at ?y ?p))) (at start (lifting ?x ?y)) (at start (not (clear ?y))) (at start (not (available ?x))) \n             (at start (clear ?z)) (at start (not (on ?y ?z))) (at end (increase (fuel-cost) 1))))\n\n(:durative-action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (clear ?z)) (over all (lifting ?x ?y)))\n:effect (and (at end (available ?x)) (at end (not (lifting ?x ?y))) (at end (at ?y ?p)) (at end (not (clear ?z))) (at end (clear ?y))\n\t\t(at end (on ?y ?z))))\n\n(:durative-action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (over all (lifting ?x ?y)))\n:effect (and (at end (not (lifting ?x ?y))) (at end (in ?y ?z)) (at end (available ?x)) (at end (increase (fuel-cost) 2))))\n\n(:durative-action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:duration (= ?duration (/ (weight ?y) (power ?x)))\n:condition (and (over all (at ?x ?p)) (over all (at ?z ?p)) (at start (available ?x)) (at start (in ?y ?z)))\n:effect (and (at start (not (in ?y ?z))) (at start (not (available ?x))) (at start (lifting ?x ?y))))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Nu0_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd walked and time-to-walk functions to track the total walked time\n\nThis requires to add 2 functions and modify 1 action\nfunctions: walked and time-to-walk from location to location\naction: WALK\n\nmodify the walk action to track walked time\n\n(define (domain driverlog)\n  (:requirements :typing :fluents) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n  (:functions \n\t\t(time-to-drive ?l1 ?l2 - location)\n\t\t(driven))\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (driving ?driver ?truck))\n  :effect\n   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)\n\t\t(increase (driven) (time-to-drive ?loc-from ?loc-to))))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Nu1_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nModify the following PDDL domain\nAdd driven and time-to-drive functions to track the total driven time\n\nThis requires to add 2 functions and modify 1 action\nfunctions: driven and time-to-drive from location to location\naction: DRIVE-TRUCK\n\nmodify the DRIVE-TRUCK action to track the driven time\n\n(define (domain driverlog)\n  (:requirements :typing :fluents) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n  (:functions (time-to-walk ?l1 ?l2 - location)\n\t\t(walked))\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (driving ?driver ?truck))\n  :effect\n   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)\n\t(increase (walked) (time-to-walk ?loc-from ?loc-to))))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Nu2_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd WALK action and walked and time-to-walk functions to track the total walked time\n\nThis requires to add 2 functions and add 1 action\nfunctions: walked and time-to-walk from location to location\naction: WALK\n\nThe WALK action allows a driver to move from one location to another and increases the walked time by time-to-walk\n\n(define (domain driverlog)\n  (:requirements :typing :fluents) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n  (:functions \n\t\t(time-to-drive ?l1 ?l2 - location)\n\t\t(driven))\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (driving ?driver ?truck))\n  :effect\n   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)\n\t\t(increase (driven) (time-to-drive ?loc-from ?loc-to))))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Nu3_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK, DISEMBARK-TRUCK, DRIVE-TRUCK actions which allows the driver to get in truck and be in driving position and to to drive truck from one location to another\n\nThis requires adding 3 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK, DRIVE-TRUCK\n\nactions:\nBOARD-TRUCK:\nThe driver boards the truck\n\nDISEMBARK-TRUCK:\nthe driver gets out of the truck\n\nDRIVE-TRUCK:\nThe DRIVE-TRUCK action allows a truck to move from one location to another if the driver is driving the truck and increases the driven time by time-to-drive \n\ncontext: the empty predicate indicates if truck has a driver in it, the driving predicate indicates if a driver is in a driving position in a truck\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :fluents) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n  (:functions (time-to-walk ?l1 ?l2 - location)\n\t\t(time-to-drive ?l1 ?l2 - location)\n\t\t(driven)\n\t\t(walked))\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)\n\t\t(increase (driven) (time-to-drive ?loc-from ?loc-to))))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)\n\t(increase (walked) (time-to-walk ?loc-from ?loc-to))))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Nu4_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK and UNLOAD-TRUCK actions which allows the driver to get in and out of truck as well as load and unload object from truck\n\nThis requires adding 4 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK, UNLOAD-TRUCK\n\nactions:\nBOARD-TRUCK:\nThe driver boards the truck\n\nDISEMBARK-TRUCK:\nthe driver gets out of the truck\n\nLOAD-TRUCK:\nMoves an obj into the truck\n\nUNLOAD-TRUCK\nMoves an obj out of the truck\n\ncontext: the empty predicate indicates if truck has a driver in it, the driving predicate indicates if a driver is in a driving position in a truck, \nthe in predicate represents if an obj is in a truck \n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :fluents) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n  (:functions (time-to-walk ?l1 ?l2 - location)\n\t\t(time-to-drive ?l1 ?l2 - location)\n\t\t(driven)\n\t\t(walked))\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)\n\t(increase (walked) (time-to-walk ?loc-from ?loc-to))))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Nu5_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK, UNLOAD-TRUCK and DRIVE-TRUCK actions \nwhich allows the driver to get in and out of truck as well as load and unload object from truck and drive the truck\n\nThis requires adding 4 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK, UNLOAD-TRUCK, DRIVE-TRUCK\n\nactions:\nBOARD-TRUCK:\nThe driver boards the truck\n\nDISEMBARK-TRUCK:\nthe driver gets out of the truck\n\nLOAD-TRUCK:\nMoves an obj into the truck\n\nUNLOAD-TRUCK:\nMoves an obj out of the truck\n\nDRIVE-TRUCK:\nDrives truck from one location to another and adds the time-to-drive between them to the driven tracker\n\ncontext: the empty predicate indicates if truck has a driver in it, the driving predicate indicates if a driver is in a driving position in a truck, \nthe in predicate represents if an obj is in a truck \n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :fluents) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n  (:functions (time-to-walk ?l1 ?l2 - location)\n\t\t(time-to-drive ?l1 ?l2 - location)\n\t\t(driven)\n\t\t(walked))\n\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)\n\t\t(increase (driven) (time-to-drive ?loc-from ?loc-to))))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)\n\t(increase (walked) (time-to-walk ?loc-from ?loc-to))))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Nu6_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the Following PDDL domain\nRemove INCREASE-SPEED and DECREASE-SPEED actions as well as the speed function\n\ncontext: Driving the truck should directly increase the driven time by time-to-drive\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :fluents) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n  (:functions (time-to-walk ?l1 ?l2 - location)\n\t\t(time-to-drive ?l1 ?l2 - location)\n\t\t(driven)\n\t\t(walked))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)\n\t(increase (walked) (time-to-walk ?loc-from ?loc-to))))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Nu7_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd the driving predicate that tracks driver driving a truck\n\nAdd this predicate to actions that would make sense to have it either in their preconditions or effects\n\ncontext: the driving predicate indicates if a driver is in a driving position in a truck\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :fluents) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n  (:functions (time-to-walk ?l1 ?l2 - location)\n\t\t(time-to-drive ?l1 ?l2 - location)\n\t\t(driven)\n    (speed ?tr - truck)\n\t\t(walked))\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (driving ?driver ?truck))\n  :effect\n   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)\n\t\t(increase (driven) (/ (time-to-drive ?loc-from ?loc-to) (speed ?truck)))))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)\n\t(increase (walked) (time-to-walk ?loc-from ?loc-to))))\n\n(:action INCREASE-SPEED\n:parameters (?truck - truck ?driver - driver)\n:preconditions (and (driving ?driver ?truck) (<= (speed ?truck) 10))\n:effect (and (increase (speed ?truck) 1)))\n\n(:action DECREASE-SPEED\n:parameters (?truck - truck ?driver - driver)\n:preconditions (and (driving ?driver ?truck) (>= (speed ?truck) 1))\n:effect (and (decrease (speed ?truck) 1)))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Nu8_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the tires-ok predicate and the INFLATE-TIRES action\n\nRemove any need or effect that involves tires-ok\nRemove INFLATE-TIRES action\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :fluents) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(link ?x ?y - location)\n    (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n  (:functions (time-to-walk ?l1 ?l2 - location)\n\t\t(time-to-drive ?l1 ?l2 - location)\n\t\t(driven)\n\t\t(walked))\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc))\n  :effect\n   (and (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)\n\t\t(increase (driven) (time-to-drive ?loc-from ?loc-to))))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)\n\t(increase (walked) (time-to-walk ?loc-from ?loc-to))))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Nu9_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the path predicate that defines an existing path to walk between 2 locations\n\nThis requires adding 1 predicate and modifying 1 action\npredicate: path from one location to another\n\nWALK:\nIn order to walk from location to another a path between the 2 locations must exist\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :fluents) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) \n    (path ?x ?y - location)\n\t\t(empty ?v - truck)\n    (tires-ok ?tr - truck)\n)\n  (:functions (time-to-walk ?l1 ?l2 - location)\n\t\t(time-to-drive ?l1 ?l2 - location)\n\t\t(driven)\n\t\t(walked))\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (driving ?driver ?truck))\n  :effect\n   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to) (tires-ok ?truck))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)\n\t\t(increase (driven) (time-to-drive ?loc-from ?loc-to))))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)\n\t(increase (walked) (time-to-walk ?loc-from ?loc-to))))\n\n(:action INFLATE-TIRES\n:parameters (?truck - truck)\n:precondition ()\n:effect (and (tires-ok ?truck)))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Nu10_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the tires-ok predicate and the INFLATE-TIRES action\n\nRemove any need or effect that involves tires-ok or sober\nRemove the INFLATRE-TIRES action\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :fluents) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n  (:functions (time-to-walk ?l1 ?l2 - location)\n\t\t(time-to-drive ?l1 ?l2 - location)\n\t\t(driven)\n\t\t(walked))\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (driving ?driver ?truck))\n  :effect\n   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)\n\t\t(increase (driven) (time-to-drive ?loc-from ?loc-to))))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)\n\t(increase (walked) (time-to-walk ?loc-from ?loc-to))))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Nu0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd walked and time-to-walk functions to track the total walked time\n\nThis requires to add 2 functions and modify 1 action\nfunctions: walked and time-to-walk from location to location\naction: WALK\n\nmodify the walk action to increase the walked function by time-to-walk\n\n(define (domain driverlog)\n  (:requirements :typing :fluents) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n  (:functions \n\t\t(time-to-drive ?l1 ?l2 - location)\n\t\t(driven))\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (driving ?driver ?truck))\n  :effect\n   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)\n\t\t(increase (driven) (time-to-drive ?loc-from ?loc-to))))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Nu1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd driven and time-to-drive functions to track the total driven time\n\nThis requires to add 2 functions and modify 1 action\nfunctions: driven and time-to-drive from location to location\naction: DRIVE-TRUCK\n\nmodify the DRIVE-TRUCK action to increase the driven function by time-to-drive\n\n(define (domain driverlog)\n  (:requirements :typing :fluents) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n  (:functions (time-to-walk ?l1 ?l2 - location)\n\t\t(walked))\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (driving ?driver ?truck))\n  :effect\n   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)\n\t(increase (walked) (time-to-walk ?loc-from ?loc-to))))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Nu2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd WALK action and walked and time-to-walk functions to track the total walked time\n\nThis requires to add 2 functions and add 1 action\nfunctions: walked and time-to-walk from location to location\naction: WALK\n\nactions:\nWALK:\nparameters: location, location, driver\nconditions: driver must be at the start location and there must be a path between the start location and the end location\neffect: driver is moved from the start location to the end location, the walked time is increased by the time-to-walk from start to end\n\n(define (domain driverlog)\n  (:requirements :typing :fluents) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n  (:functions \n\t\t(time-to-drive ?l1 ?l2 - location)\n\t\t(driven))\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (driving ?driver ?truck))\n  :effect\n   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)\n\t\t(increase (driven) (time-to-drive ?loc-from ?loc-to))))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Nu3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK action and DISEMBARK-TRUCK action which allows the driver to get in and out of truck and be in driving position\n\nThis requires adding 2 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK\n\nactions:\nBOARD-TRUCK:\nparameters: driver truck location\nconditions: truck and driver at the same location and the truck is empty\neffect: truck is no longer empty, the driver is no longer at location and the driver is driving\n\nDISEMBARK-TRUCK:\nparameters: driver truck location\nconditions: truck is at location and driver is driving the truck\neffect: driver is no longer driving the truck, the driver is at the location and the truck is empty\n\n(define (domain driverlog)\n  (:requirements :typing :fluents) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n  (:functions (time-to-walk ?l1 ?l2 - location)\n\t\t(time-to-drive ?l1 ?l2 - location)\n\t\t(driven)\n\t\t(walked))\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)\n\t\t(increase (driven) (time-to-drive ?loc-from ?loc-to))))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)\n\t(increase (walked) (time-to-walk ?loc-from ?loc-to))))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Nu4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK action and DISEMBARK-TRUCK action which allows the driver to get in truck and be in driving position\n\nThis requires adding 2 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK\n\nactions:\nBOARD-TRUCK:\nThe driver boards the truck\n\nDISEMBARK-TRUCK:\nthe driver gets out of the truck\n\ncontext: the empty predicate indicates if truck has a driver in it, the driving predicate indicates if a driver is in a driving position in a truck\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :fluents) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n  (:functions (time-to-walk ?l1 ?l2 - location)\n\t\t(time-to-drive ?l1 ?l2 - location)\n\t\t(driven)\n\t\t(walked))\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)\n\t(increase (walked) (time-to-walk ?loc-from ?loc-to))))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Nu5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK action, DISEMBARK-TRUCK action and DRIVE-TRUCK which allows the driver to get in and out of the truck and be in driving position as well as to drive from one location to another\n\nThis requires adding 3 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK, DRIVE-TRUCK\n\nactions:\nBOARD-TRUCK:\nparameters: driver truck location\nconditions: truck and driver at the same location and the truck is empty\neffect: truck is no longer empty, the driver is no longer at location and the driver is driving\n\nDISEMBARK-TRUCK:\nparameters: driver truck location\nconditions: truck is at location and driver is driving the truck\neffect: driver is no longer driving the truck, the driver is at the location and the truck is empty\n\nDRIVE-TRUCK:\nparameters: location, location, driver, truck\nconditions: driver must be driving the truck, the truck must be at the start location and there must be a link between the start location and the end location\neffect: truck is moved from the start location to the end location, the driven time is increased by the time-to-drive from start to end\n\n(define (domain driverlog)\n  (:requirements :typing :fluents) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n  (:functions (time-to-walk ?l1 ?l2 - location)\n\t\t(time-to-drive ?l1 ?l2 - location)\n\t\t(driven)\n\t\t(walked))\n\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)\n\t\t(increase (driven) (time-to-drive ?loc-from ?loc-to))))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)\n\t(increase (walked) (time-to-walk ?loc-from ?loc-to))))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Nu6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK and UNLOAD-TRUCK actions which allows the driver to get in and out of truck as well as load and unload object from truck\n\nThis requires adding 4 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK, UNLOAD-TRUCK\n\nactions:\nBOARD-TRUCK:\nparameters: driver truck location\nconditions: truck and driver at the same location and the truck is empty\neffect: truck is no longer empty, the driver is no longer at location and the driver is driving\n\nDISEMBARK-TRUCK:\nparameters: driver truck location\nconditions: truck is at location and driver is driving the truck\neffect: driver is no longer driving the truck, the driver is at the location and the truck is empty\n\nLOAD-TRUCK:\nparameters: obj, truck, location\nconditions: truck and obj are at the same place\neffect: obj is no longer at location, obj is in truck\n\nUNLOAD-TRUCK:\nparameters: obj, truck, location\nconditions: truck is at location and obj is in truck\neffect: obj is no longer in truck and is at location\n\n(define (domain driverlog)\n  (:requirements :typing :fluents) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n  (:functions (time-to-walk ?l1 ?l2 - location)\n\t\t(time-to-drive ?l1 ?l2 - location)\n\t\t(driven)\n\t\t(walked))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)\n\t(increase (walked) (time-to-walk ?loc-from ?loc-to))))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Nu7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK, UNLOAD-TRUCK adn DRIVE-TRUCK actions\nwhich allows the driver to get in and out of truck as well as load and unload object from truck and drive\n\nThis requires adding 5 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK, UNLOAD-TRUCK, DRIVE-TRUCK\n\nactions:\nBOARD-TRUCK:\nparameters: driver truck location\nconditions: truck and driver at the same location and the truck is empty\neffect: truck is no longer empty, the driver is no longer at location and the driver is driving\n\nDISEMBARK-TRUCK:\nparameters: driver truck location\nconditions: truck is at location and driver is driving the truck\neffect: driver is no longer driving the truck, the driver is at the location and the truck is empty\n\nLOAD-TRUCK:\nparameters: obj, truck, location\nconditions: truck and obj are at the same place\neffect: obj is no longer at location, obj is in truck\n\nUNLOAD-TRUCK:\nparameters: obj, truck, location\nconditions: truck is at location and obj is in truck\neffect: obj is no longer in truck and is at location\n\nDRIVE-TRUCK:\nparameters: driver, location, location, truck\nconditions: driving is driving truck, truck is at start location\neffect: truck is at end location and driven increases by time-to-drive from start location to end location\n\n(define (domain driverlog)\n  (:requirements :typing :fluents) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n  (:functions (time-to-walk ?l1 ?l2 - location)\n\t\t(time-to-drive ?l1 ?l2 - location)\n\t\t(driven)\n    (speed ?tr - truck)\n\t\t(walked))\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (driving ?driver ?truck))\n  :effect\n   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)\n\t\t(increase (driven) (/ (time-to-drive ?loc-from ?loc-to) (speed ?truck)))))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)\n\t(increase (walked) (time-to-walk ?loc-from ?loc-to))))\n\n(:action INCREASE-SPEED\n:parameters (?truck - truck ?driver - driver)\n:preconditions (and (driving ?driver ?truck) (<= (speed ?truck) 10))\n:effect (and (increase (speed ?truck) 1)))\n\n(:action DECREASE-SPEED\n:parameters (?truck - truck ?driver - driver)\n:preconditions (and (driving ?driver ?truck) (>= (speed ?truck) 1))\n:effect (and (decrease (speed ?truck) 1)))\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Nu8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the Following PDDL domain\nRemove INCREASE-SPEED and DECREASE-SPEED actions as well as the speed function\n\nThis requires removing 2 actions, 1 function and modifying 1 action\nfunction: speed\nactions: INCREASE-SPEED, DECREASE-SPEED, DRIVE-TRUCK\n\nRemove INCREASE-SPEED, DECREASE-SPEED\nmodify the driven tracking function to increase by time-to-drive directly instead\n\n(define (domain driverlog)\n  (:requirements :typing :fluents) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(link ?x ?y - location)\n    (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n  (:functions (time-to-walk ?l1 ?l2 - location)\n\t\t(time-to-drive ?l1 ?l2 - location)\n\t\t(driven)\n\t\t(walked))\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc))\n  :effect\n   (and (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)\n\t\t(increase (driven) (time-to-drive ?loc-from ?loc-to))))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)\n\t(increase (walked) (time-to-walk ?loc-from ?loc-to))))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Nu9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd the driving predicate that tracks driver driving a truck\n\nThis requires adding 1 predicate and modifying 3 actions\npredicate: driving indicates a driver driving a driving\nactions: DRIVE-TRUCK, BOARD-TRUCK, DISEMBARK-TRUCK\n\nDRIVE-TRUCK:\ndriver must be driving the truck\n\nBOARD-TRUCK:\nOnce boarded the driver is driving the truck\n\nDISEMBARK-TRUCK:\nThe driver is no longer driving truck once disembarked\n\n(define (domain driverlog)\n  (:requirements :typing :fluents) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) \n    (path ?x ?y - location)\n\t\t(empty ?v - truck)\n    (tires-ok ?tr - truck)\n)\n  (:functions (time-to-walk ?l1 ?l2 - location)\n\t\t(time-to-drive ?l1 ?l2 - location)\n\t\t(driven)\n\t\t(walked))\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (driving ?driver ?truck))\n  :effect\n   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to) (tires-ok ?truck))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)\n\t\t(increase (driven) (time-to-drive ?loc-from ?loc-to))))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)\n\t(increase (walked) (time-to-walk ?loc-from ?loc-to))))\n\n(:action INFLATE-TIRES\n:parameters (?truck - truck)\n:precondition ()\n:effect (and (tires-ok ?truck)))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Nu10", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the tires-ok predicate and the INFLATE-TIRES action\n\nThis requires removing 1 predicate, 1 actions and modifying 1 action\n\nRemove INFLATE-TIRES\nRemove the precondition to have tires-ok in DRIVE-TRUCK action\n\n(define (domain driverlog)\n  (:requirements :typing :fluents) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n  (:functions (time-to-walk ?l1 ?l2 - location)\n\t\t(time-to-drive ?l1 ?l2 - location)\n\t\t(driven)\n\t\t(walked))\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (driving ?driver ?truck))\n  :effect\n   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)\n\t\t(increase (driven) (time-to-drive ?loc-from ?loc-to))))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)\n\t(increase (walked) (time-to-walk ?loc-from ?loc-to))))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Nu11", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the path predicate that defines an existing path to walk between 2 locations\n\nThis requires modifying WALK action\n\nWALK:\npath must exist between locations to executre path action\n\n\n\n(define (domain driverlog)\n  (:requirements :typing :fluents) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) \n    (path ?x ?y - location)\n\t\t(empty ?v - truck)\n    (tires-ok ?tr - truck)\n    (sober ?dr - driver)\n)\n  (:functions (time-to-walk ?l1 ?l2 - location)\n\t\t(time-to-drive ?l1 ?l2 - location)\n\t\t(driven)\n\t\t(walked))\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (driving ?driver ?truck))\n  :effect\n   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to) (tires-ok ?truck) (sober ?-driver))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)\n\t\t(increase (driven) (time-to-drive ?loc-from ?loc-to))))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)\n\t(increase (walked) (time-to-walk ?loc-from ?loc-to)) (sober ?driver)))\n\n(:action INFLATE-TIRES\n:parameters (?truck - truck)\n:precondition ()\n:effect (and (tires-ok ?truck)))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Si0_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd WALK action\n\nThis requires to add 1 action\naction: WALK\n\nThe WALK action allows a driver to move from one location to another and takes 20 duration to finnish\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and\n        (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration 10)\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Si1_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK, DISEMBARK-TRUCK, DRIVE-TRUCK actions which allows the driver to get in truck and be in driving position and to to drive truck from one location to another\n\nThis requires adding 3 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK, DRIVE-TRUCK\n\nactions:\nBOARD-TRUCK:\nThe driver boards the truck\n\nDISEMBARK-TRUCK:\nthe driver gets out of the truck\n\nDRIVE-TRUCK:\nThe DRIVE-TRUCK action allows a truck to move from one location to another if the driver is driving the truck\n\ncontext: the empty predicate indicates if truck has a driver in it, the driving predicate indicates if a driver is in a driving position in a truck\nthe DRIVE-TRUCK action takes 10 duration and the Board and disembark actions take 1 duration\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration 10)\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration 20)\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Si2_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK and UNLOAD-TRUCK actions which allows the driver to get in and out of truck as well as load and unload object from truck\n\nThis requires adding 4 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK, UNLOAD-TRUCK\n\nactions:\nBOARD-TRUCK:\nThe driver boards the truck\n\nDISEMBARK-TRUCK:\nthe driver gets out of the truck\n\nLOAD-TRUCK:\nMoves an obj into the truck\n\nUNLOAD-TRUCK\nMoves an obj out of the truck\n\ncontext: the empty predicate indicates if truck has a driver in it, the driving predicate indicates if a driver is in a driving position in a truck, \nthe in predicate represents if an obj is in a truck \nBoarding and disembarking each take 1 duration and Load unload each take a duration of 2 \n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and\n        (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration 20)\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Si3_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK, UNLOAD-TRUCK and DRIVE-TRUCK actions \nwhich allows the driver to get in and out of truck as well as load and unload object from truck and drive the truck\n\nThis requires adding 4 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK, UNLOAD-TRUCK, DRIVE-TRUCK\n\nactions:\nBOARD-TRUCK:\nThe driver boards the truck\n\nDISEMBARK-TRUCK:\nthe driver gets out of the truck\n\nLOAD-TRUCK:\nMoves an obj into the truck\n\nUNLOAD-TRUCK:\nMoves an obj out of the truck\n\nDRIVE-TRUCK:\nDrives truck from one location to another\n\ncontext: the empty predicate indicates if truck has a driver in it, the driving predicate indicates if a driver is in a driving position in a truck, \nthe in predicate represents if an obj is in a truck \nThe board and disembark actions each take 1 duration, the load and unload actions each take 2 duration, driving takes 10\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration 10)\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration 20)\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Si4_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the Following PDDL domain\nadd the durative actions to the requirements, and modify all the actions to be durative actions\n\nThe duration of loading and unloading is 2, boarding and disembarking is 1, driving is 10 and walking is 20 \n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration 20)\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Si5_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the Following PDDL domain\nchange all the duration of the following actions to the following\n\nThe following actions have the following durations\nLOAD-TRUCK: 2\nUNLOAD-TRUCK: 2\nBOARD-TRUCK: 1\nDISEMBARK-TRUCK: 1\nDRIVE-TRUCK: 10\nWALK: 20\n\n\n(define (domain driverlog)\n  (:requirements :typing)\n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) \n\t\t(path ?x ?y - location)\n\t\t(empty ?v - truck)\n  )\n\n  (:action LOAD-TRUCK\n    :parameters (?obj - obj ?truck - truck ?loc - location)\n    :precondition (and (at ?truck ?loc) (at ?obj ?loc))\n    :effect (and (not (at ?obj ?loc)) (in ?obj ?truck))\n  )\n\n  (:action UNLOAD-TRUCK\n    :parameters (?obj - obj ?truck - truck ?loc - location)\n    :precondition (and (at ?truck ?loc) (in ?obj ?truck))\n    :effect (and (not (in ?obj ?truck)) (at ?obj ?loc))\n  )\n\n  (:action BOARD-TRUCK\n    :parameters (?driver - driver ?truck - truck ?loc - location)\n    :precondition (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n    :effect (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck)))\n  )\n\n  (:action DISEMBARK-TRUCK\n    :parameters (?driver - driver ?truck - truck ?loc - location)\n    :precondition (and (at ?truck ?loc) (driving ?driver ?truck))\n    :effect (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck))\n  )\n\n  (:action DRIVE-TRUCK\n    :parameters (?truck - truck ?loc-from - location ?loc-to - location ?driver - driver)\n    :precondition (and (at ?truck ?loc-from) (driving ?driver ?truck) (link ?loc-from ?loc-to))\n    :effect (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to))\n  )\n\n  (:action WALK\n    :parameters (?driver - driver ?loc-from - location ?loc-to - location)\n    :precondition (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n    :effect (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to))\n  )\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Si6_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the Following PDDL domain\nchange all the duration times of all actions to the following\n\nThe following actions have the following durations\nLOAD-TRUCK: 2\nUNLOAD-TRUCK: 2\nBOARD-TRUCK: 1\nDISEMBARK-TRUCK: 1\nDRIVE-TRUCK: 10\nWALK: 20\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and\n        (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration 1)\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Si7_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd the driving predicate that tracks driver driving a truck and the path predicate that states if there is a walkable path between 2 locations\n\nAdd these predicate to actions that would make sense to have it either in their preconditions or effects\n\ncontext: the driving predicate indicates if a driver is in a driving position in a truck\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 5)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 5)\n  :condition\n   (and\n        (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 3)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 3)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration 20)\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration 30)\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Si8_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the path predicate that defines an existing path to walk between 2 locations\n\nThis requires adding 1 predicate and modifying 1 action\npredicate: path from one location to another\n\nWALK:\nIn order to walk from location to another a path between the 2 locations must exist\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(link ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and\n        (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n   (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)))\n  :effect\n   (and \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration 10)\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration 20)\n  :condition\n   (and (at start (at ?driver ?loc-from)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Si9_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the sober predicate\n\nRemove any need or effect that involves sober\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and\n        (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration 10)\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration 20)\n  :condition\n   (and (at start (at ?driver ?loc-from)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Si10_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the tires-ok predicate and the INFLATE-TIRES action\n\nRemove any need or effect that involves tires-ok\nRemove INFLATE-TIRES action\n\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n    (sober ?dr - driver)\n)\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and\n        (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration 10)\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)) (over all (sober ?driver)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration 20)\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to)) (at end (sober ?driver))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Si0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd WALK action\n\nThis requires to add 1 action\naction: WALK\n\nactions:\nWALK:\nparameters: location, location, driver\nduration: 20\nconditions: driver must be at the start location and there must be a path between the start location and the end location\neffect: driver is moved from the start location to the end location\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and\n        (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration 10)\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Si1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK action and DISEMBARK-TRUCK action which allows the driver to get in and out of truck and be in driving position\n\nThis requires adding 2 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK\n\nactions:\nBOARD-TRUCK:\nparameters: driver truck location\nduration: 1\nconditions: truck and driver at the same location and the truck is empty\neffect: truck is no longer empty, the driver is no longer at location and the driver is driving\n\nDISEMBARK-TRUCK:\nparameters: driver truck location\nduration: 1\nconditions: truck is at location and driver is driving the truck\neffect: driver is no longer driving the truck, the driver is at the location and the truck is empty\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration 10)\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration 20)\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Si2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK action and DISEMBARK-TRUCK action which allows the driver to get in truck and be in driving position\n\nThis requires adding 2 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK\n\nactions:\nBOARD-TRUCK:\nThe driver boards the truck\n\nDISEMBARK-TRUCK:\nthe driver gets out of the truck\n\ncontext: the empty predicate indicates if truck has a driver in it, the driving predicate indicates if a driver is in a driving position in a truck \nthe duration of both actions is 1\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and\n        (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration 20)\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Si3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK action, DISEMBARK-TRUCK action and DRIVE-TRUCK which allows the driver to get in and out of the truck and be in driving position as well as to drive from one location to another\n\nThis requires adding 3 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK, DRIVE-TRUCK\n\nactions:\nBOARD-TRUCK:\nparameters: driver truck location\nduration: 1\nconditions: truck and driver at the same location and the truck is empty\neffect: truck is no longer empty, the driver is no longer at location and the driver is driving\n\nDISEMBARK-TRUCK:\nparameters: driver truck location\nduration: 1\nconditions: truck is at location and driver is driving the truck\neffect: driver is no longer driving the truck, the driver is at the location and the truck is empty\n\nDRIVE-TRUCK:\nparameters: location, location, driver, truck\nduration: 10\nconditions: driver must be driving the truck, the truck must be at the start location and there must be a link between the start location and the end location\neffect: truck is moved from the start location to the end location\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration 10)\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration 20)\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Si4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK and UNLOAD-TRUCK actions which allows the driver to get in and out of truck as well as load and unload object from truck\n\nThis requires adding 4 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK, UNLOAD-TRUCK\n\nactions:\nBOARD-TRUCK:\nparameters: driver truck location\nduration: 1\nconditions: truck and driver at the same location and the truck is empty\neffect: truck is no longer empty, the driver is no longer at location and the driver is driving\n\nDISEMBARK-TRUCK:\nparameters: driver truck location\nduration: 1\nconditions: truck is at location and driver is driving the truck\neffect: driver is no longer driving the truck, the driver is at the location and the truck is empty\n\nLOAD-TRUCK:\nparameters: obj, truck, location\nduration: 2\nconditions: truck and obj are at the same place\neffect: obj is no longer at location, obj is in truck\n\nUNLOAD-TRUCK:\nparameters: obj, truck, location\nduration: 2\nconditions: truck is at location and obj is in truck\neffect: obj is no longer in truck and is at location\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration 20)\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Si5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK, UNLOAD-TRUCK adn DRIVE-TRUCK actions\nwhich allows the driver to get in and out of truck as well as load and unload object from truck and drive\n\nThis requires adding 5 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK, UNLOAD-TRUCK, DRIVE-TRUCK\n\nactions:\nBOARD-TRUCK:\nparameters: driver truck location\nduration: 1\nconditions: truck and driver at the same location and the truck is empty\neffect: truck is no longer empty, the driver is no longer at location and the driver is driving\n\nDISEMBARK-TRUCK:\nparameters: driver truck location\nduration: 1\nconditions: truck is at location and driver is driving the truck\neffect: driver is no longer driving the truck, the driver is at the location and the truck is empty\n\nLOAD-TRUCK:\nparameters: obj, truck, location\nduration: 2\nconditions: truck and obj are at the same place\neffect: obj is no longer at location, obj is in truck\n\nUNLOAD-TRUCK:\nparameters: obj, truck, location\nduration: 2\nconditions: truck is at location and obj is in truck\neffect: obj is no longer in truck and is at location\n\nDRIVE-TRUCK:\nparameters: driver, location, location, truck\nduration: 10\nconditions: driving is driving truck, truck is at start location\neffect: truck is at end location\n\n(define (domain driverlog)\n  (:requirements :typing)\n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) \n\t\t(path ?x ?y - location)\n\t\t(empty ?v - truck)\n  )\n\n  (:action LOAD-TRUCK\n    :parameters (?obj - obj ?truck - truck ?loc - location)\n    :precondition (and (at ?truck ?loc) (at ?obj ?loc))\n    :effect (and (not (at ?obj ?loc)) (in ?obj ?truck))\n  )\n\n  (:action UNLOAD-TRUCK\n    :parameters (?obj - obj ?truck - truck ?loc - location)\n    :precondition (and (at ?truck ?loc) (in ?obj ?truck))\n    :effect (and (not (in ?obj ?truck)) (at ?obj ?loc))\n  )\n\n  (:action BOARD-TRUCK\n    :parameters (?driver - driver ?truck - truck ?loc - location)\n    :precondition (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n    :effect (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck)))\n  )\n\n  (:action DISEMBARK-TRUCK\n    :parameters (?driver - driver ?truck - truck ?loc - location)\n    :precondition (and (at ?truck ?loc) (driving ?driver ?truck))\n    :effect (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck))\n  )\n\n  (:action DRIVE-TRUCK\n    :parameters (?truck - truck ?loc-from - location ?loc-to - location ?driver - driver)\n    :precondition (and (at ?truck ?loc-from) (driving ?driver ?truck) (link ?loc-from ?loc-to))\n    :effect (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to))\n  )\n\n  (:action WALK\n    :parameters (?driver - driver ?loc-from - location ?loc-to - location)\n    :precondition (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n    :effect (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to))\n  )\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Si6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the Following PDDL domain\nadd the durative actions requirement and modify all actions to be durative actions\n\nThe following actions have the following durations\nLOAD-TRUCK: 2\nUNLOAD-TRUCK: 2\nBOARD-TRUCK: 1\nDISEMBARK-TRUCK: 1\nDRIVE-TRUCK: 10\nWALK: 20\n\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and\n        (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration 1)\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Si7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the Following PDDL domain\nchange all the duration times of all actions to the following\n\nThe following actions have the following durations\nLOAD-TRUCK: 2\nUNLOAD-TRUCK: 2\nBOARD-TRUCK: 1\nDISEMBARK-TRUCK: 1\nDRIVE-TRUCK: 10\nWALK: 20\n\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 5)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 5)\n  :condition\n   (and\n        (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 3)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 3)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration 20)\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration 30)\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Si8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the Following PDDL domain\nchange all the duration times of all actions to the following\n\nThe following actions have the following durations\nLOAD-TRUCK: 2\nUNLOAD-TRUCK: 2\nBOARD-TRUCK: 1\nDISEMBARK-TRUCK: 1\nDRIVE-TRUCK: 10\nWALK: 20\n\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(link ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and\n        (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n   (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)))\n  :effect\n   (and \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration 10)\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration 20)\n  :condition\n   (and (at start (at ?driver ?loc-from)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Si9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd the driving predicate that tracks driver driving a truck and the path predicate that establishes if there is a valid walkable path between 2 locations \n\nThis requires adding 2 predicate and modifying 3 actions\npredicate: driving indicates a driver driving a driving, path valid path between one location and another\nactions: DRIVE-TRUCK, BOARD-TRUCK, DISEMBARK-TRUCK, WALK\n\nDRIVE-TRUCK:\ndriver must be driving the truck\n\nBOARD-TRUCK:\nOnce boarded the driver is driving the truck\n\nDISEMBARK-TRUCK:\nThe driver is no longer driving truck once disembarked\n\nWALK:\nthe path between both locations must exist\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and\n        (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration 10)\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration 20)\n  :condition\n   (and (at start (at ?driver ?loc-from)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Si10", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the path predicate that defines an existing path to walk between 2 locations\n\nThis requires modifying WALK action\n\nWALK:\npath must exist between locations to executre path action\n\n\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n    (sober ?dr - driver)\n)\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and\n        (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration 10)\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)) (over all (sober ?driver)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration 20)\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to)) (at end (sober ?driver))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Si11", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove sober predicate\n\nThis requires removing 1 predicate, modifying 2 action\n\nRemove the precondition to be sober in DRIVE-TRUCK action\nRemoves the effect to become sober when doing WALK action\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions) \n  (:types           location locatable - object\n\t\tdriver truck obj - locatable)\n\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n    (tires-ok ?tr - truck)\n)\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and\n        (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and \n   (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration 10)\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration 20)\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n\n (:durative-action INFLATE-tires\n :parameters (?truck - truck ?driver - driver ?loc - location)\n :duration (= ?duration 5)\n :condition (and (at start (at ?driver ?loc) (at start (at ?truck ?loc))))\n :effect (and (at end (tires-ok ?truck)))\n)\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_St0_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd WALK action\n\nThis requires to add 1 action\naction: WALK\n\nThe WALK action allows a driver to move from one location to another\n\n(define (domain driverlog)\n  (:requirements :typing) \n  (:types         location locatable - object\n\t\tdriver truck obj - locatable\n  \n  )\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (driving ?driver ?truck))\n  :effect\n   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_St1_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK, DISEMBARK-TRUCK, DRIVE-TRUCK actions which allows the driver to get in truck and be in driving position and to to drive truck from one location to another\n\nThis requires adding 3 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK, DRIVE-TRUCK\n\nactions:\nBOARD-TRUCK:\nThe driver boards the truck\n\nDISEMBARK-TRUCK:\nthe driver gets out of the truck\n\nDRIVE-TRUCK:\nThe DRIVE-TRUCK action allows a truck to move from one location to another if the driver is driving the truck\n\ncontext: the empty predicate indicates if truck has a driver in it, the driving predicate indicates if a driver is in a driving position in a truck\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing) \n  (:types         location locatable - object\n\t\tdriver truck obj - locatable\n  \n  )\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (driving ?driver ?truck))\n  :effect\n   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_St2_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK and UNLOAD-TRUCK actions which allows the driver to get in and out of truck as well as load and unload object from truck\n\nThis requires adding 4 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK, UNLOAD-TRUCK\n\nactions:\nBOARD-TRUCK:\nThe driver boards the truck\n\nDISEMBARK-TRUCK:\nthe driver gets out of the truck\n\nLOAD-TRUCK:\nMoves an obj into the truck\n\nUNLOAD-TRUCK\nMoves an obj out of the truck\n\ncontext: the empty predicate indicates if truck has a driver in it, the driving predicate indicates if a driver is in a driving position in a truck, \nthe in predicate represents if an obj is in a truck \n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing) \n  (:types         location locatable - object\n\t\tdriver truck obj - locatable\n  \n  )\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_St3_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK, UNLOAD-TRUCK and DRIVE-TRUCK actions \nwhich allows the driver to get in and out of truck as well as load and unload object from truck and drive the truck\n\nThis requires adding 4 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK, UNLOAD-TRUCK, DRIVE-TRUCK\n\nactions:\nBOARD-TRUCK:\nThe driver boards the truck\n\nDISEMBARK-TRUCK:\nthe driver gets out of the truck\n\nLOAD-TRUCK:\nMoves an obj into the truck\n\nUNLOAD-TRUCK:\nMoves an obj out of the truck\n\nDRIVE-TRUCK:\nDrives truck from one location to another\n\ncontext: the empty predicate indicates if truck has a driver in it, the driving predicate indicates if a driver is in a driving position in a truck, \nthe in predicate represents if an obj is in a truck \n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing) \n  (:types         location locatable - object\n\t\tdriver truck obj - locatable\n  \n  )\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_St4_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd the driving predicate that tracks driver driving a truck and the path predicate that states if there is a walkable path between 2 locations\n\nAdd these predicate to actions that would make sense to have it either in their preconditions or effects\n\ncontext: the driving predicate indicates if a driver is in a driving position in a truck\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing) \n  (:types         location locatable - object\n\t\tdriver truck obj - locatable\n  \n  )\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_St5_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the path predicate that defines an existing path to walk between 2 locations\n\nThis requires adding 1 predicate and modifying 1 action\npredicate: path from one location to another\n\nWALK:\nIn order to walk from location to another a path between the 2 locations must exist\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing) \n  (:types         location locatable - object\n\t\tdriver truck obj - locatable\n  \n  )\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc))\n  :effect\n   (and (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_St6_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the sober predicate\n\nRemove any need or effect that involves sober\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing) \n  (:types         location locatable - object\n\t\tdriver truck obj - locatable\n  \n  )\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (driving ?driver ?truck))\n  :effect\n   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_St7_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the tires-ok predicate and the INFLATE-TIRES action\n\nRemove any need or effect that involves tires-ok\nRemove INFLATE-TIRES action\n\n\n(define (domain driverlog)\n  (:requirements :typing) \n  (:types         location locatable - object\n\t\tdriver truck obj - locatable\n  \n  )\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n    (sober ?dr - driver)\n)\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (driving ?driver ?truck))\n  :effect\n   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to) (sober ?driver))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to) (sober ?driver)))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_St0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd WALK action\n\nThis requires to add 1 action\naction: WALK\n\nactions:\nWALK:\nparameters: location, location, driver\nconditions: driver must be at the start location and there must be a path between the start location and the end location\neffect: driver is moved from the start location to the end location\n\n(define (domain driverlog)\n  (:requirements :typing) \n  (:types         location locatable - object\n\t\tdriver truck obj - locatable\n  \n  )\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (driving ?driver ?truck))\n  :effect\n   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_St1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd LOAD-TRUCK action and UNLOAD-TRUCK action which allows to load and unload obj from truck\n\nThis requires adding 2 actions\nactions: LOAD-TRUCK, UNLOAD-TRUCK\n\nactions:\nLOAD-TRUCK:\nparameters: obj, truck, location\nconditions: truck and obj are at the same place\neffect: obj is no longer at location, obj is in truck\n\nUNLOAD-TRUCK:\nparameters: obj, truck, location\nconditions: truck is at location and obj is in truck\neffect: obj is no longer in truck and is at location\n\n(define (domain driverlog)\n  (:requirements :typing) \n  (:types         location locatable - object\n\t\tdriver truck obj - locatable\n  \n  )\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (driving ?driver ?truck))\n  :effect\n   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_St2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd UNLOAD-TRUCK action and UNLOAD-TRUCK action which allows the obj to be loaded and unloaded from truck\n\nThis requires adding 2 actions\nactions: LOAD-TRUCK, UNLOAD-TRUCK\n\nactions:\nLOAD-TRUCK:\nMoves an obj into the truck\n\nUNLOAD-TRUCK\nMoves an obj out of the truck\n\ncontext: the in predicate represents if an obj is in a truck\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing) \n  (:types         location locatable - object\n\t\tdriver truck obj - locatable\n  \n  )\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_St3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK action, DISEMBARK-TRUCK action and DRIVE-TRUCK which allows the driver to get in and out of the truck and be in driving position as well as to drive from one location to another\n\nThis requires adding 3 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK, DRIVE-TRUCK\n\nactions:\nBOARD-TRUCK:\nparameters: driver truck location\nconditions: truck and driver at the same location and the truck is empty\neffect: truck is no longer empty, the driver is no longer at location and the driver is driving\n\nDISEMBARK-TRUCK:\nparameters: driver truck location\nconditions: truck is at location and driver is driving the truck\neffect: driver is no longer driving the truck, the driver is at the location and the truck is empty\n\nDRIVE-TRUCK:\nparameters: location, location, driver, truck\nconditions: driver must be driving the truck, the truck must be at the start location and there must be a link between the start location and the end location\neffect: truck is moved from the start location to the end location\n\n(define (domain driverlog)\n  (:requirements :typing) \n  (:types         location locatable - object\n\t\tdriver truck obj - locatable\n  \n  )\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_St4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK and UNLOAD-TRUCK actions which allows the driver to get in and out of truck as well as load and unload object from truck\n\nThis requires adding 4 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK, UNLOAD-TRUCK\n\nactions:\nBOARD-TRUCK:\nparameters: driver truck location\nconditions: truck and driver at the same location and the truck is empty\neffect: truck is no longer empty, the driver is no longer at location and the driver is driving\n\nDISEMBARK-TRUCK:\nparameters: driver truck location\nconditions: truck is at location and driver is driving the truck\neffect: driver is no longer driving the truck, the driver is at the location and the truck is empty\n\nLOAD-TRUCK:\nparameters: obj, truck, location\nconditions: truck and obj are at the same place\neffect: obj is no longer at location, obj is in truck\n\nUNLOAD-TRUCK:\nparameters: obj, truck, location\nconditions: truck is at location and obj is in truck\neffect: obj is no longer in truck and is at location\n\n(define (domain driverlog)\n  (:requirements :typing) \n  (:types         location locatable - object\n\t\tdriver truck obj - locatable\n  \n  )\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_St5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK, UNLOAD-TRUCK adn DRIVE-TRUCK actions\nwhich allows the driver to get in and out of truck as well as load and unload object from truck and drive\n\nThis requires adding 5 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK, UNLOAD-TRUCK, DRIVE-TRUCK\n\nactions:\nBOARD-TRUCK:\nparameters: driver truck location\nconditions: truck and driver at the same location and the truck is empty\neffect: truck is no longer empty, the driver is no longer at location and the driver is driving\n\nDISEMBARK-TRUCK:\nparameters: driver truck location\nconditions: truck is at location and driver is driving the truck\neffect: driver is no longer driving the truck, the driver is at the location and the truck is empty\n\nLOAD-TRUCK:\nparameters: obj, truck, location\nconditions: truck and obj are at the same place\neffect: obj is no longer at location, obj is in truck\n\nUNLOAD-TRUCK:\nparameters: obj, truck, location\nconditions: truck is at location and obj is in truck\neffect: obj is no longer in truck and is at location\n\nDRIVE-TRUCK:\nparameters: driver, location, location, truck\nconditions: driving is driving truck, truck is at start location\neffect: truck is at end location\n\n(define (domain driverlog)\n  (:requirements :typing) \n  (:types         location locatable - object\n\t\tdriver truck obj - locatable\n  \n  )\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc))\n  :effect\n   (and (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_St6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd the driving predicate that tracks driver driving a truck and the path predicate that establishes if there is a valid walkable path between 2 locations \n\nThis requires adding 2 predicate and modifying 3 actions\npredicate: driving indicates a driver driving a driving, path valid path between one location and another\nactions: DRIVE-TRUCK, BOARD-TRUCK, DISEMBARK-TRUCK, WALK\n\nDRIVE-TRUCK:\ndriver must be driving the truck\n\nBOARD-TRUCK:\nOnce boarded the driver is driving the truck\n\nDISEMBARK-TRUCK:\nThe driver is no longer driving truck once disembarked\n\nWALK:\nthe path between both locations must exist\n\n(define (domain driverlog)\n  (:requirements :typing) \n  (:types         location locatable - object\n\t\tdriver truck obj - locatable\n  \n  )\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (driving ?driver ?truck))\n  :effect\n   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_St7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the path predicate that defines an existing path to walk between 2 locations\n\nThis requires modifying WALK action\n\nWALK:\npath must exist between locations to executre path action\n\n\n\n(define (domain driverlog)\n  (:requirements :typing) \n  (:types         location locatable - object\n\t\tdriver truck obj - locatable\n  \n  )\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n    (sober ?dr - driver)\n)\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (driving ?driver ?truck))\n  :effect\n   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to) (sober ?driver))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to) (sober ?driver)))\n\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_St8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove sober predicate\n\nThis requires removing 1 predicate, modifying 2 action\n\nRemove the precondition to be sober in DRIVE-TRUCK action\nRemoves the effect to become sober when doing WALK action\n\n(define (domain driverlog)\n  (:requirements :typing) \n  (:types         location locatable - object\n\t\tdriver truck obj - locatable\n  \n  )\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n    (tires-ok ?tr - truck)\n)\n\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n  :effect\n   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))\n\n(:action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :precondition\n   (and (at ?truck ?loc) (driving ?driver ?truck))\n  :effect\n   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :precondition\n   (and (at ?truck ?loc-from)\n   (driving ?driver ?truck) (link ?loc-from ?loc-to) (tires-ok ?truck))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :precondition\n   (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n  :effect\n   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))\n\n(:action INFLATE\n:parameters(?driver - driver ?truck - truck ?loc - location)\n:precondition(and (at ?driver ?loc) (at ?driver ?loc))\n:effect(and (tires-ok ?truck))\n)\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti0_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd WALK action\n\nThis requires to add 1 action\naction: WALK\n\nThe WALK action allows a driver to move from one location to another and takes time-to-walk as duration\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:functions (time-to-walk ?loc ?loc1 - location)\n\t    (time-to-drive ?loc ?loc1 - location))\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj \n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration (time-to-drive ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti1_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK, DISEMBARK-TRUCK, DRIVE-TRUCK actions which allows the driver to get in truck and be in driving position and to to drive truck from one location to another\n\nThis requires adding 3 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK, DRIVE-TRUCK\n\nactions:\nBOARD-TRUCK:\nThe driver boards the truck\n\nDISEMBARK-TRUCK:\nthe driver gets out of the truck\n\nDRIVE-TRUCK:\nThe DRIVE-TRUCK action allows a truck to move from one location to another if the driver is driving the truck\n\ncontext: the empty predicate indicates if truck has a driver in it, the driving predicate indicates if a driver is in a driving position in a truck\nthe DRIVE-TRUCK action takes time-to-drive duration and the Board and disembark actions take 1 duration\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:functions (time-to-walk ?loc ?loc1 - location)\n\t    (time-to-drive ?loc ?loc1 - location))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration (time-to-drive ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration (time-to-walk ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti2_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK and UNLOAD-TRUCK actions which allows the driver to get in and out of truck as well as load and unload object from truck\n\nThis requires adding 4 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK, UNLOAD-TRUCK\n\nactions:\nBOARD-TRUCK:\nThe driver boards the truck\n\nDISEMBARK-TRUCK:\nthe driver gets out of the truck\n\nLOAD-TRUCK:\nMoves an obj into the truck\n\nUNLOAD-TRUCK\nMoves an obj out of the truck\n\ncontext: the empty predicate indicates if truck has a driver in it, the driving predicate indicates if a driver is in a driving position in a truck, \nthe in predicate represents if an obj is in a truck \nBoarding and disembarking each take 1 duration and Load unload each take a duration of 2 \n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:functions (time-to-walk ?loc ?loc1 - location)\n\t    (time-to-drive ?loc ?loc1 - location))\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj \n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration (time-to-walk ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti3_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK, UNLOAD-TRUCK and DRIVE-TRUCK actions \nwhich allows the driver to get in and out of truck as well as load and unload object from truck and drive the truck\n\nThis requires adding 4 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK, UNLOAD-TRUCK, DRIVE-TRUCK\n\nactions:\nBOARD-TRUCK:\nThe driver boards the truck\n\nDISEMBARK-TRUCK:\nthe driver gets out of the truck\n\nLOAD-TRUCK:\nMoves an obj into the truck\n\nUNLOAD-TRUCK:\nMoves an obj out of the truck\n\nDRIVE-TRUCK:\nDrives truck from one location to another\n\ncontext: the empty predicate indicates if truck has a driver in it, the driving predicate indicates if a driver is in a driving position in a truck, \nthe in predicate represents if an obj is in a truck \nThe board and disembark actions each take 1 duration, the load and unload actions each take 2 duration, driving takes time-to-drive\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:functions (time-to-walk ?loc ?loc1 - location)\n\t    (time-to-drive ?loc ?loc1 - location))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration (time-to-drive ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration (time-to-walk ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti4_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the Following PDDL domain\nAdd time-to-walk function that represents the duration to walk between one location and another\n\nchange duration of walk to time-to-walk\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:functions (time-to-walk ?loc ?loc1 - location)\n\t    (time-to-drive ?loc ?loc1 - location))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration (time-to-walk ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti5_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the Following PDDL domain\nAdd time-to-drive function that represents the duration to drive between one location and another\n\nchange duration of DRIVE-TRUCK to time-to-drive\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:functions\n\t    (time-to-drive ?loc ?loc1 - location))\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj \n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration (time-to-drive ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration 10)\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti6_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the Following PDDL domain\nremove the speed concept \n\nRemove any action directly linked to speed as well as any impact of speed on DRIVE-TRUCK function by setting the duration to time-to-drive alone.\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:functions (time-to-walk ?loc ?loc1 - location))\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj \n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration 5)\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration (time-to-walk ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti7_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the Following PDDL domain\nadd the durative actions to the requirements, and modify all the actions to be durative actions\n\nThe duration of loading and unloading is 2, boarding and disembarking is 1, driving is time-to-drive and walking is time-to-walk \n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:functions (time-to-walk ?loc ?loc1 - location)\n\t    (time-to-drive ?loc ?loc1 - location)\n      (speed ?tr - truck))\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj \n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration (/ (time-to-drive ?loc-from ?loc-to) (speed ?truck)))\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration (time-to-walk ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n\n(:durative-action INCREASE-SPEED\n:parameters(?driver - driver ?truck - truck)\n:duration (= ?duration 1)\n:condition (and (at start (driving ?driver ?truck)) (at start (<= (speed ?truck) 10)))\n:effect (and (at end (increase (speed ?truck) 1))))\n\n(:durative-action DECREASE-SPEED\n:parameters(?driver - driver ?truck - truck)\n:duration (= ?duration 1)\n:condition (and (at start (driving ?driver ?truck)) (at start (>= (speed ?truck) 1)))\n:effect (and (at end (decrease (speed ?truck) 1))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti8_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the Following PDDL domain\nchange all the duration of the following actions to the following\n\nThe following actions have the following durations\nLOAD-TRUCK: 2\nUNLOAD-TRUCK: 2\nBOARD-TRUCK: 1\nDISEMBARK-TRUCK: 1\nDRIVE-TRUCK: time-to-drive\nWALK: time-to-drive\n\n\n(define (domain driverlog)\n  (:requirements :typing :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) \n\t\t(path ?x ?y - location)\n\t\t(empty ?v - truck)\n  )\n\n  (:functions (time-to-walk ?loc ?loc1 - location)\n\t    (time-to-drive ?loc ?loc1 - location))\n\n  (:action LOAD-TRUCK\n    :parameters (?obj - obj ?truck - truck ?loc - location)\n    :precondition (and (at ?truck ?loc) (at ?obj ?loc))\n    :effect (and (not (at ?obj ?loc)) (in ?obj ?truck))\n  )\n\n  (:action UNLOAD-TRUCK\n    :parameters (?obj - obj ?truck - truck ?loc - location)\n    :precondition (and (at ?truck ?loc) (in ?obj ?truck))\n    :effect (and (not (in ?obj ?truck)) (at ?obj ?loc))\n  )\n\n  (:action BOARD-TRUCK\n    :parameters (?driver - driver ?truck - truck ?loc - location)\n    :precondition (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n    :effect (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck)))\n  )\n\n  (:action DISEMBARK-TRUCK\n    :parameters (?driver - driver ?truck - truck ?loc - location)\n    :precondition (and (at ?truck ?loc) (driving ?driver ?truck))\n    :effect (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck))\n  )\n\n  (:action DRIVE-TRUCK\n    :parameters (?truck - truck ?loc-from - location ?loc-to - location ?driver - driver)\n    :precondition (and (at ?truck ?loc-from) (driving ?driver ?truck) (link ?loc-from ?loc-to))\n    :effect (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to))\n  )\n\n  (:action WALK\n    :parameters (?driver - driver ?loc-from - location ?loc-to - location)\n    :precondition (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n    :effect (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to))\n  )\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti9_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the Following PDDL domain\nchange all the duration times of all actions to the following\n\nThe following actions have the following durations\nLOAD-TRUCK: 2\nUNLOAD-TRUCK: 2\nBOARD-TRUCK: 1\nDISEMBARK-TRUCK: 1\nDRIVE-TRUCK: time-to-drive\nWALK: time-to-walk\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:functions (time-to-walk ?loc ?loc1 - location)\n\t    (time-to-drive ?loc ?loc1 - location))\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj \n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration 1)\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti10_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd the driving predicate that tracks driver driving a truck and the path predicate that states if there is a walkable path between 2 locations\n\nAdd these predicate to actions that would make sense to have it either in their preconditions or effects\n\ncontext: the driving predicate indicates if a driver is in a driving position in a truck\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:functions (time-to-walk ?loc ?loc1 - location)\n\t    (time-to-drive ?loc ?loc1 - location))\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 5)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj \n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 5)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 3)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 3)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration 20)\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration 30)\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti11_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the path predicate that defines an existing path to walk between 2 locations\n\nThis requires adding 1 predicate and modifying 1 action\npredicate: path from one location to another\n\nWALK:\nIn order to walk from location to another a path between the 2 locations must exist\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:functions (time-to-walk ?loc ?loc1 - location)\n\t    (time-to-drive ?loc ?loc1 - location))\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj \n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and  \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration (time-to-drive ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?truck ?loc-from))\n    (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration (time-to-walk ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti12_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the tires-ok predicate and the INFLATE-TIRES action\n\nRemove any need or effect that involves tires-ok\nRemove INFLATE-TIRES action\n\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:functions (time-to-walk ?loc ?loc1 - location)\n\t    (time-to-drive ?loc ?loc1 - location))\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj \n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration (time-to-drive ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration (time-to-walk ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?driver ?loc-from)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti13_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the sober predicate\n\nRemove any need or effect that involves sober\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n    (tires-ok ?tr - truck)\n)\n\n\n(:functions (time-to-walk ?loc ?loc1 - location)\n\t    (time-to-drive ?loc ?loc1 - location))\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj \n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration (time-to-drive ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)) (over all (tires-ok ?truck)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration (time-to-walk ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n\n (:durative-action INFLATE-tires\n :parameters (?truck - truck ?driver - driver ?loc - location)\n :duration (= ?duration 5)\n :condition (and (at start (at ?driver ?loc) (at start (at ?truck ?loc))))\n :effect (and (at end (tires-ok ?truck)))\n)\n)"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd WALK action\n\nThis requires to add 1 action\naction: WALK\n\nactions:\nWALK:\nparameters: location, location, driver\nduration: time-to-walk function\nconditions: driver must be at the start location and there must be a path between the start location and the end location\neffect: driver is moved from the start location to the end location\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:functions (time-to-walk ?loc ?loc1 - location)\n\t    (time-to-drive ?loc ?loc1 - location))\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj \n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration (time-to-drive ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd LOAD-TRUCK action and UNLOAD-TRUCK action which allows to load and unload obj from truck\n\nThis requires adding 2 actions\nactions: LOAD-TRUCK, UNLOAD-TRUCK\n\nactions:\nLOAD-TRUCK:\nparameters: obj, truck, location\nduration: 2\nconditions: truck and obj are at the same place\neffect: obj is no longer at location, obj is in truck\n\nUNLOAD-TRUCK:\nparameters: obj, truck, location\nduration: 2\nconditions: truck is at location and obj is in truck\neffect: obj is no longer in truck and is at location\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:functions (time-to-walk ?loc ?loc1 - location)\n\t    (time-to-drive ?loc ?loc1 - location))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration (time-to-drive ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration (time-to-walk ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd UNLOAD-TRUCK action and UNLOAD-TRUCK action which allows the obj to be loaded and unloaded from truck\n\nThis requires adding 2 actions\nactions: LOAD-TRUCK, UNLOAD-TRUCK\n\nactions:\nLOAD-TRUCK:\nMoves an obj into the truck\n\nUNLOAD-TRUCK\nMoves an obj out of the truck\n\ncontext: the in predicate represents if an obj is in a truck\nBoth actions require a duration of 2\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:functions (time-to-walk ?loc ?loc1 - location)\n\t    (time-to-drive ?loc ?loc1 - location))\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj \n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration (time-to-walk ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK action, DISEMBARK-TRUCK action and DRIVE-TRUCK which allows the driver to get in and out of the truck and be in driving position as well as to drive from one location to another\n\nThis requires adding 3 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK, DRIVE-TRUCK\n\nactions:\nBOARD-TRUCK:\nparameters: driver truck location\nduration: 1\nconditions: truck and driver at the same location and the truck is empty\neffect: truck is no longer empty, the driver is no longer at location and the driver is driving\n\nDISEMBARK-TRUCK:\nparameters: driver truck location\nduration: 1\nconditions: truck is at location and driver is driving the truck\neffect: driver is no longer driving the truck, the driver is at the location and the truck is empty\n\nDRIVE-TRUCK:\nparameters: location, location, driver, truck\nduration: time-to-drive from location to location\nconditions: driver must be driving the truck, the truck must be at the start location and there must be a link between the start location and the end location\neffect: truck is moved from the start location to the end location\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:functions (time-to-walk ?loc ?loc1 - location)\n\t    (time-to-drive ?loc ?loc1 - location))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration (time-to-drive ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration (time-to-walk ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK and UNLOAD-TRUCK actions which allows the driver to get in and out of truck as well as load and unload object from truck\n\nThis requires adding 4 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK, UNLOAD-TRUCK\n\nactions:\nBOARD-TRUCK:\nparameters: driver truck location\nduration: 1\nconditions: truck and driver at the same location and the truck is empty\neffect: truck is no longer empty, the driver is no longer at location and the driver is driving\n\nDISEMBARK-TRUCK:\nparameters: driver truck location\nduration: 1\nconditions: truck is at location and driver is driving the truck\neffect: driver is no longer driving the truck, the driver is at the location and the truck is empty\n\nLOAD-TRUCK:\nparameters: obj, truck, location\nduration: 2\nconditions: truck and obj are at the same place\neffect: obj is no longer at location, obj is in truck\n\nUNLOAD-TRUCK:\nparameters: obj, truck, location\nduration: 2\nconditions: truck is at location and obj is in truck\neffect: obj is no longer in truck and is at location\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:functions (time-to-walk ?loc ?loc1 - location)\n\t    (time-to-drive ?loc ?loc1 - location))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration (time-to-walk ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK, UNLOAD-TRUCK adn DRIVE-TRUCK actions\nwhich allows the driver to get in and out of truck as well as load and unload object from truck and drive\n\nThis requires adding 5 actions\nactions: BOARD-TRUCK, DISEMBARK-TRUCK, LOAD-TRUCK, UNLOAD-TRUCK, DRIVE-TRUCK\n\nactions:\nBOARD-TRUCK:\nparameters: driver truck location\nduration: 1\nconditions: truck and driver at the same location and the truck is empty\neffect: truck is no longer empty, the driver is no longer at location and the driver is driving\n\nDISEMBARK-TRUCK:\nparameters: driver truck location\nduration: 1\nconditions: truck is at location and driver is driving the truck\neffect: driver is no longer driving the truck, the driver is at the location and the truck is empty\n\nLOAD-TRUCK:\nparameters: obj, truck, location\nduration: 2\nconditions: truck and obj are at the same place\neffect: obj is no longer at location, obj is in truck\n\nUNLOAD-TRUCK:\nparameters: obj, truck, location\nduration: 2\nconditions: truck is at location and obj is in truck\neffect: obj is no longer in truck and is at location\n\nDRIVE-TRUCK:\nparameters: driver, location, location, truck\nduration: time-to-drive from location to location\nconditions: driving is driving truck, truck is at start location\neffect: truck is at end location\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:functions\n\t    (time-to-drive ?loc ?loc1 - location))\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj \n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration (time-to-drive ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration 10)\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the Following PDDL domain\nAdd time-to-walk function that represents the duration to walk between one location and another\n\nThis requires adding 1 function and modifying 1 action\nfunction: time-to-walk time to walk between one location and another\naction WALK\n\nWALK:\nchange duration of walk to time-to-walk\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:functions (time-to-walk ?loc ?loc1 - location))\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj \n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration 5)\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration (time-to-walk ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the Following PDDL domain\nAdd time-to-drive function that represents the duration to frive between one location and another\n\nThis requires adding 1 function and modifying 1 action\nfunction: time-to-drive time to drive between one location and another\naction DRIVE-TRUCK\n\nDRIVE-TRUCK:\nchange duration of DRIVE-TRUCK to time-to-drive\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:functions (time-to-walk ?loc ?loc1 - location)\n\t    (time-to-drive ?loc ?loc1 - location)\n      (speed ?tr - truck))\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj \n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration (/ (time-to-drive ?loc-from ?loc-to) (speed ?truck)))\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration (time-to-walk ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n\n(:durative-action INCREASE-SPEED\n:parameters(?driver - driver ?truck - truck)\n:duration (= ?duration 1)\n:condition (and (at start (driving ?driver ?truck)) (at start (<= (speed ?truck) 10)))\n:effect (and (at end (increase (speed ?truck) 1))))\n\n(:durative-action DECREASE-SPEED\n:parameters(?driver - driver ?truck - truck)\n:duration (= ?duration 1)\n:condition (and (at start (driving ?driver ?truck)) (at start (>= (speed ?truck) 1)))\n:effect (and (at end (decrease (speed ?truck) 1))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the Following PDDL domain\nRemove the speed function as well as the increase and decrease speed functions\n\nThis requires removing 2 actions, removing 1 function and modifying 1 action\n\nRemove INCREASE-SPEED and DECREASE-SPEED\nRemove speed\nchange duration of DRIVE-TRUCK to time-to-drive alone\n\n\n(define (domain driverlog)\n  (:requirements :typing :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) \n\t\t(path ?x ?y - location)\n\t\t(empty ?v - truck)\n  )\n\n  (:functions (time-to-walk ?loc ?loc1 - location)\n\t    (time-to-drive ?loc ?loc1 - location))\n\n  (:action LOAD-TRUCK\n    :parameters (?obj - obj ?truck - truck ?loc - location)\n    :precondition (and (at ?truck ?loc) (at ?obj ?loc))\n    :effect (and (not (at ?obj ?loc)) (in ?obj ?truck))\n  )\n\n  (:action UNLOAD-TRUCK\n    :parameters (?obj - obj ?truck - truck ?loc - location)\n    :precondition (and (at ?truck ?loc) (in ?obj ?truck))\n    :effect (and (not (in ?obj ?truck)) (at ?obj ?loc))\n  )\n\n  (:action BOARD-TRUCK\n    :parameters (?driver - driver ?truck - truck ?loc - location)\n    :precondition (and (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))\n    :effect (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck)))\n  )\n\n  (:action DISEMBARK-TRUCK\n    :parameters (?driver - driver ?truck - truck ?loc - location)\n    :precondition (and (at ?truck ?loc) (driving ?driver ?truck))\n    :effect (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck))\n  )\n\n  (:action DRIVE-TRUCK\n    :parameters (?truck - truck ?loc-from - location ?loc-to - location ?driver - driver)\n    :precondition (and (at ?truck ?loc-from) (driving ?driver ?truck) (link ?loc-from ?loc-to))\n    :effect (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to))\n  )\n\n  (:action WALK\n    :parameters (?driver - driver ?loc-from - location ?loc-to - location)\n    :precondition (and (at ?driver ?loc-from) (path ?loc-from ?loc-to))\n    :effect (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to))\n  )\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the Following PDDL domain\nadd the durative actions requirement and modify all actions to be durative actions\n\nThe following actions have the following durations\nLOAD-TRUCK: 2\nUNLOAD-TRUCK: 2\nBOARD-TRUCK: 1\nDISEMBARK-TRUCK: 1\nDRIVE-TRUCK: time-to-drive\nWALK: time-to-walk\n\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:functions (time-to-walk ?loc ?loc1 - location)\n\t    (time-to-drive ?loc ?loc1 - location))\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj \n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration 1)\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti10", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the Following PDDL domain\nchange all the duration times of all actions to the following\n\nThe following actions have the following durations\nLOAD-TRUCK: 2\nUNLOAD-TRUCK: 2\nBOARD-TRUCK: 1\nDISEMBARK-TRUCK: 1\nDRIVE-TRUCK: time-to-drive\nWALK: time-to-drive\n\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:functions (time-to-walk ?loc ?loc1 - location)\n\t    (time-to-drive ?loc ?loc1 - location))\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 5)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj \n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 5)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 3)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 3)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration 20)\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration 30)\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti11", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the Following PDDL domain\nchange all the duration times of all actions to the following\n\nThe following actions have the following durations\nLOAD-TRUCK: 2\nUNLOAD-TRUCK: 2\nBOARD-TRUCK: 1\nDISEMBARK-TRUCK: 1\nDRIVE-TRUCK: time-to-walk\nWALK: time-to-walk\n\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:functions (time-to-walk ?loc ?loc1 - location)\n\t    (time-to-drive ?loc ?loc1 - location))\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj \n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and  \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration (time-to-drive ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?truck ?loc-from))\n    (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration (time-to-walk ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti12", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd the driving predicate that tracks driver driving a truck and the path predicate that establishes if there is a valid walkable path between 2 locations \n\nThis requires adding 2 predicate and modifying 3 actions\npredicate: driving indicates a driver driving a driving, path valid path between one location and another\nactions: DRIVE-TRUCK, BOARD-TRUCK, DISEMBARK-TRUCK, WALK\n\nDRIVE-TRUCK:\ndriver must be driving the truck\n\nBOARD-TRUCK:\nOnce boarded the driver is driving the truck\n\nDISEMBARK-TRUCK:\nThe driver is no longer driving truck once disembarked\n\nWALK:\nthe path between both locations must exist\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location)\n\t\t(empty ?v - truck)\n)\n\n\n(:functions (time-to-walk ?loc ?loc1 - location)\n\t    (time-to-drive ?loc ?loc1 - location))\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj \n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration (time-to-drive ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration (time-to-walk ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?driver ?loc-from)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti13", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the path predicate that defines an existing path to walk between 2 locations\n\nThis requires modifying WALK action\n\nWALK:\npath must exist between locations to executre path action\n\n\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n    (tires-ok ?tr - truck)\n)\n\n\n(:functions (time-to-walk ?loc ?loc1 - location)\n\t    (time-to-drive ?loc ?loc1 - location))\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj \n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration (time-to-drive ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to)) (over all (tires-ok ?truck)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration (time-to-walk ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to))))\n \n\n (:durative-action INFLATE-tires\n :parameters (?truck - truck ?driver - driver ?loc - location)\n :duration (= ?duration 5)\n :condition (and (at start (at ?driver ?loc) (at start (at ?truck ?loc))))\n :effect (and (at end (tires-ok ?truck)))\n)\n)"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "DriverLog_Ti14", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the tires-ok predicate and the INFLATE-TIRES action\n\nThis requires removing 1 predicate, 1 actions and modifying 1 action\n\nRemove INFLATE-TIRES\nRemove the precondition to have tires-ok in DRIVE-TRUCK action\n\n(define (domain driverlog)\n  (:requirements :typing :durative-actions :fluents) \n  (:types \n          location locatable - object\n\tdriver truck obj - locatable)\n  (:predicates \n\t\t(at ?obj - locatable ?loc - location)\n\t\t(in ?obj1 - obj ?obj - truck)\n\t\t(driving ?d - driver ?v - truck)\n\t\t(link ?x ?y - location) (path ?x ?y - location)\n\t\t(empty ?v - truck)\n    (sober ?dr - driver)\n)\n\n\n(:functions (time-to-walk ?loc ?loc1 - location)\n\t    (time-to-drive ?loc ?loc1 - location))\n\n(:durative-action LOAD-TRUCK\n  :parameters\n   (?obj - obj\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?obj ?loc)))\n  :effect\n   (and (at start (not (at ?obj ?loc))) (at end (in ?obj ?truck))))\n\n(:durative-action UNLOAD-TRUCK\n  :parameters\n   (?obj - obj \n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 2)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (in ?obj ?truck)))\n  :effect\n   (and (at start (not (in ?obj ?truck))) (at end (at ?obj ?loc))))\n\n(:durative-action BOARD-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (at ?driver ?loc)) \n\t(at start (empty ?truck)))\n  :effect\n   (and (at start (not (at ?driver ?loc))) \n\t(at end (driving ?driver ?truck)) (at start (not (empty ?truck)))))\n\n(:durative-action DISEMBARK-TRUCK\n  :parameters\n   (?driver - driver\n    ?truck - truck\n    ?loc - location)\n  :duration (= ?duration 1)\n  :condition\n   (and (over all (at ?truck ?loc)) (at start (driving ?driver ?truck)))\n  :effect\n   (and (at start (not (driving ?driver ?truck))) \n\t(at end (at ?driver ?loc)) (at end (empty ?truck))))\n\n(:durative-action DRIVE-TRUCK\n  :parameters\n   (?truck - truck\n    ?loc-from - location\n    ?loc-to - location\n    ?driver - driver)\n  :duration (= ?duration (time-to-drive ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?truck ?loc-from))\n   (over all (driving ?driver ?truck)) (at start (link ?loc-from ?loc-to) (over all (sober ?driver)))\n  :effect\n   (and (at start (not (at ?truck ?loc-from))) \n\t(at end (at ?truck ?loc-to))) ))\n\n(:durative-action WALK\n  :parameters\n   (?driver - driver\n    ?loc-from - location\n    ?loc-to - location)\n  :duration (= ?duration (time-to-walk ?loc-from ?loc-to))\n  :condition\n   (and (at start (at ?driver ?loc-from)) \n\t(at start (path ?loc-from ?loc-to)))\n  :effect\n   (and (at start (not (at ?driver ?loc-from)))\n\t(at end (at ?driver ?loc-to)) (at end (sober ?driver))))\n \n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Nu0_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil action and equipped_for_soil_analysis predicate\n\nthe sample-soil action costs 3 energy\n\ncontext: the at_*_sample predicate indicates if a sample is at a waypoint, the equipped_for_*_analysis indicates if a rover is equipped for a specific type of analysis, \nstore_of indicates if a rover is equipped with the specified storage, empty is to qualify a storage of empty, full qualifies a storage as full, a storage can either be full or empty,\nhave_*_analysis indicates if a rover posseses a sample of a the * type, the rover need specific amounts of energy to perform various actions\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :fluents)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t      (calibrated ?c - camera ?r - rover) \n\t      (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t      (at_soil_sample ?w - waypoint)\n\t      (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t      (store_of ?s - store ?r - rover)\n\t      (calibration_target ?i - camera ?o - objective)\n\t      (on_board ?i - camera ?r - rover)\n\t      (channel_free ?l - lander)\n\t      (in_sun ?w - waypoint)\n\n)\n\n(:functions (energy ?r - rover) (recharges) )\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z) (>= (energy ?x) 8)\n\t    )\n:effect (and (decrease (energy ?x) 8) (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action recharge\n:parameters (?x - rover ?w - waypoint)\n:precondition (and (at ?x ?w) (in_sun ?w) (<= (energy ?x) 80))\n:effect (and (increase (energy ?x) 20) (increase (recharges) 1)) \n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and  (at ?x ?p) (>= (energy ?x) 5)(at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 5) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (>= (energy ?r) 2)(calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (and (decrease (energy ?r) 2)(calibrated ?i ?r) )\n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n\t\t\t(>= (energy ?r) 1)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))(decrease (energy ?r) 1)\n\t\t)\n)\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 4)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l) (communicated_soil_data ?p)(available ?r)(decrease (energy ?r) 4)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)(>= (energy ?r) 4)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and   (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_rock_data ?p)(available ?r)(decrease (energy ?r) 4)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 6)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_image_data ?o ?m)(available ?r)(decrease (energy ?r) 6)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Nu1_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock actions and equipped_for_soil_analysis, equipped_for_rock_analysis predicates\n\nthe sample-soil action costs 3 energy\nthe sample-rock action costs 5 energy\n\ncontext: the at_*_sample predicate indicates if a sample is at a waypoint, the equipped_for_*_analysis indicates if a rover is equipped for a specific type of analysis, \nstore_of indicates if a rover is equipped with the specified storage, empty is to qualify a storage of empty, full qualifies a storage as full, a storage can either be full or empty,\nhave_*_analysis indicates if a rover posseses a sample of a the * type, the rover need specific amounts of energy to perform various actions\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :fluents)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t     (in_sun ?w - waypoint)\n\n)\n\n(:functions (energy ?r - rover) (recharges) )\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z) (>= (energy ?x) 8)\n\t    )\n:effect (and (decrease (energy ?x) 8) (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action recharge\n:parameters (?x - rover ?w - waypoint)\n:precondition (and (at ?x ?w) (in_sun ?w) (<= (energy ?x) 80))\n:effect (and (increase (energy ?x) 20) (increase (recharges) 1)) \n)\n\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (>= (energy ?r) 2)(calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (and (decrease (energy ?r) 2)(calibrated ?i ?r) )\n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n\t\t\t(>= (energy ?r) 1)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))(decrease (energy ?r) 1)\n\t\t)\n)\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 4)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l) (communicated_soil_data ?p)(available ?r)(decrease (energy ?r) 4)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)(>= (energy ?r) 4)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and   (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_rock_data ?p)(available ?r)(decrease (energy ?r) 4)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 6)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_image_data ?o ?m)(available ?r)(decrease (energy ?r) 6)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Nu2_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock and calibrate actions and equipped_for_soil_analysis, equipped_for_rock_analysis, calibrated predicates\n\nthe sample-soil action costs 3 energy\nthe sample-rock action costs 5 energy\nthe calibrate action costs 2 energy\n\ncontext: the at_*_sample predicate indicates if a sample is at a waypoint, the equipped_for_*_analysis indicates if a rover is equipped for a specific type of analysis, \nstore_of indicates if a rover is equipped with the specified storage, empty is to qualify a storage of empty, full qualifies a storage as full, a storage can either be full or empty,\nhave_*_analysis indicates if a rover posseses a sample of a the * type, the rover need specific amounts of energy to perform various actions, \nthe calibration_target predicate indicates the camera objective, visible_from predicate indicates if the objective is visible from a waypoint, \non_board predicate indicates if camera is on rover. The calibrated predicate indicates that the camera has been calibrated to objective and is ready to take_image. \n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :fluents)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t     (in_sun ?w - waypoint)\n\n)\n\n(:functions (energy ?r - rover) (recharges) )\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z) (>= (energy ?x) 8)\n\t    )\n:effect (and (decrease (energy ?x) 8) (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action recharge\n:parameters (?x - rover ?w - waypoint)\n:precondition (and (at ?x ?w) (in_sun ?w) (<= (energy ?x) 80))\n:effect (and (increase (energy ?x) 20) (increase (recharges) 1)) \n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n\t\t\t(>= (energy ?r) 1)\n               )\n :effect (and (have_image ?r ?o ?m)(decrease (energy ?r) 1)\n\t\t)\n)\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 4)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l) (communicated_soil_data ?p)(available ?r)(decrease (energy ?r) 4)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)(>= (energy ?r) 4)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and   (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_rock_data ?p)(available ?r)(decrease (energy ?r) 4)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 6)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_image_data ?o ?m)(available ?r)(decrease (energy ?r) 6)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Nu3_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock, communicate_rock_data and calibrate actions and equipped_for_soil_analysis, equipped_for_rock_analysis, calibrated, have_soil_analysis, have_rock_analysis and communicated_rock_data predicates\n\nthe sample-soil action costs 3 energy\nthe sample-rock action costs 5 energy\nthe calibrate action costs 2 energy\nthe communicate_rock_data action costs 4 energy\n\ncontext: the at_*_sample predicate indicates if a sample is at a waypoint, the equipped_for_*_analysis indicates if a rover is equipped for a specific type of analysis, \nstore_of indicates if a rover is equipped with the specified storage, empty is to qualify a storage of empty, full qualifies a storage as full, a storage can either be full or empty,\nhave_*_analysis indicates if a rover posseses a sample of a the * type, the rover need specific amounts of energy to perform various actions, \nthe calibration_target predicate indicates the camera objective, visible_from predicate indicates if the objective is visible from a waypoint, \non_board predicate indicates if camera is on rover. The calibrated predicate indicates that the camera has been calibrated to objective and is ready to take_image.\nat_lander predicate indicates that a lander is at a waypoint, available indicates that the rover is available to communicate data or navigate, channel_free indicates if the lander\nis available to communicate, communicated_*_data, indicates that the rover communicated data of * type\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :fluents)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (full ?s - store) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t     (in_sun ?w - waypoint)\n\n)\n\n(:functions (energy ?r - rover) (recharges) )\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z) (>= (energy ?x) 8)\n\t    )\n:effect (and (decrease (energy ?x) 8) (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action recharge\n:parameters (?x - rover ?w - waypoint)\n:precondition (and (at ?x ?w) (in_sun ?w) (<= (energy ?x) 80))\n:effect (and (increase (energy ?x) 20) (increase (recharges) 1)) \n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n\t\t\t(>= (energy ?r) 1)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))(decrease (energy ?r) 1)\n\t\t)\n)\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 4)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l) (communicated_soil_data ?p)(available ?r)(decrease (energy ?r) 4)\n\t)\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 6)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_image_data ?o ?m)(available ?r)(decrease (energy ?r) 6)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Nu4_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock, communicate_rock_data, communicate_soil_data and calibrate actions and equipped_for_soil_analysis, equipped_for_rock_analysis, calibrated, have_soil_analysis, have_rock_analysis, communicated_rock_data, communicate_soil_data predicates\n\nthe sample-soil action costs 3 energy\nthe sample-rock action costs 5 energy\nthe calibrate action costs 2 energy\nthe communicate_rock_data action costs 4 energy\nthe communicate_soil_data action costs 4 energy\n\ncontext: the at_*_sample predicate indicates if a sample is at a waypoint, the equipped_for_*_analysis indicates if a rover is equipped for a specific type of analysis, \nstore_of indicates if a rover is equipped with the specified storage, empty is to qualify a storage of empty, full qualifies a storage as full, a storage can either be full or empty,\nhave_*_analysis indicates if a rover posseses a sample of a the * type, the rover need specific amounts of energy to perform various actions, \nthe calibration_target predicate indicates the camera objective, visible_from predicate indicates if the objective is visible from a waypoint, \non_board predicate indicates if camera is on rover. The calibrated predicate indicates that the camera has been calibrated to objective and is ready to take_image.\nat_lander predicate indicates that a lander is at a waypoint, available indicates that the rover is available to communicate data or navigate, channel_free indicates if the lander\nis available to communicate, communicated_*_data, indicates that the rover communicated data of * type\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :fluents)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (full ?s - store)\n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t     (in_sun ?w - waypoint)\n\n)\n\n(:functions (energy ?r - rover) (recharges) )\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z) (>= (energy ?x) 8)\n\t    )\n:effect (and (decrease (energy ?x) 8) (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action recharge\n:parameters (?x - rover ?w - waypoint)\n:precondition (and (at ?x ?w) (in_sun ?w) (<= (energy ?x) 80))\n:effect (and (increase (energy ?x) 20) (increase (recharges) 1)) \n)\n\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n\t\t\t(>= (energy ?r) 1)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))(decrease (energy ?r) 1)\n\t\t)\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 6)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_image_data ?o ?m)(available ?r)(decrease (energy ?r) 6)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Nu5_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd the recharge action and the recharges function and in_sun predicate\n\nrecharge action increases energy of rover by 20 and recharges by 1 energy must be equal or less then 80\n\ncontext: rover uses energy to do actions. energy tracks the current energy levels of a rover, recharges tracks the amount of recharges done in total (not for specific rover)\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :fluents)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n(:functions (energy ?r - rover))\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z) (>= (energy ?x) 8)\n\t    )\n:effect (and (decrease (energy ?x) 8) (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p)(>= (energy ?x) 3) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 3) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p))\n\t\t)\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and  (at ?x ?p) (>= (energy ?x) 5)(at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 5) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (>= (energy ?r) 2)(calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (and (decrease (energy ?r) 2)(calibrated ?i ?r) )\n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n\t\t\t(>= (energy ?r) 1)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))(decrease (energy ?r) 1)\n\t\t)\n)\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 4)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l) (communicated_soil_data ?p)(available ?r)(decrease (energy ?r) 4)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)(>= (energy ?r) 4)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and   (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_rock_data ?p)(available ?r)(decrease (energy ?r) 4)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 6)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_image_data ?o ?m)(available ?r)(decrease (energy ?r) 6)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Nu6_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd the recharge action and the recharges function and in_sun predicate\n\nrecharge action increases energy of rover by 20 and recharges by 1 energy must be equal or less then 80\n\ncontext: rover uses energy to do actions. energy tracks the current energy levels of a rover, recharges tracks the amount of recharges done in total (not for specific rover)\nactions require a minimum amount of energy to perform. That same minimum is consumed when executing the action the energy requirement for every action are listed below\n\nnavigate: 8\nsample_soil: 3\nsample_rock: 5\ndrop: none\ncalibrate: 2\ntake_image: 1\ncommunicate_soil_data: 4\ncommunicate_rock_data: 4\ncommunicate_image_data: 6\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :fluents)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z)\n\t    )\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s)  (have_soil_analysis ?x ?p) (not (at_soil_sample ?p))\n\t\t)\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and  (at ?x ?p)  5)(at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s)  (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (and (decrease(calibrated ?i ?r) )\n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n\t\t\t\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))\n\t\t)\n)\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l) (communicated_soil_data ?p)(available ?r)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and   (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_rock_data ?p)(available ?r)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_image_data ?o ?m)(available ?r)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Nu7_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the visible predicate\n\nadd a condition to navigate to require the waypoint where the rover is going to be visible from it's current waypoint\nThe communicate data actions to require the lander waypoint to be visible from the rover waypoint \n\ncontext: The visible predicate indicates that a waypoint is visible from another waypoint\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :fluents)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t     (in_sun ?w - waypoint)\n\n)\n\n(:functions (energy ?r - rover) (recharges) )\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n               (>= (energy ?x) 8)\n\t    )\n:effect (and (decrease (energy ?x) 8) (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action recharge\n:parameters (?x - rover ?w - waypoint)\n:precondition (and (at ?x ?w) (in_sun ?w) (<= (energy ?x) 80))\n:effect (and (increase (energy ?x) 20) (increase (recharges) 1)) \n)\n\n(:action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p)(>= (energy ?x) 3) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 3) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p))\n\t\t)\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and  (at ?x ?p) (>= (energy ?x) 5)(at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 5) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (>= (energy ?r) 2)(calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (and (decrease (energy ?r) 2)(calibrated ?i ?r) )\n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n\t\t\t(>= (energy ?r) 1)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))(decrease (energy ?r) 1)\n\t\t)\n)\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (available ?r)(channel_free ?l)(>= (energy ?r) 4)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l) (communicated_soil_data ?p)(available ?r)(decrease (energy ?r) 4)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)(>= (energy ?r) 4)\n                   (available ?r)(channel_free ?l)\n            )\n :effect (and   (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_rock_data ?p)(available ?r)(decrease (energy ?r) 4)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(available ?r)(channel_free ?l)(>= (energy ?r) 6)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_image_data ?o ?m)(available ?r)(decrease (energy ?r) 6)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Nu8_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the channel_free predicate\n\nmodify the communicate_data actions to integrate the channel_free predicate\n\ncontext: channel_free predicate indicates that a lander is free to communicate, during the communication of data the channel is not free anymore, \nonce the data is communicated the channel is free once more\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :fluents)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (in_sun ?w - waypoint)\n\n)\n\n(:functions (energy ?r - rover) (recharges) )\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z) (>= (energy ?x) 8)\n\t    )\n:effect (and (decrease (energy ?x) 8) (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action recharge\n:parameters (?x - rover ?w - waypoint)\n:precondition (and (at ?x ?w) (in_sun ?w) (<= (energy ?x) 80))\n:effect (and (increase (energy ?x) 20) (increase (recharges) 1)) \n)\n\n(:action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p)(>= (energy ?x) 3) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 3) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p))\n\t\t)\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and  (at ?x ?p) (>= (energy ?x) 5)(at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 5) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (>= (energy ?r) 2)(calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (and (decrease (energy ?r) 2)(calibrated ?i ?r) )\n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n\t\t\t(>= (energy ?r) 1)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))(decrease (energy ?r) 1)\n\t\t)\n)\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(>= (energy ?r) 4)\n            )\n :effect (and (not (available ?r))\n (communicated_soil_data ?p)(available ?r)(decrease (energy ?r) 4)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)(>= (energy ?r) 4)\n                   (visible ?x ?y)(available ?r)\n            )\n :effect (and   (not (available ?r))\n(communicated_rock_data ?p)(available ?r)(decrease (energy ?r) 4)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(>= (energy ?r) 6)\n            )\n :effect (and (not (available ?r))\n(communicated_image_data ?o ?m)(available ?r)(decrease (energy ?r) 6)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Nu9_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nremove the long_range_communicate_*_data actions adn the orbital_satellite_channel\n\nRemove the long_range_communicate_*_data actions and the orbital satellite_channel\n\ncontext: the orbital_satellite_channel predicate indicates if satellite is in range for communication using long range communcation\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :fluents)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t     (in_sun ?w - waypoint)\n            (orbital_satellite_channel)\n\n)\n\n(:functions (energy ?r - rover) (recharges) )\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z) (>= (energy ?x) 8)\n\t    )\n:effect (and (decrease (energy ?x) 8) (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action recharge\n:parameters (?x - rover ?w - waypoint)\n:precondition (and (at ?x ?w) (in_sun ?w) (<= (energy ?x) 80))\n:effect (and (increase (energy ?x) 20) (increase (recharges) 1)) \n)\n\n(:action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p)(>= (energy ?x) 3) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 3) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p))\n\t\t)\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and  (at ?x ?p) (>= (energy ?x) 5)(at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 5) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (>= (energy ?r) 2)(calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (and (decrease (energy ?r) 2)(calibrated ?i ?r) )\n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n\t\t\t(>= (energy ?r) 1)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))(decrease (energy ?r) 1)\n\t\t)\n)\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 4)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l) (communicated_soil_data ?p)(available ?r)(decrease (energy ?r) 4)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)(>= (energy ?r) 4)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and   (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_rock_data ?p)(available ?r)(decrease (energy ?r) 4)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 6)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_image_data ?o ?m)(available ?r)(decrease (energy ?r) 6)\n          )\n)\n\n(:action long_range_communicate_soil_data\n :parameters (?r - rover ?p - waypoint ?x - waypoint)\n :precondition (and (at ?r ?x)(have_soil_analysis ?r ?p) \n                   (available ?r)(>= (energy ?r) 20)(orbital_satellite_channel)\n            )\n :effect (and (not (available ?r))\n(communicated_soil_data ?p)(available ?r)(decrease (energy ?r) 20)\n\t)\n)\n\n(:action long_range_communicate_rock_data\n :parameters (?r - rover ?p - waypoint ?x - waypoint)\n :precondition (and (at ?r ?x)(have_rock_analysis ?r ?p)(>= (energy ?r) 20)\n                  (available ?r)(orbital_satellite_channel)\n            )\n :effect (and   (not (available ?r))\n\n(communicated_rock_data ?p)(available ?r)(decrease (energy ?r) 20)\n          )\n)\n\n\n(:action long_range_communicate_image_data\n :parameters (?r - rover ?o - objective ?m - mode ?x - waypoint)\n :precondition (and (at ?r ?x)(have_image ?r ?o ?m)(available ?r)(>= (energy ?r) 20)(orbital_satellite_channel)\n            )\n :effect (and (not (available ?r))\n(communicated_image_data ?o ?m)(available ?r)(decrease (energy ?r) 20)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Nu10_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the air data analysis predicates and actions\n\ncontext: equipped_for_air_analysis indicates if the rover is equipped with a module to analyse the air, \nhave_air_analysis indicates that the rover has an air sample from a specific waypoint, communicate_air_data indicates that the rover successfully communicated air data,\nat_air_sample indicates that an air sample is present at a waypoint\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :fluents)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_air_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (have_air_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_air_date ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n            (at_air_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t     (in_sun ?w - waypoint)\n\n)\n\n(:functions (energy ?r - rover) (recharges) )\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z) (>= (energy ?x) 8)\n\t    )\n:effect (and (decrease (energy ?x) 8) (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action recharge\n:parameters (?x - rover ?w - waypoint)\n:precondition (and (at ?x ?w) (in_sun ?w) (<= (energy ?x) 80))\n:effect (and (increase (energy ?x) 20) (increase (recharges) 1)) \n)\n\n(:action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p)(>= (energy ?x) 3) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 3) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p))\n\t\t)\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and  (at ?x ?p) (>= (energy ?x) 5)(at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 5) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))\n\t\t)\n)\n\n(:action sample_air\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and  (at ?x ?p) (>= (energy ?x) 5)(at_air_sample ?p) (equipped_for_air_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 5) (have_air_analysis ?x ?p) (not (at_air_sample ?p))\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (>= (energy ?r) 2)(calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (and (decrease (energy ?r) 2)(calibrated ?i ?r) )\n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n\t\t\t(>= (energy ?r) 1)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))(decrease (energy ?r) 1)\n\t\t)\n)\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 4)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l) (communicated_soil_data ?p)(available ?r)(decrease (energy ?r) 4)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)(>= (energy ?r) 4)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and   (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_rock_data ?p)(available ?r)(decrease (energy ?r) 4)\n          )\n)\n\n(:action communicate_air_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_air_analysis ?r ?p)(>= (energy ?r) 4)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and   (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_air_data ?p)(available ?r)(decrease (energy ?r) 4)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 6)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_image_data ?o ?m)(available ?r)(decrease (energy ?r) 6)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Nu0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil action and equipped_for_soil_analysis predicate\n\nThis requires adding 1 action and 1 predicate\npredicate: equipped_for_soil_analysis per rover\naction: sample-soil\n\nsample-soil:\nparameters: rover store waypoint\nconditions: rover is at waypoint with greater or equal 3 energy, the soil sample is at waypoint, the rover is equipped for soil analysis and has a store that is empty\neffect: store is no longer empty, it's full. Energy reserves decrease by 3, the rover has the soil analysis and the soil sample is no longer at the waypoint\n\n(define (domain Rover)\n(:requirements :typing :fluents)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t      (calibrated ?c - camera ?r - rover) \n\t      (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t      (at_soil_sample ?w - waypoint)\n\t      (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t      (store_of ?s - store ?r - rover)\n\t      (calibration_target ?i - camera ?o - objective)\n\t      (on_board ?i - camera ?r - rover)\n\t      (channel_free ?l - lander)\n\t      (in_sun ?w - waypoint)\n\n)\n\n(:functions (energy ?r - rover) (recharges) )\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z) (>= (energy ?x) 8)\n\t    )\n:effect (and (decrease (energy ?x) 8) (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action recharge\n:parameters (?x - rover ?w - waypoint)\n:precondition (and (at ?x ?w) (in_sun ?w) (<= (energy ?x) 80))\n:effect (and (increase (energy ?x) 20) (increase (recharges) 1)) \n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and  (at ?x ?p) (>= (energy ?x) 5)(at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 5) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (>= (energy ?r) 2)(calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (and (decrease (energy ?r) 2)(calibrated ?i ?r) )\n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n\t\t\t(>= (energy ?r) 1)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))(decrease (energy ?r) 1)\n\t\t)\n)\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 4)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l) (communicated_soil_data ?p)(available ?r)(decrease (energy ?r) 4)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)(>= (energy ?r) 4)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and   (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_rock_data ?p)(available ?r)(decrease (energy ?r) 4)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 6)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_image_data ?o ?m)(available ?r)(decrease (energy ?r) 6)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Nu1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock actions and equipped_for_soil_analysis, equipped_for_rock_analysis predicates\n\nThis requires adding 2 action and 2 predicate\npredicate: equipped_for_soil_analysis per rover, equipped_for_rock_analysis per rover\naction: sample-soil, sample-rock\n\nsample-soil:\nparameters: rover store waypoint\nconditions: rover is at waypoint with greater or equal 3 energy, the soil sample is at waypoint, the rover is equipped for soil analysis and has a store that is empty\neffect: store is no longer empty, it's full. Energy reserves decrease by 3, the rover has the soil analysis and the soil sample is no longer at the waypoint\n\nsample-rock:\nparameters: rover store waypoint\nconditions: rover is at waypoint with greater or equal 5 energy, the rock sample is at waypoint, the rover is equipped for rock analysis and has a store that is empty\neffect: store is no longer empty, it's full. Energy reserves decrease by 5, the rover has the rock analysis and the rock sample is no longer at the waypoint\n\n(define (domain Rover)\n(:requirements :typing :fluents)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t     (in_sun ?w - waypoint)\n\n)\n\n(:functions (energy ?r - rover) (recharges) )\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z) (>= (energy ?x) 8)\n\t    )\n:effect (and (decrease (energy ?x) 8) (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action recharge\n:parameters (?x - rover ?w - waypoint)\n:precondition (and (at ?x ?w) (in_sun ?w) (<= (energy ?x) 80))\n:effect (and (increase (energy ?x) 20) (increase (recharges) 1)) \n)\n\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (>= (energy ?r) 2)(calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (and (decrease (energy ?r) 2)(calibrated ?i ?r) )\n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n\t\t\t(>= (energy ?r) 1)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))(decrease (energy ?r) 1)\n\t\t)\n)\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 4)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l) (communicated_soil_data ?p)(available ?r)(decrease (energy ?r) 4)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)(>= (energy ?r) 4)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and   (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_rock_data ?p)(available ?r)(decrease (energy ?r) 4)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 6)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_image_data ?o ?m)(available ?r)(decrease (energy ?r) 6)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Nu2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock and calibrate actions and equipped_for_soil_analysis, equipped_for_rock_analysis, calibrated predicates\n\nThis requires adding 3 action and 3 predicate\npredicate: equipped_for_soil_analysis per rover, equipped_for_rock_analysis per rover, calibrated per camera per rover\naction: sample-soil, sample-rock, calibrate\n\nsample-soil:\nparameters: rover store waypoint\nconditions: rover is at waypoint with greater or equal 3 energy, the soil sample is at waypoint, the rover is equipped for soil analysis and has a store that is empty\neffect: store is no longer empty, it's full. Energy reserves decrease by 3, the rover has the soil analysis and the soil sample is no longer at the waypoint\n\nsample-rock:\nparameters: rover store waypoint\nconditions: rover is at waypoint with greater or equal 5 energy, the rock sample is at waypoint, the rover is equipped for rock analysis and has a store that is empty\neffect: store is no longer empty, it's full. Energy reserves decrease by 5, the rover has the rock analysis and the rock sample is no longer at the waypoint\n\ncalibrate:\nparameters: rover camera objective waypoint\nconditions: rover must be equipped for imaging, the objective must be a calibration target for the camera, the rover must be at the waypoint and the objective\n must be visible from the waypoint, the camera must be on board the rover, energy must be greater or equal to 2\neffect: camera on the rover is calibrated, energy is decreased by 2\n\n(define (domain Rover)\n(:requirements :typing :fluents)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t     (in_sun ?w - waypoint)\n\n)\n\n(:functions (energy ?r - rover) (recharges) )\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z) (>= (energy ?x) 8)\n\t    )\n:effect (and (decrease (energy ?x) 8) (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action recharge\n:parameters (?x - rover ?w - waypoint)\n:precondition (and (at ?x ?w) (in_sun ?w) (<= (energy ?x) 80))\n:effect (and (increase (energy ?x) 20) (increase (recharges) 1)) \n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n\t\t\t(>= (energy ?r) 1)\n               )\n :effect (and (have_image ?r ?o ?m)(decrease (energy ?r) 1)\n\t\t)\n)\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 4)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l) (communicated_soil_data ?p)(available ?r)(decrease (energy ?r) 4)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)(>= (energy ?r) 4)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and   (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_rock_data ?p)(available ?r)(decrease (energy ?r) 4)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 6)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_image_data ?o ?m)(available ?r)(decrease (energy ?r) 6)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Nu3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock, communicate_rock_data and calibrate actions and equipped_for_soil_analysis, equipped_for_rock_analysis, calibrated, have_soil_analysis, have_rock_analysis and communicated_rock_data predicates\n\nThis requires adding 4 action and 6 predicate\npredicate: equipped_for_soil_analysis per rover, equipped_for_rock_analysis per rover, calibrated per camera per rover, have_soil_analysis per rover per waypoint, have_rock_analysis per rover per waypoint and communicated_rock_data per waypoint\naction: sample-soil, sample-rock, calibrate, communicate_rock_data\n\nsample-soil:\nparameters: rover store waypoint\nconditions: rover is at waypoint with greater or equal 3 energy, the soil sample is at waypoint, the rover is equipped for soil analysis and has a store that is empty\neffect: store is no longer empty, it's full. Energy reserves decrease by 3, the rover has the soil analysis and the soil sample is no longer at the waypoint\n\nsample-rock:\nparameters: rover store waypoint\nconditions: rover is at waypoint with greater or equal 5 energy, the rock sample is at waypoint, the rover is equipped for rock analysis and has a store that is empty\neffect: store is no longer empty, it's full. Energy reserves decrease by 5, the rover has the rock analysis and the rock sample is no longer at the waypoint\n\ncalibrate:\nparameters: rover camera objective waypoint\nconditions: rover must be equipped for imaging, the objective must be a calibration target for the camera, the rover must be at the waypoint and the objective\n must be visible from the waypoint, the camera must be on board the rover, energy must be greater or equal to 2\neffect: camera on the rover is calibrated, energy is decreased by 2\n\ncommunicate_rock_data:\nparameters: rover lander waypoint waypoint waypoint\nconditions: rover is at a waypoint, lander is at a waypoint, the rover waypoint and lander waypoint are in visible range, \nthe rover has the rock analysis from the waypoint where it took sample the rover is available and the communication channel is free, energy is greater or equal to 4\neffect: rover is temporarily unavailable, channel is temporarily not free, rover becomes available again, channel becomes free, \nrover communicated_rock_data rover energy decreases by 4\n\n(define (domain Rover)\n(:requirements :typing :fluents)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (full ?s - store) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t     (in_sun ?w - waypoint)\n\n)\n\n(:functions (energy ?r - rover) (recharges) )\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z) (>= (energy ?x) 8)\n\t    )\n:effect (and (decrease (energy ?x) 8) (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action recharge\n:parameters (?x - rover ?w - waypoint)\n:precondition (and (at ?x ?w) (in_sun ?w) (<= (energy ?x) 80))\n:effect (and (increase (energy ?x) 20) (increase (recharges) 1)) \n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n\t\t\t(>= (energy ?r) 1)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))(decrease (energy ?r) 1)\n\t\t)\n)\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 4)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l) (communicated_soil_data ?p)(available ?r)(decrease (energy ?r) 4)\n\t)\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 6)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_image_data ?o ?m)(available ?r)(decrease (energy ?r) 6)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Nu4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock, communicate_rock_data, communicate_soil_data and calibrate actions and equipped_for_soil_analysis, equipped_for_rock_analysis, calibrated, have_soil_analysis, have_rock_analysis, communicated_rock_data, communicate_soil_data predicates\n\nThis requires adding 5 action and 7 predicate\npredicate: equipped_for_soil_analysis per rover, equipped_for_rock_analysis per rover, calibrated per camera per rover, have_soil_analysis per rover per waypoint, have_rock_analysis per rover per waypoint and communicated_rock_data per waypoint\naction: sample-soil, sample-rock, calibrate, communicate_rock_data, communicate_soil_daata\n\nsample-soil:\nparameters: rover store waypoint\nconditions: rover is at waypoint with greater or equal 3 energy, the soil sample is at waypoint, the rover is equipped for soil analysis and has a store that is empty\neffect: store is no longer empty, it's full. Energy reserves decrease by 3, the rover has the soil analysis and the soil sample is no longer at the waypoint\n\nsample-rock:\nparameters: rover store waypoint\nconditions: rover is at waypoint with greater or equal 5 energy, the rock sample is at waypoint, the rover is equipped for rock analysis and has a store that is empty\neffect: store is no longer empty, it's full. Energy reserves decrease by 5, the rover has the rock analysis and the rock sample is no longer at the waypoint\n\ncalibrate:\nparameters: rover camera objective waypoint\nconditions: rover must be equipped for imaging, the objective must be a calibration target for the camera, the rover must be at the waypoint and the objective\n must be visible from the waypoint, the camera must be on board the rover, energy must be greater or equal to 2\neffect: camera on the rover is calibrated, energy is decreased by 2\n\ncommunicate_rock_data:\nparameters: rover lander waypoint waypoint waypoint\nconditions: rover is at a waypoint, lander is at a waypoint, the rover waypoint and lander waypoint are in visible range, \nthe rover has the rock analysis from the waypoint where it took sample the rover is available and the communication channel is free, energy is greater or equal to 4\neffect: rover is temporarily unavailable, channel is temporarily not free, rover becomes available again, channel becomes free, \nrover communicated_rock_data rover energy decreases by 4\n\ncommunicate_soil_data:\nparameters: rover lander waypoint waypoint waypoint\nconditions: rover is at a waypoint, lander is at a waypoint, the rover waypoint and lander waypoint are in visible range, \nthe rover has the soil analysis from the waypoint where it took sample the rover is available and the communication channel is free, energy is greater or equal to 4\neffect: rover is temporarily unavailable, channel is temporarily not free, rover becomes available again, channel becomes free, \nrover communicated_soil_data rover energy decreases by 4\n\n(define (domain Rover)\n(:requirements :typing :fluents)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (full ?s - store)\n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t     (in_sun ?w - waypoint)\n\n)\n\n(:functions (energy ?r - rover) (recharges) )\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z) (>= (energy ?x) 8)\n\t    )\n:effect (and (decrease (energy ?x) 8) (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action recharge\n:parameters (?x - rover ?w - waypoint)\n:precondition (and (at ?x ?w) (in_sun ?w) (<= (energy ?x) 80))\n:effect (and (increase (energy ?x) 20) (increase (recharges) 1)) \n)\n\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n\t\t\t(>= (energy ?r) 1)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))(decrease (energy ?r) 1)\n\t\t)\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 6)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_image_data ?o ?m)(available ?r)(decrease (energy ?r) 6)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Nu5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd the recharge action and the recharges function and in_sun predicate\n\nThis requires adding 1 action and 1 function and 1 predicate\npredicate: in_sun per waypoint\nfunction: recharges tracks the amount of recharges done \naction: recharge\n\nrecharge:\nparameters: rover waypoint\nconditions: rover is at waypoint, waypoint is in the sun, energy is less or equal to 80\neffect: increase energy of rover by 20, increases recharges by 1\n\n(define (domain Rover)\n(:requirements :typing :fluents)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n(:functions (energy ?r - rover))\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z) (>= (energy ?x) 8)\n\t    )\n:effect (and (decrease (energy ?x) 8) (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p)(>= (energy ?x) 3) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 3) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p))\n\t\t)\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and  (at ?x ?p) (>= (energy ?x) 5)(at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 5) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (>= (energy ?r) 2)(calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (and (decrease (energy ?r) 2)(calibrated ?i ?r) )\n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n\t\t\t(>= (energy ?r) 1)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))(decrease (energy ?r) 1)\n\t\t)\n)\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 4)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l) (communicated_soil_data ?p)(available ?r)(decrease (energy ?r) 4)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)(>= (energy ?r) 4)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and   (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_rock_data ?p)(available ?r)(decrease (energy ?r) 4)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 6)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_image_data ?o ?m)(available ?r)(decrease (energy ?r) 6)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Nu6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd the recharge action, the recharges and energy function and in_sun predicate\n\nThis requires adding 1 action and 2 function and 1 predicate and modify most actions\npredicate: in_sun per waypoint\nfunction: recharges tracks the amount of recharges done \naction: recharge\n\nrecharge:\nparameters: rover waypoint\nconditions: rover is at waypoint, waypoint is in the sun, energy is less or equal to 80\neffect: increase energy of rover by 20, increases recharges by 1\n\nsome actions need a minimum of energy to execute and their execution consumes that energy\nnavigate: 8\nsample_soil: 3\nsample_rock: 5\ndrop: none\ncalibrate: 2\ntake_image: 1\ncommunicate_soil_data: 4\ncommunicate_rock_data: 4\ncommunicate_image_data: 6\n\n(define (domain Rover)\n(:requirements :typing :fluents)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z)\n\t    )\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s)  (have_soil_analysis ?x ?p) (not (at_soil_sample ?p))\n\t\t)\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and  (at ?x ?p)  5)(at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s)  (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (and (decrease(calibrated ?i ?r) )\n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n\t\t\t\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))\n\t\t)\n)\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l) (communicated_soil_data ?p)(available ?r)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and   (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_rock_data ?p)(available ?r)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_image_data ?o ?m)(available ?r)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Nu7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the visible predicate\n\nThis requires adding 1 predicate and modifying 4 actions\npredicate: visible waypoint is visible from another waypoint\n\nactions:\nnavigate action requires the waypoint the rover is navigating to be visible by the waypoint that the rover is currently at\n\ncommunicate_soil_data requires the lander waypoint to be visible from the rover waypoint\ncommunicate_rock_data requires the lander waypoint to be visible from the rover waypoint\ncommunicate_image_data requires the lander waypoint to be visible from the rover waypoint\n\n\n(define (domain Rover)\n(:requirements :typing :fluents)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t     (in_sun ?w - waypoint)\n\n)\n\n(:functions (energy ?r - rover) (recharges) )\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n               (>= (energy ?x) 8)\n\t    )\n:effect (and (decrease (energy ?x) 8) (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action recharge\n:parameters (?x - rover ?w - waypoint)\n:precondition (and (at ?x ?w) (in_sun ?w) (<= (energy ?x) 80))\n:effect (and (increase (energy ?x) 20) (increase (recharges) 1)) \n)\n\n(:action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p)(>= (energy ?x) 3) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 3) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p))\n\t\t)\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and  (at ?x ?p) (>= (energy ?x) 5)(at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 5) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (>= (energy ?r) 2)(calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (and (decrease (energy ?r) 2)(calibrated ?i ?r) )\n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n\t\t\t(>= (energy ?r) 1)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))(decrease (energy ?r) 1)\n\t\t)\n)\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (available ?r)(channel_free ?l)(>= (energy ?r) 4)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l) (communicated_soil_data ?p)(available ?r)(decrease (energy ?r) 4)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)(>= (energy ?r) 4)\n                   (available ?r)(channel_free ?l)\n            )\n :effect (and   (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_rock_data ?p)(available ?r)(decrease (energy ?r) 4)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(available ?r)(channel_free ?l)(>= (energy ?r) 6)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_image_data ?o ?m)(available ?r)(decrease (energy ?r) 6)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Nu8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the channel_free predicate\n\nThis requires adding 1 predicate and modifying 3 actions\npredicate: channel_free per lander\n\nactions\ncommunicate_soil_data: The lander channel must be free to start a communication. While the rover and lander are communicating the channel is not free and then becomes free again once the data is communicated\ncommunicate_rock_data: The lander channel must be free to start a communication. While the rover and lander are communicating the channel is not free and then becomes free again once the data is communicated\ncommunicate_image_data: The lander channel must be free to start a communication. While the rover and lander are communicating the channel is not free and then becomes free again once the data is communicated\n\n(define (domain Rover)\n(:requirements :typing :fluents)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (in_sun ?w - waypoint)\n\n)\n\n(:functions (energy ?r - rover) (recharges) )\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z) (>= (energy ?x) 8)\n\t    )\n:effect (and (decrease (energy ?x) 8) (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action recharge\n:parameters (?x - rover ?w - waypoint)\n:precondition (and (at ?x ?w) (in_sun ?w) (<= (energy ?x) 80))\n:effect (and (increase (energy ?x) 20) (increase (recharges) 1)) \n)\n\n(:action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p)(>= (energy ?x) 3) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 3) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p))\n\t\t)\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and  (at ?x ?p) (>= (energy ?x) 5)(at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 5) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (>= (energy ?r) 2)(calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (and (decrease (energy ?r) 2)(calibrated ?i ?r) )\n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n\t\t\t(>= (energy ?r) 1)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))(decrease (energy ?r) 1)\n\t\t)\n)\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(>= (energy ?r) 4)\n            )\n :effect (and (not (available ?r))\n (communicated_soil_data ?p)(available ?r)(decrease (energy ?r) 4)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)(>= (energy ?r) 4)\n                   (visible ?x ?y)(available ?r)\n            )\n :effect (and   (not (available ?r))\n(communicated_rock_data ?p)(available ?r)(decrease (energy ?r) 4)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(>= (energy ?r) 6)\n            )\n :effect (and (not (available ?r))\n(communicated_image_data ?o ?m)(available ?r)(decrease (energy ?r) 6)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Nu9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nremove the long_range_communicate_*_data actions adn the orbital_satellite_channel\n\nThis requires removing 1 predicate and 3 actions\npredicate: orbital_satellite_channel indicates if orbital satellite is available to communicate\nactions:\n\nRemove long_range_communicate_image_data\nRemove long_range_communicate_rock_data\nremove long_range_communicate_soil_data\n\n(define (domain Rover)\n(:requirements :typing :fluents)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t     (in_sun ?w - waypoint)\n            (orbital_satellite_channel)\n\n)\n\n(:functions (energy ?r - rover) (recharges) )\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z) (>= (energy ?x) 8)\n\t    )\n:effect (and (decrease (energy ?x) 8) (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action recharge\n:parameters (?x - rover ?w - waypoint)\n:precondition (and (at ?x ?w) (in_sun ?w) (<= (energy ?x) 80))\n:effect (and (increase (energy ?x) 20) (increase (recharges) 1)) \n)\n\n(:action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p)(>= (energy ?x) 3) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 3) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p))\n\t\t)\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and  (at ?x ?p) (>= (energy ?x) 5)(at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 5) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (>= (energy ?r) 2)(calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (and (decrease (energy ?r) 2)(calibrated ?i ?r) )\n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n\t\t\t(>= (energy ?r) 1)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))(decrease (energy ?r) 1)\n\t\t)\n)\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 4)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l) (communicated_soil_data ?p)(available ?r)(decrease (energy ?r) 4)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)(>= (energy ?r) 4)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and   (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_rock_data ?p)(available ?r)(decrease (energy ?r) 4)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 6)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_image_data ?o ?m)(available ?r)(decrease (energy ?r) 6)\n          )\n)\n\n(:action long_range_communicate_soil_data\n :parameters (?r - rover ?p - waypoint ?x - waypoint)\n :precondition (and (at ?r ?x)(have_soil_analysis ?r ?p) \n                   (available ?r)(>= (energy ?r) 20)(orbital_satellite_channel)\n            )\n :effect (and (not (available ?r))\n(communicated_soil_data ?p)(available ?r)(decrease (energy ?r) 20)\n\t)\n)\n\n(:action long_range_communicate_rock_data\n :parameters (?r - rover ?p - waypoint ?x - waypoint)\n :precondition (and (at ?r ?x)(have_rock_analysis ?r ?p)(>= (energy ?r) 20)\n                  (available ?r)(orbital_satellite_channel)\n            )\n :effect (and   (not (available ?r))\n\n(communicated_rock_data ?p)(available ?r)(decrease (energy ?r) 20)\n          )\n)\n\n\n(:action long_range_communicate_image_data\n :parameters (?r - rover ?o - objective ?m - mode ?x - waypoint)\n :precondition (and (at ?r ?x)(have_image ?r ?o ?m)(available ?r)(>= (energy ?r) 20)(orbital_satellite_channel)\n            )\n :effect (and (not (available ?r))\n(communicated_image_data ?o ?m)(available ?r)(decrease (energy ?r) 20)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Nu10", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the air data analysis predicates and actions\n\nThis requires removing 4 predicates and 2 actions\npredicates: equipped_for_air_analysis, have_air_analysis, communicate_air_data, at_air_sample\nactions\nRemove sample_air\nRemove communicate_air_data\n\n(define (domain Rover)\n(:requirements :typing :fluents)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_air_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (have_air_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_air_date ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n            (at_air_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t     (in_sun ?w - waypoint)\n\n)\n\n(:functions (energy ?r - rover) (recharges) )\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z) (>= (energy ?x) 8)\n\t    )\n:effect (and (decrease (energy ?x) 8) (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action recharge\n:parameters (?x - rover ?w - waypoint)\n:precondition (and (at ?x ?w) (in_sun ?w) (<= (energy ?x) 80))\n:effect (and (increase (energy ?x) 20) (increase (recharges) 1)) \n)\n\n(:action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p)(>= (energy ?x) 3) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 3) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p))\n\t\t)\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and  (at ?x ?p) (>= (energy ?x) 5)(at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 5) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))\n\t\t)\n)\n\n(:action sample_air\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and  (at ?x ?p) (>= (energy ?x) 5)(at_air_sample ?p) (equipped_for_air_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 5) (have_air_analysis ?x ?p) (not (at_air_sample ?p))\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (>= (energy ?r) 2)(calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (and (decrease (energy ?r) 2)(calibrated ?i ?r) )\n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n\t\t\t(>= (energy ?r) 1)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))(decrease (energy ?r) 1)\n\t\t)\n)\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 4)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l) (communicated_soil_data ?p)(available ?r)(decrease (energy ?r) 4)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)(>= (energy ?r) 4)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and   (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_rock_data ?p)(available ?r)(decrease (energy ?r) 4)\n          )\n)\n\n(:action communicate_air_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_air_analysis ?r ?p)(>= (energy ?r) 4)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and   (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_air_data ?p)(available ?r)(decrease (energy ?r) 4)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)(>= (energy ?r) 6)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))\n(channel_free ?l)\n(communicated_image_data ?o ?m)(available ?r)(decrease (energy ?r) 6)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Si0_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil action and equipped_for_soil_analysis predicate\n\nthe sample-soil has a duration of 10\n\ncontext: the at_*_sample predicate indicates if a sample is at a waypoint, the equipped_for_*_analysis indicates if a rover is equipped for a specific type of analysis, \nstore_of indicates if a rover is equipped with the specified storage, empty is to qualify a storage of empty, full qualifies a storage as full, a storage can either be full or empty,\nhave_*_analysis indicates if a rover posseses a sample of a the * type\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :durative-actions)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y)) \n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p))  (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (at end (calibrated ?i ?r)) \n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Si1_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock actions and equipped_for_soil_analysis, equipped_for_rock_analysis predicates\n\nthe sample-soil action has a duration if 10\nthe sample-rock action has a duration of 8\n\ncontext: the at_*_sample predicate indicates if a sample is at a waypoint, the equipped_for_*_analysis indicates if a rover is equipped for a specific type of analysis, \nstore_of indicates if a rover is equipped with the specified storage, empty is to qualify a storage of empty, full qualifies a storage as full, a storage can either be full or empty,\nhave_*_analysis indicates if a rover posseses a sample of a the * type\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :durative-actions)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y)) \n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (at end (calibrated ?i ?r)) \n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Si2_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock and calibrate actions and equipped_for_soil_analysis, equipped_for_rock_analysis, calibrated predicates\n\nthe sample-soil action has a duration of 10\nthe sample-rock action has a duration of 8\nthe calibrate action has a duration of 5\n\ncontext: the at_*_sample predicate indicates if a sample is at a waypoint, the equipped_for_*_analysis indicates if a rover is equipped for a specific type of analysis, \nstore_of indicates if a rover is equipped with the specified storage, empty is to qualify a storage of empty, full qualifies a storage as full, a storage can either be full or empty,\nhave_*_analysis indicates if a rover posseses a sample of a the * type, \nthe calibration_target predicate indicates the camera objective, visible_from predicate indicates if the objective is visible from a waypoint, \non_board predicate indicates if camera is on rover. The calibrated predicate indicates that the camera has been calibrated to objective and is ready to take_image. \n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :durative-actions)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y)) \n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Si3_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock, communicate_rock_data and calibrate actions and equipped_for_soil_analysis, equipped_for_rock_analysis, calibrated, have_soil_analysis, have_rock_analysis and communicated_rock_data predicates\n\nthe sample-soil action has a duration of 10\nthe sample-rock action has a duration of 8\nthe calibrate action has a duration of 5\nthe communicate_rock_data action has a duration of 10\n\ncontext: the at_*_sample predicate indicates if a sample is at a waypoint, the equipped_for_*_analysis indicates if a rover is equipped for a specific type of analysis, \nstore_of indicates if a rover is equipped with the specified storage, empty is to qualify a storage of empty, full qualifies a storage as full, a storage can either be full or empty,\nhave_*_analysis indicates if a rover posseses a sample of a the * type, \nthe calibration_target predicate indicates the camera objective, visible_from predicate indicates if the objective is visible from a waypoint, \non_board predicate indicates if camera is on rover. The calibrated predicate indicates that the camera has been calibrated to objective and is ready to take_image.\nat_lander predicate indicates that a lander is at a waypoint, available indicates that the rover is available to communicate data or navigate, channel_free indicates if the lander\nis available to communicate, communicated_*_data, indicates that the rover communicated data of * type\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :durative-actions)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y)) \n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Si4_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock, communicate_rock_data, communicate_soil_data and calibrate actions and equipped_for_soil_analysis, equipped_for_rock_analysis, calibrated, have_soil_analysis, have_rock_analysis, communicated_rock_data, communicate_soil_data predicates\n\nthe sample-soil action has a duration of 10\nthe sample-rock action has a duration of 8\nthe calibrate action has a duration of 5\nthe communicate_rock_data action has a duration of 10\nthe communicate_soil_data action has a duration of 10\n\ncontext: the at_*_sample predicate indicates if a sample is at a waypoint, the equipped_for_*_analysis indicates if a rover is equipped for a specific type of analysis, \nstore_of indicates if a rover is equipped with the specified storage, empty is to qualify a storage of empty, full qualifies a storage as full, a storage can either be full or empty,\nhave_*_analysis indicates if a rover posseses a sample of a the * type, \nthe calibration_target predicate indicates the camera objective, visible_from predicate indicates if the objective is visible from a waypoint, \non_board predicate indicates if camera is on rover. The calibrated predicate indicates that the camera has been calibrated to objective and is ready to take_image.\nat_lander predicate indicates that a lander is at a waypoint, available indicates that the rover is available to communicate data or navigate, channel_free indicates if the lander\nis available to communicate, communicated_*_data, indicates that the rover communicated data of * type\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :durative-actions)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y)) \n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Si5_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd durative-actions requirement and modify actions to make them durative-actions\n\nthe actions should have the following durations\nnavigate: 5\nsample_soil: 10\nsample_rock: 8\ndrop: 1\ncalibrate: 5\ntake_image: 7\ncommunicate_soil_data: 10\ncommunicate_rock_data: 10\ncommunicate_image_data: 15\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n)\n\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) (visible ?y ?z))\n:effect (and (not (at ?x ?y)) (at ?x ?z))\n)\n\n(:action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s))\n:effect (and (not (empty ?s)) (full ?s) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p)))\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x) (empty ?s))\n:effect (and (not (empty ?s)) (full ?s) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p)))\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y))\n:effect (and (not (full ?y)) (empty ?y))\n)\n\n(:action calibrate\n:parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n:precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w) (on_board ?i ?r))\n:effect (calibrated ?i ?r)\n)\n\n(:action take_image\n:parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n:precondition (and (calibrated ?i ?r) (on_board ?i ?r) (equipped_for_imaging ?r) (supports ?i ?m) (visible_from ?o ?p) (at ?r ?p))\n:effect (and (have_image ?r ?o ?m) (not (calibrated ?i ?r)))\n)\n\n(:action communicate_soil_data\n:parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n:precondition (and (at ?r ?x) (at_lander ?l ?y) (have_soil_analysis ?r ?p) (visible ?x ?y) (available ?r) (channel_free ?l))\n:effect (and (not (available ?r)) (not (channel_free ?l)) (communicated_soil_data ?p) (available ?r) (channel_free ?l))\n)\n\n(:action communicate_rock_data\n:parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n:precondition (and (at ?r ?x) (at_lander ?l ?y) (have_rock_analysis ?r ?p) (visible ?x ?y) (available ?r) (channel_free ?l))\n:effect (and (not (available ?r)) (not (channel_free ?l)) (communicated_rock_data ?p) (available ?r) (channel_free ?l))\n)\n\n(:action communicate_image_data\n:parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n:precondition (and (at ?r ?x) (at_lander ?l ?y) (have_image ?r ?o ?m) (visible ?x ?y) (available ?r) (channel_free ?l))\n:effect (and (not (available ?r)) (not (channel_free ?l)) (communicated_image_data ?o ?m) (available ?r) (channel_free ?l))\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Si6_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nmodify the durations of the following durative-actions to the following\n\nThe modified actions should have the following durations\nnavigate: 5\nsample_soil: 10\nsample_rock: 8\ndrop: 1\ncalibrate: 5\ntake_image: 7\ncommunicate_soil_data: 10\ncommunicate_rock_data: 10\ncommunicate_image_data: 15\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :durative-actions)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 1)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y)) \n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))\n\t\t)\n)\n\n(:durative-action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_soil_sample ?p)) (at start (equipped_for_soil_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_soil_analysis ?x ?p)) (at end (not (at_soil_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p))  (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 1)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (at end (calibrated ?i ?r)) \n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 1)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 1)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 1)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 1)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Si7_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the visible predicate\n\nadd a condition to navigate to require the waypoint where the rover is going to be visible from it's current waypoint\nThe communicate data actions to require the lander waypoint to be visible from the rover waypoint \n\ncontext: The visible predicate indicates that a waypoint is visible from another waypoint\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :durative-actions)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y)) \n                \n\t    )\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))\n\t\t)\n)\n\n(:durative-action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 10)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_soil_sample ?p)) (at start (equipped_for_soil_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_soil_analysis ?x ?p)) (at end (not (at_soil_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p))  (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (at end (calibrated ?i ?r)) \n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n                      (over all (at ?r ?p))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) \n                    (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                    (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                    (at start (available ?r)) (at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Si8_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the channel_free predicate\n\nmodify the communicate_data actions to integrate the channel_free predicate\n\ncontext: channel_free predicate indicates that a lander is free to communicate, during the communication of data the channel is not free anymore, \nonce the data is communicated the channel is free once more\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :durative-actions)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\n)\n\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y)) \n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))\n\t\t)\n)\n\n(:durative-action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 10)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_soil_sample ?p)) (at start (equipped_for_soil_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_soil_analysis ?x ?p)) (at end (not (at_soil_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p))  (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (at end (calibrated ?i ?r)) \n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))\n            )\n :effect (and (at start (not (available ?r))) \n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))\n            )\n :effect (and (at start (not (available ?r))) (at end (communicated_rock_data ?p))(at end (available ?r))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) \n            )\n :effect (and (at start (not (available ?r))) (at end (communicated_image_data ?o ?m)) (at end (available ?r))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Si9_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nremove the long_range_communicate_*_data actions adn the orbital_satellite_channel\n\nRemove the long_range_communicate_*_data actions and the orbital satellite_channel\n\ncontext: the orbital_satellite_channel predicate indicates if satellite is in range for communication using long range communcation\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :durative-actions)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n            (orbital_satellite_available)\n\n)\n\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y)) \n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))\n\t\t)\n)\n\n(:durative-action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 10)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_soil_sample ?p)) (at start (equipped_for_soil_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_soil_analysis ?x ?p)) (at end (not (at_soil_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p))  (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (at end (calibrated ?i ?r)) \n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r))\n          )\n)\n\n(:durative-action long_range_communicate_soil_data\n :parameters (?r - rover ?p - waypoint ?x - waypoint)\n :duration (= ?duration 30)\n :condition (and (over all (at ?r ?x)) (at start (have_soil_analysis ?r ?p)) \n                   (at start (available ?r))(over all (orbital_satellite_available))\n            )\n :effect (and (at start (not (available ?r)))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))\n\t)\n)\n\n(:durative-action long_range_communicate_rock_data\n :parameters (?r - rover ?p - waypoint ?x - waypoint)\n :duration (= ?duration 30)\n :condition (and (over all (at ?r ?x)) (at start (have_rock_analysis ?r ?p)) \n                    (at start (available ?r))(over all (orbital_satellite_available))\n            )\n :effect (and (at start (not (available ?r)))(at end (communicated_rock_data ?p))(at end (available ?r))\n          )\n)\n\n\n(:durative-action long_range_communicate_image_data\n :parameters (?r - rover ?o - objective ?m - mode ?x - waypoint)\n :duration (= ?duration 45)\n :condition (and (over all (at ?r ?x)) (at start (have_image ?r ?o ?m)) \n                    (at start (available ?r)) (over all (orbital_satellite_available))\n            )\n :effect (and (at start (not (available ?r)))  (at end (communicated_image_data ?o ?m)) (at end (available ?r))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Si10_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the air data analysis predicates and actions\n\ncontext: equipped_for_air_analysis indicates if the rover is equipped with a module to analyse the air, \nhave_air_analysis indicates that the rover has an air sample from a specific waypoint, communicate_air_data indicates that the rover successfully communicated air data,\nat_air_sample indicates that an air sample is present at a waypoint\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :durative-actions)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_air_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (have_air_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_air_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n            (at_air_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y)) \n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))\n\t\t)\n)\n\n(:durative-action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 10)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_soil_sample ?p)) (at start (equipped_for_soil_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_soil_analysis ?x ?p)) (at end (not (at_soil_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p))  (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_air\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_air_sample ?p)) (at start (equipped_for_air_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_air_analysis ?x ?p))  (at end (not (at_air_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (at end (calibrated ?i ?r)) \n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r))\n          )\n)\n\n(:durative-action communicate_air_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_air_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_air_data ?p))(at end (available ?r))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Si0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil action and equipped_for_soil_analysis predicate\n\nThis requires adding 1 action and 1 predicate\npredicate: equipped_for_soil_analysis per rover\naction: sample-soil\n\nsample-soil:\nparameters: rover store waypoint\nduration: 10\nconditions: rover is at waypoint, the soil sample is at waypoint, the rover is equipped for soil analysis and has a store that is empty\neffect: store is no longer empty, it's full, the rover has the soil analysis and the soil sample is no longer at the waypoint\n\n(define (domain Rover)\n(:requirements :typing :durative-actions)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y)) \n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p))  (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (at end (calibrated ?i ?r)) \n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Si1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock actions and equipped_for_soil_analysis, equipped_for_rock_analysis predicates\n\nThis requires adding 2 action and 2 predicate\npredicate: equipped_for_soil_analysis per rover, equipped_for_rock_analysis per rover\naction: sample-soil, sample-rock\n\nsample-soil:\nparameters: rover store waypoint\nduration: 10\nconditions: rover is at waypoint, the soil sample is at waypoint, the rover is equipped for soil analysis and has a store that is empty\neffect: store is no longer empty, it's full, the rover has the soil analysis and the soil sample is no longer at the waypoint\n\nsample-rock:\nparameters: rover store waypoint\nduration: 8\nconditions: rover is at waypoint, the rock sample is at waypoint, the rover is equipped for rock analysis and has a store that is empty\neffect: store is no longer empty, it's full, the rover has the rock analysis and the rock sample is no longer at the waypoint\n\n(define (domain Rover)\n(:requirements :typing :durative-actions)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y)) \n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (at end (calibrated ?i ?r)) \n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Si2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock and calibrate actions and equipped_for_soil_analysis, equipped_for_rock_analysis, calibrated predicates\n\nThis requires adding 3 action and 3 predicate\npredicate: equipped_for_soil_analysis per rover, equipped_for_rock_analysis per rover, calibrated per camera per rover\naction: sample-soil, sample-rock, calibrate\n\nsample-soil:\nparameters: rover store waypoint\nduration: 10\nconditions: rover is at waypoint, the soil sample is at waypoint, the rover is equipped for soil analysis and has a store that is empty\neffect: store is no longer empty, it's full, the rover has the soil analysis and the soil sample is no longer at the waypoint\n\nsample-rock:\nparameters: rover store waypoint\nduration: 8\nconditions: rover is at waypoint, the rock sample is at waypoint, the rover is equipped for rock analysis and has a store that is empty\neffect: store is no longer empty, it's full, the rover has the rock analysis and the rock sample is no longer at the waypoint\n\ncalibrate:\nparameters: rover camera objective waypoint\nduration: 5\nconditions: rover must be equipped for imaging, the objective must be a calibration target for the camera, the rover must be at the waypoint and the objective\n must be visible from the waypoint, the camera must be on board the rover\neffect: camera on the rover is calibrated\n\n(define (domain Rover)\n(:requirements :typing :durative-actions)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y)) \n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Si3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock, communicate_rock_data and calibrate actions and equipped_for_soil_analysis, equipped_for_rock_analysis, calibrated, have_soil_analysis, have_rock_analysis and communicated_rock_data predicates\n\nThis requires adding 4 action and 6 predicate\npredicate: equipped_for_soil_analysis per rover, equipped_for_rock_analysis per rover, calibrated per camera per rover, have_soil_analysis per rover per waypoint, have_rock_analysis per rover per waypoint and communicated_rock_data per waypoint\naction: sample-soil, sample-rock, calibrate, communicate_rock_data\n\nsample-soil:\nparameters: rover store waypoint\nduration: 10\nconditions: rover is at waypoint, the soil sample is at waypoint, the rover is equipped for soil analysis and has a store that is empty\neffect: store is no longer empty, it's full, the rover has the soil analysis and the soil sample is no longer at the waypoint\n\nsample-rock:\nparameters: rover store waypoint\nduration: 8\nconditions: rover is at waypoint, the rock sample is at waypoint, the rover is equipped for rock analysis and has a store that is empty\neffect: store is no longer empty, it's full, the rover has the rock analysis and the rock sample is no longer at the waypoint\n\ncalibrate:\nparameters: rover camera objective waypoint\nduration: 5\nconditions: rover must be equipped for imaging, the objective must be a calibration target for the camera, the rover must be at the waypoint and the objective\n must be visible from the waypoint, the camera must be on board the rover\neffect: camera on the rover is calibrated\n\ncommunicate_rock_data:\nparameters: rover lander waypoint waypoint waypoint\nduration: 10\nconditions: rover is at a waypoint, lander is at a waypoint, the rover waypoint and lander waypoint are in visible range, \nthe rover has the rock analysis from the waypoint where it took sample the rover is available and the communication channel is free\neffect: rover is temporarily unavailable, channel is temporarily not free, rover becomes available again, channel becomes free\n\n(define (domain Rover)\n(:requirements :typing :durative-actions)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y)) \n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Si4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock, communicate_rock_data, communicate_soil_data and calibrate actions and equipped_for_soil_analysis, equipped_for_rock_analysis, calibrated, have_soil_analysis, have_rock_analysis, communicated_rock_data, communicate_soil_data predicates\n\nThis requires adding 5 action and 7 predicate\npredicate: equipped_for_soil_analysis per rover, equipped_for_rock_analysis per rover, calibrated per camera per rover, have_soil_analysis per rover per waypoint, have_rock_analysis per rover per waypoint and communicated_rock_data per waypoint\naction: sample-soil, sample-rock, calibrate, communicate_rock_data, communicate_soil_daata\n\nsample-soil:\nparameters: rover store waypoint\nduration: 10\nconditions: rover is at waypoint, the soil sample is at waypoint, the rover is equipped for soil analysis and has a store that is empty\neffect: store is no longer empty, it's full, the rover has the soil analysis and the soil sample is no longer at the waypoint\n\nsample-rock:\nparameters: rover store waypoint\nduration: 8\nconditions: rover is at waypoint, the rock sample is at waypoint, the rover is equipped for rock analysis and has a store that is empty\neffect: store is no longer empty, it's full, the rover has the rock analysis and the rock sample is no longer at the waypoint\n\ncalibrate:\nparameters: rover camera objective waypoint\nduration: 5\nconditions: rover must be equipped for imaging, the objective must be a calibration target for the camera, the rover must be at the waypoint and the objective\n must be visible from the waypoint, the camera must be on board the rover\neffect: camera on the rover is calibrated\n\ncommunicate_rock_data:\nparameters: rover lander waypoint waypoint waypoint\nduration: 10\nconditions: rover is at a waypoint, lander is at a waypoint, the rover waypoint and lander waypoint are in visible range, \nthe rover has the rock analysis from the waypoint where it took sample the rover is available and the communication channel is free\neffect: rover is temporarily unavailable, channel is temporarily not free, rover becomes available again, channel becomes free\n\ncommunicate_soil_data:\nparameters: rover lander waypoint waypoint waypoint\nduration: 10\nconditions: rover is at a waypoint, lander is at a waypoint, the rover waypoint and lander waypoint are in visible range, \nthe rover has the soil analysis from the waypoint where it took sample the rover is available and the communication channel is free\neffect: rover is temporarily unavailable, channel is temporarily not free, rover becomes available again, channel becomes free\n\n(define (domain Rover)\n(:requirements :typing :durative-actions)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y)) \n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Si5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd durative-actions requirement and modify actions to make them durative-actions\n\nThe modified actions should have the following durations\nnavigate: 5\nsample_soil: 10\nsample_rock: 8\ndrop: 1\ncalibrate: 5\ntake_image: 7\ncommunicate_soil_data: 10\ncommunicate_rock_data: 10\ncommunicate_image_data: 15\n\n(define (domain Rover)\n(:requirements :typing)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n)\n\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) (visible ?y ?z))\n:effect (and (not (at ?x ?y)) (at ?x ?z))\n)\n\n(:action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s))\n:effect (and (not (empty ?s)) (full ?s) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p)))\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x) (empty ?s))\n:effect (and (not (empty ?s)) (full ?s) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p)))\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y))\n:effect (and (not (full ?y)) (empty ?y))\n)\n\n(:action calibrate\n:parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n:precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w) (on_board ?i ?r))\n:effect (calibrated ?i ?r)\n)\n\n(:action take_image\n:parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n:precondition (and (calibrated ?i ?r) (on_board ?i ?r) (equipped_for_imaging ?r) (supports ?i ?m) (visible_from ?o ?p) (at ?r ?p))\n:effect (and (have_image ?r ?o ?m) (not (calibrated ?i ?r)))\n)\n\n(:action communicate_soil_data\n:parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n:precondition (and (at ?r ?x) (at_lander ?l ?y) (have_soil_analysis ?r ?p) (visible ?x ?y) (available ?r) (channel_free ?l))\n:effect (and (not (available ?r)) (not (channel_free ?l)) (communicated_soil_data ?p) (available ?r) (channel_free ?l))\n)\n\n(:action communicate_rock_data\n:parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n:precondition (and (at ?r ?x) (at_lander ?l ?y) (have_rock_analysis ?r ?p) (visible ?x ?y) (available ?r) (channel_free ?l))\n:effect (and (not (available ?r)) (not (channel_free ?l)) (communicated_rock_data ?p) (available ?r) (channel_free ?l))\n)\n\n(:action communicate_image_data\n:parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n:precondition (and (at ?r ?x) (at_lander ?l ?y) (have_image ?r ?o ?m) (visible ?x ?y) (available ?r) (channel_free ?l))\n:effect (and (not (available ?r)) (not (channel_free ?l)) (communicated_image_data ?o ?m) (available ?r) (channel_free ?l))\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Si6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nmodify the durations of the following durative-actions to the following\n\nThe modified actions should have the following durations\nnavigate: 5\nsample_soil: 10\nsample_rock: 8\ndrop: 1\ncalibrate: 5\ntake_image: 7\ncommunicate_soil_data: 10\ncommunicate_rock_data: 10\ncommunicate_image_data: 15\n\n(define (domain Rover)\n(:requirements :typing :durative-actions)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 1)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y)) \n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))\n\t\t)\n)\n\n(:durative-action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_soil_sample ?p)) (at start (equipped_for_soil_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_soil_analysis ?x ?p)) (at end (not (at_soil_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p))  (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 1)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (at end (calibrated ?i ?r)) \n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 1)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 1)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 1)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 1)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Si7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the visible predicate\n\nThis requires adding 1 predicate and modifying 4 actions\npredicate: visible waypoint is visible from another waypoint\n\nactions:\nnavigate action requires the waypoint the rover is navigating to be visible by the waypoint that the rover is currently at\n\ncommunicate_soil_data requires the lander waypoint to be visible from the rover waypoint\ncommunicate_rock_data requires the lander waypoint to be visible from the rover waypoint\ncommunicate_image_data requires the lander waypoint to be visible from the rover waypoint\n\n\n(define (domain Rover)\n(:requirements :typing :durative-actions)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y)) \n                \n\t    )\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))\n\t\t)\n)\n\n(:durative-action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 10)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_soil_sample ?p)) (at start (equipped_for_soil_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_soil_analysis ?x ?p)) (at end (not (at_soil_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p))  (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (at end (calibrated ?i ?r)) \n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n                      (over all (at ?r ?p))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) \n                    (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                    (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                    (at start (available ?r)) (at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Si8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the channel_free predicate\n\nThis requires adding 1 predicate and modifying 3 actions\npredicate: channel_free per lander\n\nactions\ncommunicate_soil_data: The lander channel must be free to start a communication. While the rover and lander are communicating the channel is not free and then becomes free again once the data is communicated\ncommunicate_rock_data: The lander channel must be free to start a communication. While the rover and lander are communicating the channel is not free and then becomes free again once the data is communicated\ncommunicate_image_data: The lander channel must be free to start a communication. While the rover and lander are communicating the channel is not free and then becomes free again once the data is communicated\n\n(define (domain Rover)\n(:requirements :typing :durative-actions)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\n)\n\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y)) \n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))\n\t\t)\n)\n\n(:durative-action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 10)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_soil_sample ?p)) (at start (equipped_for_soil_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_soil_analysis ?x ?p)) (at end (not (at_soil_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p))  (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (at end (calibrated ?i ?r)) \n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))\n            )\n :effect (and (at start (not (available ?r))) \n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))\n            )\n :effect (and (at start (not (available ?r))) (at end (communicated_rock_data ?p))(at end (available ?r))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) \n            )\n :effect (and (at start (not (available ?r))) (at end (communicated_image_data ?o ?m)) (at end (available ?r))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Si9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nremove the long_range_communicate_*_data actions adn the orbital_satellite_channel\n\nThis requires removing 1 predicate and 3 actions\npredicate: orbital_satellite_channel indicates if orbital satellite is available to communicate\nactions:\n\nRemove long_range_communicate_image_data\nRemove long_range_communicate_rock_data\nremove long_range_communicate_soil_data\n\n(define (domain Rover)\n(:requirements :typing :durative-actions)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n            (orbital_satellite_available)\n\n)\n\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y)) \n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))\n\t\t)\n)\n\n(:durative-action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 10)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_soil_sample ?p)) (at start (equipped_for_soil_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_soil_analysis ?x ?p)) (at end (not (at_soil_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p))  (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (at end (calibrated ?i ?r)) \n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r))\n          )\n)\n\n(:durative-action long_range_communicate_soil_data\n :parameters (?r - rover ?p - waypoint ?x - waypoint)\n :duration (= ?duration 30)\n :condition (and (over all (at ?r ?x)) (at start (have_soil_analysis ?r ?p)) \n                   (at start (available ?r))(over all (orbital_satellite_available))\n            )\n :effect (and (at start (not (available ?r)))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))\n\t)\n)\n\n(:durative-action long_range_communicate_rock_data\n :parameters (?r - rover ?p - waypoint ?x - waypoint)\n :duration (= ?duration 30)\n :condition (and (over all (at ?r ?x)) (at start (have_rock_analysis ?r ?p)) \n                    (at start (available ?r))(over all (orbital_satellite_available))\n            )\n :effect (and (at start (not (available ?r)))(at end (communicated_rock_data ?p))(at end (available ?r))\n          )\n)\n\n\n(:durative-action long_range_communicate_image_data\n :parameters (?r - rover ?o - objective ?m - mode ?x - waypoint)\n :duration (= ?duration 45)\n :condition (and (over all (at ?r ?x)) (at start (have_image ?r ?o ?m)) \n                    (at start (available ?r)) (over all (orbital_satellite_available))\n            )\n :effect (and (at start (not (available ?r)))  (at end (communicated_image_data ?o ?m)) (at end (available ?r))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Si10", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the air data analysis predicates and actions\n\nThis requires removing 4 predicates and 2 actions\npredicates: equipped_for_air_analysis, have_air_analysis, communicate_air_data, at_air_sample\nactions\nRemove sample_air\nRemove communicate_air_data\n\n(define (domain Rover)\n(:requirements :typing :durative-actions)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_air_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (have_air_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_air_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n            (at_air_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y)) \n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))\n\t\t)\n)\n\n(:durative-action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 10)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_soil_sample ?p)) (at start (equipped_for_soil_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_soil_analysis ?x ?p)) (at end (not (at_soil_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p))  (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_air\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_air_sample ?p)) (at start (equipped_for_air_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_air_analysis ?x ?p))  (at end (not (at_air_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (at end (calibrated ?i ?r)) \n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r))\n          )\n)\n\n(:durative-action communicate_air_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_air_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_air_data ?p))(at end (available ?r))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_St0_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil action and equipped_for_soil_analysis predicate\n\ncontext: the at_*_sample predicate indicates if a sample is at a waypoint, the equipped_for_*_analysis indicates if a rover is equipped for a specific type of analysis, \nstore_of indicates if a rover is equipped with the specified storage, empty is to qualify a storage of empty, full qualifies a storage as full, a storage can either be full or empty,\nhave_*_analysis indicates if a rover posseses a sample of a the * type\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z)\n\t    )\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (calibrated ?i ?r) \n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))\n\t\t)\n)\n\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)\n\t\t(communicated_soil_data ?p)(available ?r)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_rock_data ?p)(available ?r)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_image_data ?o ?m)(available ?r)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_St1_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock actions and equipped_for_soil_analysis, equipped_for_rock_analysis predicates\n\ncontext: the at_*_sample predicate indicates if a sample is at a waypoint, the equipped_for_*_analysis indicates if a rover is equipped for a specific type of analysis, \nstore_of indicates if a rover is equipped with the specified storage, empty is to qualify a storage of empty, full qualifies a storage as full, a storage can either be full or empty,\nhave_*_analysis indicates if a rover posseses a sample of a the * type\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z)\n\t    )\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (calibrated ?i ?r) \n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))\n\t\t)\n)\n\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)\n\t\t(communicated_soil_data ?p)(available ?r)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_rock_data ?p)(available ?r)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_image_data ?o ?m)(available ?r)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_St2_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock and calibrate actions and equipped_for_soil_analysis, equipped_for_rock_analysis, calibrated predicates\n\ncontext: the at_*_sample predicate indicates if a sample is at a waypoint, the equipped_for_*_analysis indicates if a rover is equipped for a specific type of analysis, \nstore_of indicates if a rover is equipped with the specified storage, empty is to qualify a storage of empty, full qualifies a storage as full, a storage can either be full or empty,\nhave_*_analysis indicates if a rover posseses a sample of a the * type, \nthe calibration_target predicate indicates the camera objective, visible_from predicate indicates if the objective is visible from a waypoint, \non_board predicate indicates if camera is on rover. The calibrated predicate indicates that the camera has been calibrated to objective and is ready to take_image. \n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z)\n\t    )\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\t)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))\n\t\t)\n)\n\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)\n\t\t(communicated_soil_data ?p)(available ?r)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_rock_data ?p)(available ?r)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_image_data ?o ?m)(available ?r)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_St3_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock, communicate_rock_data and calibrate actions and equipped_for_soil_analysis, equipped_for_rock_analysis, calibrated, have_soil_analysis, have_rock_analysis and communicated_rock_data predicates\n\ncontext: the at_*_sample predicate indicates if a sample is at a waypoint, the equipped_for_*_analysis indicates if a rover is equipped for a specific type of analysis, \nstore_of indicates if a rover is equipped with the specified storage, empty is to qualify a storage of empty, full qualifies a storage as full, a storage can either be full or empty,\nhave_*_analysis indicates if a rover posseses a sample of a the * type, \nthe calibration_target predicate indicates the camera objective, visible_from predicate indicates if the objective is visible from a waypoint, \non_board predicate indicates if camera is on rover. The calibrated predicate indicates that the camera has been calibrated to objective and is ready to take_image.\nat_lander predicate indicates that a lander is at a waypoint, available indicates that the rover is available to communicate data or navigate, channel_free indicates if the lander\nis available to communicate, communicated_*_data, indicates that the rover communicated data of * type\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z)\n\t    )\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))\n\t\t)\n)\n\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_rock_data ?p)(available ?r)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_image_data ?o ?m)(available ?r)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_St4_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock, communicate_rock_data, communicate_soil_data and calibrate actions and equipped_for_soil_analysis, equipped_for_rock_analysis, calibrated, have_soil_analysis, have_rock_analysis, communicated_rock_data, communicate_soil_data predicates\n\ncontext: the at_*_sample predicate indicates if a sample is at a waypoint, the equipped_for_*_analysis indicates if a rover is equipped for a specific type of analysis, \nstore_of indicates if a rover is equipped with the specified storage, empty is to qualify a storage of empty, full qualifies a storage as full, a storage can either be full or empty,\nhave_*_analysis indicates if a rover posseses a sample of a the * type, \nthe calibration_target predicate indicates the camera objective, visible_from predicate indicates if the objective is visible from a waypoint, \non_board predicate indicates if camera is on rover. The calibrated predicate indicates that the camera has been calibrated to objective and is ready to take_image.\nat_lander predicate indicates that a lander is at a waypoint, available indicates that the rover is available to communicate data or navigate, channel_free indicates if the lander\nis available to communicate, communicated_*_data, indicates that the rover communicated data of * type\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z)\n\t    )\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))\n\t\t)\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_image_data ?o ?m)(available ?r)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_St5_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the visible predicate\n\nadd a condition to navigate to require the waypoint where the rover is going to be visible from it's current waypoint\nThe communicate data actions to require the lander waypoint to be visible from the rover waypoint \n\ncontext: The visible predicate indicates that a waypoint is visible from another waypoint\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n               \n\t    )\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p))\n\t\t)\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (calibrated ?i ?r) \n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))\n\t\t)\n)\n\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)\n\t\t(communicated_soil_data ?p)(available ?r)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)\n                  (available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_rock_data ?p)(available ?r)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_image_data ?o ?m)(available ?r)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_St6_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the channel_free predicate\n\nmodify the communicate_data actions to integrate the channel_free predicate\n\ncontext: channel_free predicate indicates that a lander is free to communicate, during the communication of data the channel is not free anymore, \nonce the data is communicated the channel is free once more\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\n)\n\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z)\n\t    )\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p))\n\t\t)\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (calibrated ?i ?r) \n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))\n\t\t)\n)\n\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)\n            )\n :effect (and (not (available ?r))\n\t\t(communicated_soil_data ?p)(available ?r)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)\n                   (visible ?x ?y)(available ?r)\n            )\n :effect (and (not (available ?r))(communicated_rock_data ?p)(available ?r)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)\n            )\n :effect (and (not (available ?r))(communicated_image_data ?o ?m)(available ?r)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_St7_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nremove the long_range_communicate_*_data actions adn the orbital_satellite_channel\n\nRemove the long_range_communicate_*_data actions and the orbital satellite_channel\n\ncontext: the orbital_satellite_channel predicate indicates if satellite is in range for communication using long range communcation\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n            (orbital_satellite_available)\n\n)\n\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z)\n\t    )\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p))\n\t\t)\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (calibrated ?i ?r) \n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))\n\t\t)\n)\n\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)\n\t\t(communicated_soil_data ?p)(available ?r)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_rock_data ?p)(available ?r)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_image_data ?o ?m)(available ?r)\n          )\n)\n\n(:action long_range_communicate_soil_data\n :parameters (?r - rover ?p - waypoint ?x - waypoint)\n :precondition (and (at ?r ?x)(have_soil_analysis ?r ?p) \n                   (available ?r)(orbital_satellite_available)\n            )\n :effect (and (not (available ?r))\n\t\t(communicated_soil_data ?p)(available ?r)\n\t)\n)\n\n(:action long_range_communicate_rock_data\n :parameters (?r - rover ?p - waypoint ?x - waypoint)\n :precondition (and (at ?r ?x)(have_rock_analysis ?r ?p)\n                   (available ?r)(orbital_satellite_available)\n            )\n :effect (and (not (available ?r))(communicated_rock_data ?p)(available ?r)\n          )\n)\n\n\n(:action long_range_communicate_image_data\n :parameters (?r - rover ?o - objective ?m - mode ?x - waypoint)\n :precondition (and (at ?r ?x)(have_image ?r ?o ?m)(available ?r)(orbital_satellite_available)\n            )\n :effect (and (not (available ?r))(communicated_image_data ?o ?m)(available ?r)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_St8_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the air data analysis predicates and actions\n\ncontext: equipped_for_air_analysis indicates if the rover is equipped with a module to analyse the air, \nhave_air_analysis indicates that the rover has an air sample from a specific waypoint, communicate_air_data indicates that the rover successfully communicated air data,\nat_air_sample indicates that an air sample is present at a waypoint\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_air_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_air_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n            (at_air_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z)\n\t    )\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p))\n\t\t)\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))\n\t\t)\n)\n\n(:action sample_air\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_air_sample ?p) (equipped_for_air_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (have_air_analysis ?x ?p) (not (at_air_sample ?p))\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (calibrated ?i ?r) \n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))\n\t\t)\n)\n\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)\n\t\t(communicated_soil_data ?p)(available ?r)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_rock_data ?p)(available ?r)\n          )\n)\n\n(:action communicate_air_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_air_analysis ?r ?p)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_air_data ?p)(available ?r)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_image_data ?o ?m)(available ?r)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_St0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil action and equipped_for_soil_analysis predicate\n\nThis requires adding 1 action and 1 predicate\npredicate: equipped_for_soil_analysis per rover\naction: sample-soil\n\nsample-soil:\nparameters: rover store waypoint\nconditions: rover is at waypoint, the soil sample is at waypoint, the rover is equipped for soil analysis and has a store that is empty\neffect: store is no longer empty, it's full, the rover has the soil analysis and the soil sample is no longer at the waypoint\n\n(define (domain Rover)\n(:requirements :typing)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z)\n\t    )\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (calibrated ?i ?r) \n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))\n\t\t)\n)\n\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)\n\t\t(communicated_soil_data ?p)(available ?r)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_rock_data ?p)(available ?r)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_image_data ?o ?m)(available ?r)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_St1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock actions and equipped_for_soil_analysis, equipped_for_rock_analysis predicates\n\nThis requires adding 2 action and 2 predicate\npredicate: equipped_for_soil_analysis per rover, equipped_for_rock_analysis per rover\naction: sample-soil, sample-rock\n\nsample-soil:\nparameters: rover store waypoint\nconditions: rover is at waypoint, the soil sample is at waypoint, the rover is equipped for soil analysis and has a store that is empty\neffect: store is no longer empty, it's full, the rover has the soil analysis and the soil sample is no longer at the waypoint\n\nsample-rock:\nparameters: rover store waypoint\nconditions: rover is at waypoint, the rock sample is at waypoint, the rover is equipped for rock analysis and has a store that is empty\neffect: store is no longer empty, it's full, the rover has the rock analysis and the rock sample is no longer at the waypoint\n\n(define (domain Rover)\n(:requirements :typing)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z)\n\t    )\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (calibrated ?i ?r) \n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))\n\t\t)\n)\n\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)\n\t\t(communicated_soil_data ?p)(available ?r)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_rock_data ?p)(available ?r)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_image_data ?o ?m)(available ?r)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_St2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock and calibrate actions and equipped_for_soil_analysis, equipped_for_rock_analysis, calibrated predicates\n\nThis requires adding 3 action and 3 predicate\npredicate: equipped_for_soil_analysis per rover, equipped_for_rock_analysis per rover, calibrated per camera per rover\naction: sample-soil, sample-rock, calibrate\n\nsample-soil:\nparameters: rover store waypoint\nconditions: rover is at waypoint, the soil sample is at waypoint, the rover is equipped for soil analysis and has a store that is empty\neffect: store is no longer empty, it's full, the rover has the soil analysis and the soil sample is no longer at the waypoint\n\nsample-rock:\nparameters: rover store waypoint\nconditions: rover is at waypoint, the rock sample is at waypoint, the rover is equipped for rock analysis and has a store that is empty\neffect: store is no longer empty, it's full, the rover has the rock analysis and the rock sample is no longer at the waypoint\n\ncalibrate:\nparameters: rover camera objective waypoint\nconditions: rover must be equipped for imaging, the objective must be a calibration target for the camera, the rover must be at the waypoint and the objective\n must be visible from the waypoint, the camera must be on board the rover\neffect: camera on the rover is calibrated\n\n(define (domain Rover)\n(:requirements :typing)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z)\n\t    )\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\t)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))\n\t\t)\n)\n\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)\n\t\t(communicated_soil_data ?p)(available ?r)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_rock_data ?p)(available ?r)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_image_data ?o ?m)(available ?r)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_St3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock, communicate_rock_data and calibrate actions and equipped_for_soil_analysis, equipped_for_rock_analysis, calibrated, have_soil_analysis, have_rock_analysis and communicated_rock_data predicates\n\nThis requires adding 4 action and 6 predicate\npredicate: equipped_for_soil_analysis per rover, equipped_for_rock_analysis per rover, calibrated per camera per rover, have_soil_analysis per rover per waypoint, have_rock_analysis per rover per waypoint and communicated_rock_data per waypoint\naction: sample-soil, sample-rock, calibrate, communicate_rock_data\n\nsample-soil:\nparameters: rover store waypoint\nconditions: rover is at waypoint, the soil sample is at waypoint, the rover is equipped for soil analysis and has a store that is empty\neffect: store is no longer empty, it's full, the rover has the soil analysis and the soil sample is no longer at the waypoint\n\nsample-rock:\nparameters: rover store waypoint\nconditions: rover is at waypoint, the rock sample is at waypoint, the rover is equipped for rock analysis and has a store that is empty\neffect: store is no longer empty, it's full, the rover has the rock analysis and the rock sample is no longer at the waypoint\n\ncalibrate:\nparameters: rover camera objective waypoint\nconditions: rover must be equipped for imaging, the objective must be a calibration target for the camera, the rover must be at the waypoint and the objective\n must be visible from the waypoint, the camera must be on board the rover\neffect: camera on the rover is calibrated\n\ncommunicate_rock_data:\nparameters: rover lander waypoint waypoint waypoint\nconditions: rover is at a waypoint, lander is at a waypoint, the rover waypoint and lander waypoint are in visible range, \nthe rover has the rock analysis from the waypoint where it took sample the rover is available and the communication channel is free\neffect: rover is temporarily unavailable, channel is temporarily not free, rover becomes available again, channel becomes free\n\n(define (domain Rover)\n(:requirements :typing)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z)\n\t    )\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))\n\t\t)\n)\n\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_rock_data ?p)(available ?r)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_image_data ?o ?m)(available ?r)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_St4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock, communicate_rock_data, communicate_soil_data and calibrate actions and equipped_for_soil_analysis, equipped_for_rock_analysis, calibrated, have_soil_analysis, have_rock_analysis, communicated_rock_data, communicate_soil_data predicates\n\nThis requires adding 5 action and 7 predicate\npredicate: equipped_for_soil_analysis per rover, equipped_for_rock_analysis per rover, calibrated per camera per rover, have_soil_analysis per rover per waypoint, have_rock_analysis per rover per waypoint and communicated_rock_data per waypoint\naction: sample-soil, sample-rock, calibrate, communicate_rock_data, communicate_soil_daata\n\nsample-soil:\nparameters: rover store waypoint\nconditions: rover is at waypoint, the soil sample is at waypoint, the rover is equipped for soil analysis and has a store that is empty\neffect: store is no longer empty, it's full, the rover has the soil analysis and the soil sample is no longer at the waypoint\n\nsample-rock:\nparameters: rover store waypoint\nconditions: rover is at waypoint, the rock sample is at waypoint, the rover is equipped for rock analysis and has a store that is empty\neffect: store is no longer empty, it's full, the rover has the rock analysis and the rock sample is no longer at the waypoint\n\ncalibrate:\nparameters: rover camera objective waypoint\nconditions: rover must be equipped for imaging, the objective must be a calibration target for the camera, the rover must be at the waypoint and the objective\n must be visible from the waypoint, the camera must be on board the rover\neffect: camera on the rover is calibrated\n\ncommunicate_rock_data:\nparameters: rover lander waypoint waypoint waypoint\nconditions: rover is at a waypoint, lander is at a waypoint, the rover waypoint and lander waypoint are in visible range, \nthe rover has the rock analysis from the waypoint where it took sample the rover is available and the communication channel is free\neffect: rover is temporarily unavailable, channel is temporarily not free, rover becomes available again, channel becomes free\n\ncommunicate_soil_data:\nparameters: rover lander waypoint waypoint waypoint\nconditions: rover is at a waypoint, lander is at a waypoint, the rover waypoint and lander waypoint are in visible range, \nthe rover has the soil analysis from the waypoint where it took sample the rover is available and the communication channel is free\neffect: rover is temporarily unavailable, channel is temporarily not free, rover becomes available again, channel becomes free\n\n(define (domain Rover)\n(:requirements :typing)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z)\n\t    )\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))\n\t\t)\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_image_data ?o ?m)(available ?r)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_St5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the visible predicate\n\nThis requires adding 1 predicate and modifying 4 actions\npredicate: visible waypoint is visible from another waypoint\n\nactions:\nnavigate action requires the waypoint the rover is navigating to be visible by the waypoint that the rover is currently at\n\ncommunicate_soil_data requires the lander waypoint to be visible from the rover waypoint\ncommunicate_rock_data requires the lander waypoint to be visible from the rover waypoint\ncommunicate_image_data requires the lander waypoint to be visible from the rover waypoint\n\n\n(define (domain Rover)\n(:requirements :typing)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n               \n\t    )\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p))\n\t\t)\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (calibrated ?i ?r) \n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))\n\t\t)\n)\n\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)\n\t\t(communicated_soil_data ?p)(available ?r)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)\n                  (available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_rock_data ?p)(available ?r)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_image_data ?o ?m)(available ?r)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_St6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the channel_free predicate\n\nThis requires adding 1 predicate and modifying 3 actions\npredicate: channel_free per lander\n\nactions\ncommunicate_soil_data: The lander channel must be free to start a communication. While the rover and lander are communicating the channel is not free and then becomes free again once the data is communicated\ncommunicate_rock_data: The lander channel must be free to start a communication. While the rover and lander are communicating the channel is not free and then becomes free again once the data is communicated\ncommunicate_image_data: The lander channel must be free to start a communication. While the rover and lander are communicating the channel is not free and then becomes free again once the data is communicated\n\n(define (domain Rover)\n(:requirements :typing)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\n)\n\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z)\n\t    )\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p))\n\t\t)\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (calibrated ?i ?r) \n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))\n\t\t)\n)\n\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)\n            )\n :effect (and (not (available ?r))\n\t\t(communicated_soil_data ?p)(available ?r)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)\n                   (visible ?x ?y)(available ?r)\n            )\n :effect (and (not (available ?r))(communicated_rock_data ?p)(available ?r)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)\n            )\n :effect (and (not (available ?r))(communicated_image_data ?o ?m)(available ?r)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_St7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nremove the long_range_communicate_*_data actions adn the orbital_satellite_channel\n\nThis requires removing 1 predicate and 3 actions\npredicate: orbital_satellite_channel indicates if orbital satellite is available to communicate\nactions:\n\nRemove long_range_communicate_image_data\nRemove long_range_communicate_rock_data\nremove long_range_communicate_soil_data\n\n(define (domain Rover)\n(:requirements :typing)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n            (orbital_satellite_available)\n\n)\n\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z)\n\t    )\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p))\n\t\t)\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (calibrated ?i ?r) \n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))\n\t\t)\n)\n\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)\n\t\t(communicated_soil_data ?p)(available ?r)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_rock_data ?p)(available ?r)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_image_data ?o ?m)(available ?r)\n          )\n)\n\n(:action long_range_communicate_soil_data\n :parameters (?r - rover ?p - waypoint ?x - waypoint)\n :precondition (and (at ?r ?x)(have_soil_analysis ?r ?p) \n                   (available ?r)(orbital_satellite_available)\n            )\n :effect (and (not (available ?r))\n\t\t(communicated_soil_data ?p)(available ?r)\n\t)\n)\n\n(:action long_range_communicate_rock_data\n :parameters (?r - rover ?p - waypoint ?x - waypoint)\n :precondition (and (at ?r ?x)(have_rock_analysis ?r ?p)\n                   (available ?r)(orbital_satellite_available)\n            )\n :effect (and (not (available ?r))(communicated_rock_data ?p)(available ?r)\n          )\n)\n\n\n(:action long_range_communicate_image_data\n :parameters (?r - rover ?o - objective ?m - mode ?x - waypoint)\n :precondition (and (at ?r ?x)(have_image ?r ?o ?m)(available ?r)(orbital_satellite_available)\n            )\n :effect (and (not (available ?r))(communicated_image_data ?o ?m)(available ?r)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_St8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the air data analysis predicates and actions\n\nThis requires removing 4 predicates and 2 actions\npredicates: equipped_for_air_analysis, have_air_analysis, communicate_air_data, at_air_sample\nactions\nRemove sample_air\nRemove communicate_air_data\n\n(define (domain Rover)\n(:requirements :typing)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_air_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_air_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n            (at_air_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\n)\n\n\t\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) \n                (visible ?y ?z)\n\t    )\n:effect (and (not (at ?x ?y)) (at ?x ?z)\n\t\t)\n)\n\n(:action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p))\n\t\t)\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p))\n\t\t)\n)\n\n(:action sample_air\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_air_sample ?p) (equipped_for_air_analysis ?x) (store_of ?s ?x)(empty ?s)\n\t\t)\n:effect (and (not (empty ?s)) (full ?s) (have_air_analysis ?x ?p) (not (at_air_sample ?p))\n\t\t)\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y)\n\t\t)\n:effect (and (not (full ?y)) (empty ?y)\n\t)\n)\n\n(:action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w)(on_board ?i ?r)\n\t\t)\n :effect (calibrated ?i ?r) \n)\n\n\n\n\n(:action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :precondition (and (calibrated ?i ?r)\n\t\t\t (on_board ?i ?r)\n                      (equipped_for_imaging ?r)\n                      (supports ?i ?m)\n\t\t\t  (visible_from ?o ?p)\n                     (at ?r ?p)\n               )\n :effect (and (have_image ?r ?o ?m)(not (calibrated ?i ?r))\n\t\t)\n)\n\n\n(:action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_soil_analysis ?r ?p) \n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)\n\t\t(communicated_soil_data ?p)(available ?r)\n\t)\n)\n\n(:action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_rock_analysis ?r ?p)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_rock_data ?p)(available ?r)\n          )\n)\n\n(:action communicate_air_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_air_analysis ?r ?p)\n                   (visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_air_data ?p)(available ?r)\n          )\n)\n\n\n(:action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :precondition (and (at ?r ?x)(at_lander ?l ?y)(have_image ?r ?o ?m)(visible ?x ?y)(available ?r)(channel_free ?l)\n            )\n :effect (and (not (available ?r))(not (channel_free ?l))(channel_free ?l)(communicated_image_data ?o ?m)(available ?r)\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti0_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil action and equipped_for_soil_analysis predicate\n\nthe sample-soil has a duration of 10 and has an energy cost of 3\n\ncontext: the at_*_sample predicate indicates if a sample is at a waypoint, the equipped_for_*_analysis indicates if a rover is equipped for a specific type of analysis, \nstore_of indicates if a rover is equipped with the specified storage, empty is to qualify a storage of empty, full qualifies a storage as full, a storage can either be full or empty,\nhave_*_analysis indicates if a rover posseses a sample of a the * type, the rover need specific amounts of energy to perform various actions\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :durative-actions :fluents :duration-inequalities)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t      (in_sun ?w - waypoint)\n\n)\n(:functions (energy ?r - rover) (recharge-rate ?x - rover))\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y))  (at start (>= (energy ?x) 8))\n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (decrease (energy ?x) 8)) (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action recharge\n:parameters (?x - rover ?w - waypoint)\n:duration (= ?duration (/ (- 80 (energy ?x)) (recharge-rate ?x)))\n:condition (and (at start (at ?x ?w)) (over all (at ?x ?w)) \n\t\t\t\t\t(at start (in_sun ?w)) (at start (<= (energy ?x) 80)))\n:effect (and (at end (increase (energy ?x) (* ?duration (recharge-rate ?x)))))\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (>= (energy ?x) 5)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p)) (at start (decrease (energy ?x) 5)) (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (>= (energy ?r) 2)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (and (at end (calibrated ?i ?r)) (at start (decrease (energy ?r) 2)))\n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n                      (at start (>= (energy ?r) 1))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at start (decrease (energy ?r) 1)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) (at start (>= (energy ?r) 4))\n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))(at start (decrease (energy ?r) 4))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l)) (at start (>= (energy ?r) 4))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r)) (at start (decrease (energy ?r) 4))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l)) (at start (>= (energy ?r) 6))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r)) (at start (decrease (energy ?r) 6))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti1_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock actions and equipped_for_soil_analysis, equipped_for_rock_analysis predicates\n\nthe sample-soil action has a duration if 10 and a cost of 3 energy\nthe sample-rock action has a duration of 8 and a cost of 5 energy\n\ncontext: the at_*_sample predicate indicates if a sample is at a waypoint, the equipped_for_*_analysis indicates if a rover is equipped for a specific type of analysis, \nstore_of indicates if a rover is equipped with the specified storage, empty is to qualify a storage of empty, full qualifies a storage as full, a storage can either be full or empty,\nhave_*_analysis indicates if a rover posseses a sample of a the * type, the rover need specific amounts of energy to perform various actions\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :durative-actions :fluents :duration-inequalities)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t      (in_sun ?w - waypoint)\n\n)\n(:functions (energy ?r - rover) (recharge-rate ?x - rover))\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y))  (at start (>= (energy ?x) 8))\n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (decrease (energy ?x) 8)) (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action recharge\n:parameters (?x - rover ?w - waypoint)\n:duration (= ?duration (/ (- 80 (energy ?x)) (recharge-rate ?x)))\n:condition (and (at start (at ?x ?w)) (over all (at ?x ?w)) \n\t\t\t\t\t(at start (in_sun ?w)) (at start (<= (energy ?x) 80)))\n:effect (and (at end (increase (energy ?x) (* ?duration (recharge-rate ?x)))))\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (>= (energy ?r) 2)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (and (at end (calibrated ?i ?r)) (at start (decrease (energy ?r) 2)))\n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n                      (at start (>= (energy ?r) 1))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at start (decrease (energy ?r) 1)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) (at start (>= (energy ?r) 4))\n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))(at start (decrease (energy ?r) 4))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l)) (at start (>= (energy ?r) 4))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r)) (at start (decrease (energy ?r) 4))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l)) (at start (>= (energy ?r) 6))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r)) (at start (decrease (energy ?r) 6))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti2_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock and calibrate actions and equipped_for_soil_analysis, equipped_for_rock_analysis, calibrated predicates\n\nthe sample-soil action has a duration of 10 and a cost of 3 energy\nthe sample-rock action has a duration of 8 and a cost of 5 energy\nthe calibrate action has a duration of 5 and a cost of 2 energy\n\ncontext: the at_*_sample predicate indicates if a sample is at a waypoint, the equipped_for_*_analysis indicates if a rover is equipped for a specific type of analysis, \nstore_of indicates if a rover is equipped with the specified storage, empty is to qualify a storage of empty, full qualifies a storage as full, a storage can either be full or empty,\nhave_*_analysis indicates if a rover posseses a sample of a the * type, the rover need specific amounts of energy to perform various actions, \nthe calibration_target predicate indicates the camera objective, visible_from predicate indicates if the objective is visible from a waypoint, \non_board predicate indicates if camera is on rover. The calibrated predicate indicates that the camera has been calibrated to objective and is ready to take_image. \n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :durative-actions :fluents :duration-inequalities)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t      (in_sun ?w - waypoint)\n\n)\n(:functions (energy ?r - rover) (recharge-rate ?x - rover))\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y))  (at start (>= (energy ?x) 8))\n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (decrease (energy ?x) 8)) (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action recharge\n:parameters (?x - rover ?w - waypoint)\n:duration (= ?duration (/ (- 80 (energy ?x)) (recharge-rate ?x)))\n:condition (and (at start (at ?x ?w)) (over all (at ?x ?w)) \n\t\t\t\t\t(at start (in_sun ?w)) (at start (<= (energy ?x) 80)))\n:effect (and (at end (increase (energy ?x) (* ?duration (recharge-rate ?x)))))\n)\n\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n                      (at start (>= (energy ?r) 1))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at start (decrease (energy ?r) 1)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) (at start (>= (energy ?r) 4))\n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))(at start (decrease (energy ?r) 4))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l)) (at start (>= (energy ?r) 4))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r)) (at start (decrease (energy ?r) 4))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l)) (at start (>= (energy ?r) 6))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r)) (at start (decrease (energy ?r) 6))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti3_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock, communicate_rock_data and calibrate actions and equipped_for_soil_analysis, equipped_for_rock_analysis, calibrated, have_soil_analysis, have_rock_analysis and communicated_rock_data predicates\n\nthe sample-soil action has a duration of 10 and a cost of 3 energy\nthe sample-rock action has a duration of 8 and a cost of 5 energy\nthe calibrate action has a duration of 5 and a cost of 2 energy\nthe communicate_rock_data action has a duration of 10 and a cost of 4 energy\n\ncontext: the at_*_sample predicate indicates if a sample is at a waypoint, the equipped_for_*_analysis indicates if a rover is equipped for a specific type of analysis, \nstore_of indicates if a rover is equipped with the specified storage, empty is to qualify a storage of empty, full qualifies a storage as full, a storage can either be full or empty,\nhave_*_analysis indicates if a rover posseses a sample of a the * type, the rover need specific amounts of energy to perform various actions,\nthe calibration_target predicate indicates the camera objective, visible_from predicate indicates if the objective is visible from a waypoint, \non_board predicate indicates if camera is on rover. The calibrated predicate indicates that the camera has been calibrated to objective and is ready to take_image.\nat_lander predicate indicates that a lander is at a waypoint, available indicates that the rover is available to communicate data or navigate, channel_free indicates if the lander\nis available to communicate, communicated_*_data, indicates that the rover communicated data of * type\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :durative-actions :fluents :duration-inequalities)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t      (in_sun ?w - waypoint)\n\n)\n(:functions (energy ?r - rover) (recharge-rate ?x - rover))\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y))  (at start (>= (energy ?x) 8))\n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (decrease (energy ?x) 8)) (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action recharge\n:parameters (?x - rover ?w - waypoint)\n:duration (= ?duration (/ (- 80 (energy ?x)) (recharge-rate ?x)))\n:condition (and (at start (at ?x ?w)) (over all (at ?x ?w)) \n\t\t\t\t\t(at start (in_sun ?w)) (at start (<= (energy ?x) 80)))\n:effect (and (at end (increase (energy ?x) (* ?duration (recharge-rate ?x)))))\n)\n\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n                      (at start (>= (energy ?r) 1))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at start (decrease (energy ?r) 1)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l)) (at start (>= (energy ?r) 4))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r)) (at start (decrease (energy ?r) 4))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l)) (at start (>= (energy ?r) 6))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r)) (at start (decrease (energy ?r) 6))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti4_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock, communicate_rock_data, communicate_soil_data and calibrate actions and equipped_for_soil_analysis, equipped_for_rock_analysis, calibrated, have_soil_analysis, have_rock_analysis, communicated_rock_data, communicate_soil_data predicates\n\nthe sample-soil action has a duration of 10 and a cost of 3 energy\nthe sample-rock action has a duration of 8 and a cost of 5 energy\nthe calibrate action has a duration of 5 and a cost of 2 energy\nthe communicate_rock_data action has a duration of 10 and a cost of 4 energy\nthe communicate_soil_data action has a duration of 10 and a cost of 4 energy\n\ncontext: the at_*_sample predicate indicates if a sample is at a waypoint, the equipped_for_*_analysis indicates if a rover is equipped for a specific type of analysis, \nstore_of indicates if a rover is equipped with the specified storage, empty is to qualify a storage of empty, full qualifies a storage as full, a storage can either be full or empty,\nhave_*_analysis indicates if a rover posseses a sample of a the * type, the rover need specific amounts of energy to perform various actions,\nthe calibration_target predicate indicates the camera objective, visible_from predicate indicates if the objective is visible from a waypoint, \non_board predicate indicates if camera is on rover. The calibrated predicate indicates that the camera has been calibrated to objective and is ready to take_image.\nat_lander predicate indicates that a lander is at a waypoint, available indicates that the rover is available to communicate data or navigate, channel_free indicates if the lander\nis available to communicate, communicated_*_data, indicates that the rover communicated data of * type\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :durative-actions :fluents :duration-inequalities)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t      (in_sun ?w - waypoint)\n\n)\n(:functions (energy ?r - rover) (recharge-rate ?x - rover))\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y))  (at start (>= (energy ?x) 8))\n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (decrease (energy ?x) 8)) (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action recharge\n:parameters (?x - rover ?w - waypoint)\n:duration (= ?duration (/ (- 80 (energy ?x)) (recharge-rate ?x)))\n:condition (and (at start (at ?x ?w)) (over all (at ?x ?w)) \n\t\t\t\t\t(at start (in_sun ?w)) (at start (<= (energy ?x) 80)))\n:effect (and (at end (increase (energy ?x) (* ?duration (recharge-rate ?x)))))\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n                      (at start (>= (energy ?r) 1))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at start (decrease (energy ?r) 1)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l)) (at start (>= (energy ?r) 6))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r)) (at start (decrease (energy ?r) 6))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti5_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd recharge-rate function and recharge durative-action\n\ncontext: the recharge-rate function is specific per rover and is the amount of energy gained per unit of time when recharging in the sun, in_sun indicates if a waypoint is in the sun\nand thus a valid waypoint for the rover to recharge at, the rover can only recharge if it's energy supply is less or equal to 80, the duration of recharge of the rover depends on \nit's current energy level and is given by (80-(energy of robot))/(robot's recharge-rate)\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :durative-actions :fluents :duration-inequalities)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t      (in_sun ?w - waypoint)\n\n)\n(:functions (energy ?r - rover))\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y))  (at start (>= (energy ?x) 8))\n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (decrease (energy ?x) 8)) (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 10)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_soil_sample ?p)) (at start (equipped_for_soil_analysis ?x)) (at start (>= (energy ?x) 3)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at start (decrease (energy ?x) 3)) (at end (have_soil_analysis ?x ?p)) (at end (not (at_soil_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (>= (energy ?x) 5)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p)) (at start (decrease (energy ?x) 5)) (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (>= (energy ?r) 2)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (and (at end (calibrated ?i ?r)) (at start (decrease (energy ?r) 2)))\n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n                      (at start (>= (energy ?r) 1))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at start (decrease (energy ?r) 1)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) (at start (>= (energy ?r) 4))\n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))(at start (decrease (energy ?r) 4))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l)) (at start (>= (energy ?r) 4))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r)) (at start (decrease (energy ?r) 4))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l)) (at start (>= (energy ?r) 6))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r)) (at start (decrease (energy ?r) 6))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti6_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd recharge-rate and energy functions and recharge durative-action\n\ncontext:the energy function represents the current energy level of the rover, the recharge-rate function is specific per rover and is \nthe amount of energy gained per unit of time when recharging in the sun, in_sun indicates if a waypoint is in the sun\nand thus a valid waypoint for the rover to recharge at, the rover can only recharge if it's energy supply is less or equal to 80, the duration of recharge of the rover depends on \nit's current energy level and is given by (80-(energy of robot))/(robot's recharge-rate), certain actions require a minimum of energy to perform and consume that amount once completed\n\nthese following actions must be modified to require a minimum of energy and consume that amount on execution\nnavigate: 8\nsample_soil: 3\nsample_rock: 5\ncalibrate: 2\ntake_image: 1\ncommunicate_soil_data: 4\ncommunicate_rock_data: 4\ncommunicate_image_data: 6\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :durative-actions :fluents :duration-inequalities)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t      (in_sun ?w - waypoint)\n\n)\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y))  \n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n\n(:durative-action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 10)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_soil_sample ?p)) (at start (equipped_for_soil_analysis ?x))  (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s))  (at end (have_soil_analysis ?x ?p)) (at end (not (at_soil_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p))  (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p))  (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r))  (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (and (at end (calibrated ?i ?r)))\n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n                     \n               )\n :effect (and (at end (have_image ?r ?o ?m))  (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l)) \n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r)) \n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti7_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd durative-actions requirement and modify actions to make them durative-actions\n\nthe actions should have the following durations\nnavigate: 5\nrecharge: (80-(robot current energy))/(robot recharge-rate)\nsample_soil: 10\nsample_rock: 8\ndrop: 1\ncalibrate: 5\ntake_image: 7\ncommunicate_soil_data: 10\ncommunicate_rock_data: 10\ncommunicate_image_data: 15\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :fluents)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t     (in_sun ?w - waypoint)\n)\n\n(:functions (energy ?r - rover) (recharge-rate ?x - rover))\n\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) (>= (energy ?x) 8) (visible ?y ?z))\n:effect (and (decrease (energy ?x) 8) (not (at ?x ?y)) (at ?x ?z))\n)\n\n(:action recharge\n:parameters (?x - rover ?w - waypoint)\n:precondition (and (at ?x ?w) (in_sun ?w) (<= (energy ?x) 80))\n:effect (increase (energy ?x) (* (- 80 (energy ?x)) (recharge-rate ?x)))\n)\n\n(:action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s) (>= (energy ?x) 3))\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 3) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p)))\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x) (empty ?s) (>= (energy ?x) 5))\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 5) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p)))\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y))\n:effect (and (not (full ?y)) (empty ?y))\n)\n\n(:action calibrate\n:parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n:precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w) (on_board ?i ?r) (>= (energy ?r) 2))\n:effect (and (calibrated ?i ?r) (decrease (energy ?r) 2))\n)\n\n(:action take_image\n:parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n:precondition (and (calibrated ?i ?r) (on_board ?i ?r) (equipped_for_imaging ?r) (supports ?i ?m) (visible_from ?o ?p) (at ?r ?p) (>= (energy ?r) 1))\n:effect (and (have_image ?r ?o ?m) (decrease (energy ?r) 1) (not (calibrated ?i ?r)))\n)\n\n(:action communicate_soil_data\n:parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n:precondition (and (at ?r ?x) (at_lander ?l ?y) (have_soil_analysis ?r ?p) (visible ?x ?y) (available ?r) (channel_free ?l) (>= (energy ?r) 4))\n:effect (and (not (available ?r)) (not (channel_free ?l)) (communicated_soil_data ?p) (available ?r) (channel_free ?l) (decrease (energy ?r) 4))\n)\n\n(:action communicate_rock_data\n:parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n:precondition (and (at ?r ?x) (at_lander ?l ?y) (have_rock_analysis ?r ?p) (visible ?x ?y) (available ?r) (channel_free ?l) (>= (energy ?r) 4))\n:effect (and (not (available ?r)) (not (channel_free ?l)) (communicated_rock_data ?p) (available ?r) (channel_free ?l) (decrease (energy ?r) 4))\n)\n\n(:action communicate_image_data\n:parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n:precondition (and (at ?r ?x) (at_lander ?l ?y) (have_image ?r ?o ?m) (visible ?x ?y) (available ?r) (channel_free ?l) (>= (energy ?r) 6))\n:effect (and (not (available ?r)) (not (channel_free ?l)) (communicated_image_data ?o ?m) (available ?r) (channel_free ?l) (decrease (energy ?r) 6))\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti8_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nmodify the durations of the following durative-actions to the following\n\nThe modified actions should have the following durations\nnavigate: 5\nsample_soil: 10\nsample_rock: 8\ndrop: 1\ncalibrate: 5\ntake_image: 7\ncommunicate_soil_data: 10\ncommunicate_rock_data: 10\ncommunicate_image_data: 15\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :durative-actions :fluents :duration-inequalities)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t      (in_sun ?w - waypoint)\n\n)\n(:functions (energy ?r - rover) (recharge-rate ?x - rover))\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 1)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y))  (at start (>= (energy ?x) 8))\n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (decrease (energy ?x) 8)) (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action recharge\n:parameters (?x - rover ?w - waypoint)\n:duration (= ?duration (/ (- 80 (energy ?x)) (recharge-rate ?x)))\n:condition (and (at start (at ?x ?w)) (over all (at ?x ?w)) \n\t\t\t\t\t(at start (in_sun ?w)) (at start (<= (energy ?x) 80)))\n:effect (and (at end (increase (energy ?x) (* ?duration (recharge-rate ?x)))))\n)\n\n\n(:durative-action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_soil_sample ?p)) (at start (equipped_for_soil_analysis ?x)) (at start (>= (energy ?x) 3)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at start (decrease (energy ?x) 3)) (at end (have_soil_analysis ?x ?p)) (at end (not (at_soil_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (>= (energy ?x) 5)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p)) (at start (decrease (energy ?x) 5)) (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 1)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (>= (energy ?r) 2)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (and (at end (calibrated ?i ?r)) (at start (decrease (energy ?r) 2)))\n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 1)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n                      (at start (>= (energy ?r) 1))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at start (decrease (energy ?r) 1)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 1)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) (at start (>= (energy ?r) 4))\n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))(at start (decrease (energy ?r) 4))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 1)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l)) (at start (>= (energy ?r) 4))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r)) (at start (decrease (energy ?r) 4))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 1)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l)) (at start (>= (energy ?r) 6))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r)) (at start (decrease (energy ?r) 6))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti9_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the visible predicate\n\nadd a condition to navigate to require the waypoint where the rover is going to be visible from it's current waypoint\nThe communicate data actions to require the lander waypoint to be visible from the rover waypoint \n\ncontext: The visible predicate indicates that a waypoint is visible from another waypoint\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :durative-actions :fluents :duration-inequalities)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t      (in_sun ?w - waypoint)\n\n)\n(:functions (energy ?r - rover) (recharge-rate ?x - rover))\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y))  (at start (>= (energy ?x) 8))\n                \n\t    )\n:effect (and (at start (decrease (energy ?x) 8)) (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action recharge\n:parameters (?x - rover ?w - waypoint)\n:duration (= ?duration (/ (- 80 (energy ?x)) (recharge-rate ?x)))\n:condition (and (at start (at ?x ?w)) (over all (at ?x ?w)) \n\t\t\t\t\t(at start (in_sun ?w)) (at start (<= (energy ?x) 80)))\n:effect (and (at end (increase (energy ?x) (* ?duration (recharge-rate ?x)))))\n)\n\n\n(:durative-action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 10)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_soil_sample ?p)) (at start (equipped_for_soil_analysis ?x)) (at start (>= (energy ?x) 3)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at start (decrease (energy ?x) 3)) (at end (have_soil_analysis ?x ?p)) (at end (not (at_soil_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (>= (energy ?x) 5)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p)) (at start (decrease (energy ?x) 5)) (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (>= (energy ?r) 2)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (and (at end (calibrated ?i ?r)) (at start (decrease (energy ?r) 2)))\n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n                      (at start (>= (energy ?r) 1))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at start (decrease (energy ?r) 1)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) (at start (>= (energy ?r) 4))\n                    (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))(at start (decrease (energy ?r) 4))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                    (at start (available ?r))(at start (channel_free ?l)) (at start (>= (energy ?r) 4))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r)) (at start (decrease (energy ?r) 4))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                    (at start (available ?r)) (at start (channel_free ?l)) (at start (>= (energy ?r) 6))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r)) (at start (decrease (energy ?r) 6))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti10_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the channel_free predicate\n\nmodify the communicate_data actions to integrate the channel_free predicate\n\ncontext: channel_free predicate indicates that a lander is free to communicate, during the communication of data the channel is not free anymore, \nonce the data is communicated the channel is free once more\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :durative-actions :fluents :duration-inequalities)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t      (in_sun ?w - waypoint)\n\n)\n(:functions (energy ?r - rover) (recharge-rate ?x - rover))\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y))  (at start (>= (energy ?x) 8))\n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (decrease (energy ?x) 8)) (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action recharge\n:parameters (?x - rover ?w - waypoint)\n:duration (= ?duration (/ (- 80 (energy ?x)) (recharge-rate ?x)))\n:condition (and (at start (at ?x ?w)) (over all (at ?x ?w)) \n\t\t\t\t\t(at start (in_sun ?w)) (at start (<= (energy ?x) 80)))\n:effect (and (at end (increase (energy ?x) (* ?duration (recharge-rate ?x)))))\n)\n\n\n(:durative-action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 10)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_soil_sample ?p)) (at start (equipped_for_soil_analysis ?x)) (at start (>= (energy ?x) 3)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at start (decrease (energy ?x) 3)) (at end (have_soil_analysis ?x ?p)) (at end (not (at_soil_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (>= (energy ?x) 5)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p)) (at start (decrease (energy ?x) 5)) (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (>= (energy ?r) 2)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (and (at end (calibrated ?i ?r)) (at start (decrease (energy ?r) 2)))\n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n                      (at start (>= (energy ?r) 1))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at start (decrease (energy ?r) 1)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) (at start (>= (energy ?r) 4))\n                   (at start (visible ?x ?y)) (at start (available ?r))\n            )\n :effect (and (at start (not (available ?r))) \n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))(at start (decrease (energy ?r) 4))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (>= (energy ?r) 4))\n            )\n :effect (and (at start (not (available ?r))) (at end (communicated_rock_data ?p))(at end (available ?r)) (at start (decrease (energy ?r) 4))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r))  (at start (>= (energy ?r) 6))\n            )\n :effect (and (at start (not (available ?r))) (at end (communicated_image_data ?o ?m)) (at end (available ?r)) (at start (decrease (energy ?r) 6))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti11_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nremove the long_range_communicate_*_data actions adn the orbital_satellite_channel\n\nRemove the long_range_communicate_*_data actions and the orbital satellite_channel\n\ncontext: the orbital_satellite_channel predicate indicates if satellite is in range for communication using long range communcation\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :durative-actions :fluents :duration-inequalities)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t      (in_sun ?w - waypoint)\n             (orbital_satellite_available)\n\n)\n(:functions (energy ?r - rover) (recharge-rate ?x - rover))\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y))  (at start (>= (energy ?x) 8))\n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (decrease (energy ?x) 8)) (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action recharge\n:parameters (?x - rover ?w - waypoint)\n:duration (= ?duration (/ (- 80 (energy ?x)) (recharge-rate ?x)))\n:condition (and (at start (at ?x ?w)) (over all (at ?x ?w)) \n\t\t\t\t\t(at start (in_sun ?w)) (at start (<= (energy ?x) 80)))\n:effect (and (at end (increase (energy ?x) (* ?duration (recharge-rate ?x)))))\n)\n\n\n(:durative-action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 10)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_soil_sample ?p)) (at start (equipped_for_soil_analysis ?x)) (at start (>= (energy ?x) 3)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at start (decrease (energy ?x) 3)) (at end (have_soil_analysis ?x ?p)) (at end (not (at_soil_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (>= (energy ?x) 5)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p)) (at start (decrease (energy ?x) 5)) (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (>= (energy ?r) 2)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (and (at end (calibrated ?i ?r)) (at start (decrease (energy ?r) 2)))\n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n                      (at start (>= (energy ?r) 1))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at start (decrease (energy ?r) 1)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) (at start (>= (energy ?r) 4))\n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))(at start (decrease (energy ?r) 4))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l)) (at start (>= (energy ?r) 4))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r)) (at start (decrease (energy ?r) 4))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l)) (at start (>= (energy ?r) 6))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r)) (at start (decrease (energy ?r) 6))\n          )\n)\n\n(:durative-action long_range_communicate_soil_data\n :parameters (?r - rover ?p - waypoint ?x - waypoint)\n :duration (= ?duration 30)\n :condition (and (over all (at ?r ?x))  (at start (have_soil_analysis ?r ?p)) (at start (>= (energy ?r) 4))\n                    (at start (available ?r))(orbital_satellite_available)\n            )\n :effect (and (at start (not (available ?r))) \n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))(at start (decrease (energy ?r) 4))\n\t)\n)\n\n(:durative-action long_range_communicate_rock_data\n :parameters (?r - rover ?p - waypoint ?x - waypoint)\n :duration (= ?duration 30)\n :condition (and (over all (at ?r ?x))  (at start (have_rock_analysis ?r ?p)) \n                    (at start (available ?r)) (at start (>= (energy ?r) 4))(orbital_satellite_available)\n            )\n :effect (and (at start (not (available ?r))) (at end (communicated_rock_data ?p))(at end (available ?r)) (at start (decrease (energy ?r) 4))\n          )\n)\n\n\n(:durative-action long_range_communicate_image_data\n :parameters (?r - rover ?o - objective ?m - mode ?x - waypoint)\n :duration (= ?duration 45)\n :condition (and (over all (at ?r ?x)) (at start (have_image ?r ?o ?m)) \n                   (at start (available ?r))  (at start (>= (energy ?r) 6))(orbital_satellite_available)\n            )\n :effect (and (at start (not (available ?r)))  (at end (communicated_image_data ?o ?m)) (at end (available ?r)) (at start (decrease (energy ?r) 6))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti12_nl", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the air data analysis predicates and actions\n\ncontext: equipped_for_air_analysis indicates if the rover is equipped with a module to analyse the air, \nhave_air_analysis indicates that the rover has an air sample from a specific waypoint, communicate_air_data indicates that the rover successfully communicated air data,\nat_air_sample indicates that an air sample is present at a waypoint\n\nUsing commonsese reasoning modify the following domain by thinking step-by-step\n\n(define (domain Rover)\n(:requirements :typing :durative-actions :fluents :duration-inequalities)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_air_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (have_air_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_air_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n            (at_air_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t      (in_sun ?w - waypoint)\n\n)\n(:functions (energy ?r - rover) (recharge-rate ?x - rover))\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y))  (at start (>= (energy ?x) 8))\n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (decrease (energy ?x) 8)) (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action recharge\n:parameters (?x - rover ?w - waypoint)\n:duration (= ?duration (/ (- 80 (energy ?x)) (recharge-rate ?x)))\n:condition (and (at start (at ?x ?w)) (over all (at ?x ?w)) \n\t\t\t\t\t(at start (in_sun ?w)) (at start (<= (energy ?x) 80)))\n:effect (and (at end (increase (energy ?x) (* ?duration (recharge-rate ?x)))))\n)\n\n\n(:durative-action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 10)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_soil_sample ?p)) (at start (equipped_for_soil_analysis ?x)) (at start (>= (energy ?x) 3)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at start (decrease (energy ?x) 3)) (at end (have_soil_analysis ?x ?p)) (at end (not (at_soil_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (>= (energy ?x) 5)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p)) (at start (decrease (energy ?x) 5)) (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_air\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (>= (energy ?x) 5)) (at start (at_air_sample ?p)) (at start (equipped_for_air_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_air_analysis ?x ?p)) (at start (decrease (energy ?x) 5)) (at end (not (at_air_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (>= (energy ?r) 2)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (and (at end (calibrated ?i ?r)) (at start (decrease (energy ?r) 2)))\n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n                      (at start (>= (energy ?r) 1))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at start (decrease (energy ?r) 1)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) (at start (>= (energy ?r) 4))\n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))(at start (decrease (energy ?r) 4))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l)) (at start (>= (energy ?r) 4))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r)) (at start (decrease (energy ?r) 4))\n          )\n)\n\n(:durative-action communicate_air_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_air_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l)) (at start (>= (energy ?r) 4))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_air_data ?p))(at end (available ?r)) (at start (decrease (energy ?r) 4))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l)) (at start (>= (energy ?r) 6))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r)) (at start (decrease (energy ?r) 6))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil action and equipped_for_soil_analysis predicate\n\nThis requires adding 1 action and 1 predicate\npredicate: equipped_for_soil_analysis per rover\naction: sample-soil\n\nsample-soil:\nparameters: rover store waypoint\nduration: 10\nconditions: rover is at waypoint, the soil sample is at waypoint, the rover is equipped for soil analysis and has a store that is empty, the rover has a minimum of 3 energy\neffect: store is no longer empty, it's full, the rover has the soil analysis and the soil sample is no longer at the waypoint, the rover energy decreases by 3\n\n(define (domain Rover)\n(:requirements :typing :durative-actions :fluents :duration-inequalities)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t      (in_sun ?w - waypoint)\n\n)\n(:functions (energy ?r - rover) (recharge-rate ?x - rover))\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y))  (at start (>= (energy ?x) 8))\n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (decrease (energy ?x) 8)) (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action recharge\n:parameters (?x - rover ?w - waypoint)\n:duration (= ?duration (/ (- 80 (energy ?x)) (recharge-rate ?x)))\n:condition (and (at start (at ?x ?w)) (over all (at ?x ?w)) \n\t\t\t\t\t(at start (in_sun ?w)) (at start (<= (energy ?x) 80)))\n:effect (and (at end (increase (energy ?x) (* ?duration (recharge-rate ?x)))))\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (>= (energy ?x) 5)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p)) (at start (decrease (energy ?x) 5)) (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (>= (energy ?r) 2)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (and (at end (calibrated ?i ?r)) (at start (decrease (energy ?r) 2)))\n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n                      (at start (>= (energy ?r) 1))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at start (decrease (energy ?r) 1)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) (at start (>= (energy ?r) 4))\n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))(at start (decrease (energy ?r) 4))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l)) (at start (>= (energy ?r) 4))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r)) (at start (decrease (energy ?r) 4))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l)) (at start (>= (energy ?r) 6))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r)) (at start (decrease (energy ?r) 6))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock actions and equipped_for_soil_analysis, equipped_for_rock_analysis predicates\n\nThis requires adding 2 action and 2 predicate\npredicate: equipped_for_soil_analysis per rover, equipped_for_rock_analysis per rover\naction: sample-soil, sample-rock\n\nsample-soil:\nparameters: rover store waypoint\nduration: 10\nconditions: rover is at waypoint, the soil sample is at waypoint, the rover is equipped for soil analysis and has a store that is empty, the rover has a minimum of 3 energy\neffect: store is no longer empty, it's full, the rover has the soil analysis and the soil sample is no longer at the waypoint, the rover's energy decreases by 3\n\nsample-rock:\nparameters: rover store waypoint\nduration: 8\nconditions: rover is at waypoint, the rock sample is at waypoint, the rover is equipped for rock analysis and has a store that is empty, the rover has a minimum of 5 energy\neffect: store is no longer empty, it's full, the rover has the rock analysis and the rock sample is no longer at the waypoint, the rover's energy decreases by 3\n\n(define (domain Rover)\n(:requirements :typing :durative-actions :fluents :duration-inequalities)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t      (in_sun ?w - waypoint)\n\n)\n(:functions (energy ?r - rover) (recharge-rate ?x - rover))\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y))  (at start (>= (energy ?x) 8))\n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (decrease (energy ?x) 8)) (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action recharge\n:parameters (?x - rover ?w - waypoint)\n:duration (= ?duration (/ (- 80 (energy ?x)) (recharge-rate ?x)))\n:condition (and (at start (at ?x ?w)) (over all (at ?x ?w)) \n\t\t\t\t\t(at start (in_sun ?w)) (at start (<= (energy ?x) 80)))\n:effect (and (at end (increase (energy ?x) (* ?duration (recharge-rate ?x)))))\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (>= (energy ?r) 2)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (and (at end (calibrated ?i ?r)) (at start (decrease (energy ?r) 2)))\n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n                      (at start (>= (energy ?r) 1))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at start (decrease (energy ?r) 1)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) (at start (>= (energy ?r) 4))\n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))(at start (decrease (energy ?r) 4))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l)) (at start (>= (energy ?r) 4))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r)) (at start (decrease (energy ?r) 4))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l)) (at start (>= (energy ?r) 6))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r)) (at start (decrease (energy ?r) 6))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock and calibrate actions and equipped_for_soil_analysis, equipped_for_rock_analysis, calibrated predicates\n\nThis requires adding 3 action and 3 predicate\npredicate: equipped_for_soil_analysis per rover, equipped_for_rock_analysis per rover, calibrated per camera per rover\naction: sample-soil, sample-rock, calibrate\n\nsample-soil:\nparameters: rover store waypoint\nduration: 10\nconditions: rover is at waypoint, the soil sample is at waypoint, the rover is equipped for soil analysis and has a store that is empty, the rover has a minimum of 3 energy\neffect: store is no longer empty, it's full, the rover has the soil analysis and the soil sample is no longer at the waypoint, the rover's energy decreases by 3\n\nsample-rock:\nparameters: rover store waypoint\nduration: 8\nconditions: rover is at waypoint, the rock sample is at waypoint, the rover is equipped for rock analysis and has a store that is empty, the rover has a minimum of 5 energy\neffect: store is no longer empty, it's full, the rover has the rock analysis and the rock sample is no longer at the waypoint, the rover's energy decreases by 5\n\ncalibrate:\nparameters: rover camera objective waypoint\nduration: 5\nconditions: rover must be equipped for imaging, the objective must be a calibration target for the camera, the rover must be at the waypoint and the objective\n must be visible from the waypoint, the camera must be on board the rover, the rover has a minimum of 2 energy\neffect: camera on the rover is calibrated, the rover's energy decreases by 2\n\n(define (domain Rover)\n(:requirements :typing :durative-actions :fluents :duration-inequalities)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t      (in_sun ?w - waypoint)\n\n)\n(:functions (energy ?r - rover) (recharge-rate ?x - rover))\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y))  (at start (>= (energy ?x) 8))\n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (decrease (energy ?x) 8)) (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action recharge\n:parameters (?x - rover ?w - waypoint)\n:duration (= ?duration (/ (- 80 (energy ?x)) (recharge-rate ?x)))\n:condition (and (at start (at ?x ?w)) (over all (at ?x ?w)) \n\t\t\t\t\t(at start (in_sun ?w)) (at start (<= (energy ?x) 80)))\n:effect (and (at end (increase (energy ?x) (* ?duration (recharge-rate ?x)))))\n)\n\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n                      (at start (>= (energy ?r) 1))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at start (decrease (energy ?r) 1)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) (at start (>= (energy ?r) 4))\n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))(at start (decrease (energy ?r) 4))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l)) (at start (>= (energy ?r) 4))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r)) (at start (decrease (energy ?r) 4))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l)) (at start (>= (energy ?r) 6))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r)) (at start (decrease (energy ?r) 6))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock, communicate_rock_data and calibrate actions and equipped_for_soil_analysis, equipped_for_rock_analysis, calibrated, have_soil_analysis, have_rock_analysis and communicated_rock_data predicates\n\nThis requires adding 4 action and 6 predicate\npredicate: equipped_for_soil_analysis per rover, equipped_for_rock_analysis per rover, calibrated per camera per rover, have_soil_analysis per rover per waypoint, have_rock_analysis per rover per waypoint and communicated_rock_data per waypoint\naction: sample-soil, sample-rock, calibrate, communicate_rock_data\n\nsample-soil:\nparameters: rover store waypoint\nduration: 10\nconditions: rover is at waypoint, the soil sample is at waypoint, the rover is equipped for soil analysis and has a store that is empty, the rover has a minimum of 3 energy\neffect: store is no longer empty, it's full, the rover has the soil analysis and the soil sample is no longer at the waypoint, the rover's energy decreases by 3\n\nsample-rock:\nparameters: rover store waypoint\nduration: 8\nconditions: rover is at waypoint, the rock sample is at waypoint, the rover is equipped for rock analysis and has a store that is empty, the rover has a minimum of 5 energy\neffect: store is no longer empty, it's full, the rover has the rock analysis and the rock sample is no longer at the waypoint, the rover's energy decreases by 5\n\ncalibrate:\nparameters: rover camera objective waypoint\nduration: 5\nconditions: rover must be equipped for imaging, the objective must be a calibration target for the camera, the rover must be at the waypoint and the objective\n must be visible from the waypoint, the camera must be on board the rover, the rover has a minimum of 2 energy\neffect: camera on the rover is calibrated, the rover's energy decreases by 2\n\ncommunicate_rock_data:\nparameters: rover lander waypoint waypoint waypoint\nduration: 10\nconditions: rover is at a waypoint, lander is at a waypoint, the rover waypoint and lander waypoint are in visible range, \nthe rover has the rock analysis from the waypoint where it took sample the rover is available and the communication channel is free, the rover has a minimum of 4 energy\neffect: rover is temporarily unavailable, channel is temporarily not free, rover becomes available again, channel becomes free, the rover's energy decreases by 4\n\n(define (domain Rover)\n(:requirements :typing :durative-actions :fluents :duration-inequalities)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t      (in_sun ?w - waypoint)\n\n)\n(:functions (energy ?r - rover) (recharge-rate ?x - rover))\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y))  (at start (>= (energy ?x) 8))\n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (decrease (energy ?x) 8)) (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action recharge\n:parameters (?x - rover ?w - waypoint)\n:duration (= ?duration (/ (- 80 (energy ?x)) (recharge-rate ?x)))\n:condition (and (at start (at ?x ?w)) (over all (at ?x ?w)) \n\t\t\t\t\t(at start (in_sun ?w)) (at start (<= (energy ?x) 80)))\n:effect (and (at end (increase (energy ?x) (* ?duration (recharge-rate ?x)))))\n)\n\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n                      (at start (>= (energy ?r) 1))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at start (decrease (energy ?r) 1)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l)) (at start (>= (energy ?r) 4))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r)) (at start (decrease (energy ?r) 4))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l)) (at start (>= (energy ?r) 6))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r)) (at start (decrease (energy ?r) 6))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd sample-soil, sample-rock, communicate_rock_data, communicate_soil_data and calibrate actions and equipped_for_soil_analysis, equipped_for_rock_analysis, calibrated, have_soil_analysis, have_rock_analysis, communicated_rock_data, communicate_soil_data predicates\n\nThis requires adding 5 action and 7 predicate\npredicate: equipped_for_soil_analysis per rover, equipped_for_rock_analysis per rover, calibrated per camera per rover, have_soil_analysis per rover per waypoint, have_rock_analysis per rover per waypoint and communicated_rock_data per waypoint\naction: sample-soil, sample-rock, calibrate, communicate_rock_data, communicate_soil_daata\n\nsample-soil:\nparameters: rover store waypoint\nduration: 10\nconditions: rover is at waypoint, the soil sample is at waypoint, the rover is equipped for soil analysis and has a store that is empty, the rover has a minimum of 3 energy\neffect: store is no longer empty, it's full, the rover has the soil analysis and the soil sample is no longer at the waypoint, the rover's energy decreases by 3\n\nsample-rock:\nparameters: rover store waypoint\nduration: 8\nconditions: rover is at waypoint, the rock sample is at waypoint, the rover is equipped for rock analysis and has a store that is empty, the rover has a minimum of 5 energy\neffect: store is no longer empty, it's full, the rover has the rock analysis and the rock sample is no longer at the waypoint, the rover's energy decreases by 5\n\ncalibrate:\nparameters: rover camera objective waypoint\nduration: 5\nconditions: rover must be equipped for imaging, the objective must be a calibration target for the camera, the rover must be at the waypoint and the objective\n must be visible from the waypoint, the camera must be on board the rover, the rover has a minimum of 2 energy\neffect: camera on the rover is calibrated, the rover's energy decreases by 2\n\ncommunicate_rock_data:\nparameters: rover lander waypoint waypoint waypoint\nduration: 10\nconditions: rover is at a waypoint, lander is at a waypoint, the rover waypoint and lander waypoint are in visible range, \nthe rover has the rock analysis from the waypoint where it took sample the rover is available and the communication channel is free, the rover has a minimum of 4 energy\neffect: rover is temporarily unavailable, channel is temporarily not free, rover becomes available again, channel becomes free, the rover's energy decreases by 4\n\ncommunicate_soil_data:\nparameters: rover lander waypoint waypoint waypoint\nduration: 10\nconditions: rover is at a waypoint, lander is at a waypoint, the rover waypoint and lander waypoint are in visible range, \nthe rover has the soil analysis from the waypoint where it took sample the rover is available and the communication channel is free, the rover has a minimum of 4 energy\neffect: rover is temporarily unavailable, channel is temporarily not free, rover becomes available again, channel becomes free, the rover's energy decreases by 4\n\n(define (domain Rover)\n(:requirements :typing :durative-actions :fluents :duration-inequalities)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t      (in_sun ?w - waypoint)\n\n)\n(:functions (energy ?r - rover) (recharge-rate ?x - rover))\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y))  (at start (>= (energy ?x) 8))\n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (decrease (energy ?x) 8)) (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action recharge\n:parameters (?x - rover ?w - waypoint)\n:duration (= ?duration (/ (- 80 (energy ?x)) (recharge-rate ?x)))\n:condition (and (at start (at ?x ?w)) (over all (at ?x ?w)) \n\t\t\t\t\t(at start (in_sun ?w)) (at start (<= (energy ?x) 80)))\n:effect (and (at end (increase (energy ?x) (* ?duration (recharge-rate ?x)))))\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n                      (at start (>= (energy ?r) 1))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at start (decrease (energy ?r) 1)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l)) (at start (>= (energy ?r) 6))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r)) (at start (decrease (energy ?r) 6))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd recharge-rate function and recharge action\n\nThis will require to add one function and 1 action\nfunction: recharge-rate specifies the recharge rate of rover\ndurative-action: recharge\n\nrecharge:\nparameters: rover waypoint\nduration: (80-(rover current energy))/(rover recharge-rate)\ncondition: rover must be at waypoint and stay there over all the recharge process, the waypoint must be in_sun, the rover must have a maximum of 80 energy to start recharging\neffect: increase the rover energy by recharge-rate * duration\n\n\n\n\n(define (domain Rover)\n(:requirements :typing :durative-actions :fluents :duration-inequalities)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t      (in_sun ?w - waypoint)\n\n)\n(:functions (energy ?r - rover))\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y))  (at start (>= (energy ?x) 8))\n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (decrease (energy ?x) 8)) (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 10)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_soil_sample ?p)) (at start (equipped_for_soil_analysis ?x)) (at start (>= (energy ?x) 3)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at start (decrease (energy ?x) 3)) (at end (have_soil_analysis ?x ?p)) (at end (not (at_soil_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (>= (energy ?x) 5)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p)) (at start (decrease (energy ?x) 5)) (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (>= (energy ?r) 2)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (and (at end (calibrated ?i ?r)) (at start (decrease (energy ?r) 2)))\n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n                      (at start (>= (energy ?r) 1))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at start (decrease (energy ?r) 1)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) (at start (>= (energy ?r) 4))\n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))(at start (decrease (energy ?r) 4))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l)) (at start (>= (energy ?r) 4))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r)) (at start (decrease (energy ?r) 4))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l)) (at start (>= (energy ?r) 6))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r)) (at start (decrease (energy ?r) 6))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd recharge-rate and energy function and recharge action\n\nThis will require to add one function and 1 action and modify 8 actions\nfunction: recharge-rate specifies the recharge rate of rover\ndurative-action: recharge\n\nrecharge:\nparameters: rover waypoint\nduration: (80-(rover current energy))/(rover recharge-rate)\ncondition: rover must be at waypoint and stay there over all the recharge process, the waypoint must be in_sun, the rover must have a maximum of 80 energy to start recharging\neffect: increase the rover energy by recharge-rate * duration\n\nthe following actions require a minimum of energy to be performed and consume that amount when completed\nnavigate: 8\nsample_soil: 3\nsample_rock: 5\ncalibrate: 2\ntake_image: 1\ncommunicate_soil_data: 4\ncommunicate_rock_data: 4\ncommunicate_image_data: 6\n\n(define (domain Rover)\n(:requirements :typing :durative-actions :fluents :duration-inequalities)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t      (in_sun ?w - waypoint)\n\n)\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y))  \n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n\n(:durative-action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 10)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_soil_sample ?p)) (at start (equipped_for_soil_analysis ?x))  (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s))  (at end (have_soil_analysis ?x ?p)) (at end (not (at_soil_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p))  (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p))  (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r))  (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (and (at end (calibrated ?i ?r)))\n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n                     \n               )\n :effect (and (at end (have_image ?r ?o ?m))  (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l)) \n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r)) \n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nAdd durative-actions requirement and modify actions to make them durative-actions\n\nThe modified actions should have the following durations\nnavigate: 5\nrecharge: (80-(robot current energy))/(robot recharge-rate)\nsample_soil: 10\nsample_rock: 8\ndrop: 1\ncalibrate: 5\ntake_image: 7\ncommunicate_soil_data: 10\ncommunicate_rock_data: 10\ncommunicate_image_data: 15\n\n(define (domain Rover)\n(:requirements :typing :fluents)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t     (in_sun ?w - waypoint)\n)\n\n(:functions (energy ?r - rover) (recharge-rate ?x - rover))\n\n(:action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) (>= (energy ?x) 8) (visible ?y ?z))\n:effect (and (decrease (energy ?x) 8) (not (at ?x ?y)) (at ?x ?z))\n)\n\n(:action recharge\n:parameters (?x - rover ?w - waypoint)\n:precondition (and (at ?x ?w) (in_sun ?w) (<= (energy ?x) 80))\n:effect (increase (energy ?x) (* (- 80 (energy ?x)) (recharge-rate ?x)))\n)\n\n(:action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s) (>= (energy ?x) 3))\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 3) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p)))\n)\n\n(:action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:precondition (and (at ?x ?p) (at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x) (empty ?s) (>= (energy ?x) 5))\n:effect (and (not (empty ?s)) (full ?s) (decrease (energy ?x) 5) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p)))\n)\n\n(:action drop\n:parameters (?x - rover ?y - store)\n:precondition (and (store_of ?y ?x) (full ?y))\n:effect (and (not (full ?y)) (empty ?y))\n)\n\n(:action calibrate\n:parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n:precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w) (on_board ?i ?r) (>= (energy ?r) 2))\n:effect (and (calibrated ?i ?r) (decrease (energy ?r) 2))\n)\n\n(:action take_image\n:parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n:precondition (and (calibrated ?i ?r) (on_board ?i ?r) (equipped_for_imaging ?r) (supports ?i ?m) (visible_from ?o ?p) (at ?r ?p) (>= (energy ?r) 1))\n:effect (and (have_image ?r ?o ?m) (decrease (energy ?r) 1) (not (calibrated ?i ?r)))\n)\n\n(:action communicate_soil_data\n:parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n:precondition (and (at ?r ?x) (at_lander ?l ?y) (have_soil_analysis ?r ?p) (visible ?x ?y) (available ?r) (channel_free ?l) (>= (energy ?r) 4))\n:effect (and (not (available ?r)) (not (channel_free ?l)) (communicated_soil_data ?p) (available ?r) (channel_free ?l) (decrease (energy ?r) 4))\n)\n\n(:action communicate_rock_data\n:parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n:precondition (and (at ?r ?x) (at_lander ?l ?y) (have_rock_analysis ?r ?p) (visible ?x ?y) (available ?r) (channel_free ?l) (>= (energy ?r) 4))\n:effect (and (not (available ?r)) (not (channel_free ?l)) (communicated_rock_data ?p) (available ?r) (channel_free ?l) (decrease (energy ?r) 4))\n)\n\n(:action communicate_image_data\n:parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n:precondition (and (at ?r ?x) (at_lander ?l ?y) (have_image ?r ?o ?m) (visible ?x ?y) (available ?r) (channel_free ?l) (>= (energy ?r) 6))\n:effect (and (not (available ?r)) (not (channel_free ?l)) (communicated_image_data ?o ?m) (available ?r) (channel_free ?l) (decrease (energy ?r) 6))\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nmodify the durations of the following durative-actions to the following\n\nThe modified actions should have the following durations\nnavigate: 5\nsample_soil: 10\nsample_rock: 8\ndrop: 1\ncalibrate: 5\ntake_image: 7\ncommunicate_soil_data: 10\ncommunicate_rock_data: 10\ncommunicate_image_data: 15\n\n(define (domain Rover)\n(:requirements :typing :durative-actions :fluents :duration-inequalities)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t      (in_sun ?w - waypoint)\n\n)\n(:functions (energy ?r - rover) (recharge-rate ?x - rover))\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 1)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y))  (at start (>= (energy ?x) 8))\n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (decrease (energy ?x) 8)) (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action recharge\n:parameters (?x - rover ?w - waypoint)\n:duration (= ?duration (/ (- 80 (energy ?x)) (recharge-rate ?x)))\n:condition (and (at start (at ?x ?w)) (over all (at ?x ?w)) \n\t\t\t\t\t(at start (in_sun ?w)) (at start (<= (energy ?x) 80)))\n:effect (and (at end (increase (energy ?x) (* ?duration (recharge-rate ?x)))))\n)\n\n\n(:durative-action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 1)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_soil_sample ?p)) (at start (equipped_for_soil_analysis ?x)) (at start (>= (energy ?x) 3)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at start (decrease (energy ?x) 3)) (at end (have_soil_analysis ?x ?p)) (at end (not (at_soil_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (>= (energy ?x) 5)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p)) (at start (decrease (energy ?x) 5)) (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 1)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (>= (energy ?r) 2)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (and (at end (calibrated ?i ?r)) (at start (decrease (energy ?r) 2)))\n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 1)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n                      (at start (>= (energy ?r) 1))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at start (decrease (energy ?r) 1)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 1)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) (at start (>= (energy ?r) 4))\n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))(at start (decrease (energy ?r) 4))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 1)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l)) (at start (>= (energy ?r) 4))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r)) (at start (decrease (energy ?r) 4))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 1)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l)) (at start (>= (energy ?r) 6))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r)) (at start (decrease (energy ?r) 6))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the visible predicate\n\nThis requires adding 1 predicate and modifying 4 actions\npredicate: visible waypoint is visible from another waypoint\n\nactions:\nnavigate action requires the waypoint the rover is navigating to be visible by the waypoint that the rover is currently at\n\ncommunicate_soil_data requires the lander waypoint to be visible from the rover waypoint\ncommunicate_rock_data requires the lander waypoint to be visible from the rover waypoint\ncommunicate_image_data requires the lander waypoint to be visible from the rover waypoint\n\n\n(define (domain Rover)\n(:requirements :typing :durative-actions :fluents :duration-inequalities)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t      (in_sun ?w - waypoint)\n\n)\n(:functions (energy ?r - rover) (recharge-rate ?x - rover))\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y))  (at start (>= (energy ?x) 8))\n                \n\t    )\n:effect (and (at start (decrease (energy ?x) 8)) (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action recharge\n:parameters (?x - rover ?w - waypoint)\n:duration (= ?duration (/ (- 80 (energy ?x)) (recharge-rate ?x)))\n:condition (and (at start (at ?x ?w)) (over all (at ?x ?w)) \n\t\t\t\t\t(at start (in_sun ?w)) (at start (<= (energy ?x) 80)))\n:effect (and (at end (increase (energy ?x) (* ?duration (recharge-rate ?x)))))\n)\n\n\n(:durative-action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 10)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_soil_sample ?p)) (at start (equipped_for_soil_analysis ?x)) (at start (>= (energy ?x) 3)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at start (decrease (energy ?x) 3)) (at end (have_soil_analysis ?x ?p)) (at end (not (at_soil_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (>= (energy ?x) 5)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p)) (at start (decrease (energy ?x) 5)) (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (>= (energy ?r) 2)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (and (at end (calibrated ?i ?r)) (at start (decrease (energy ?r) 2)))\n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n                      (at start (>= (energy ?r) 1))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at start (decrease (energy ?r) 1)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) (at start (>= (energy ?r) 4))\n                    (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))(at start (decrease (energy ?r) 4))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                    (at start (available ?r))(at start (channel_free ?l)) (at start (>= (energy ?r) 4))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r)) (at start (decrease (energy ?r) 4))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                    (at start (available ?r)) (at start (channel_free ?l)) (at start (>= (energy ?r) 6))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r)) (at start (decrease (energy ?r) 6))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti10", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nadd the channel_free predicate\n\nThis requires adding 1 predicate and modifying 3 actions\npredicate: channel_free per lander\n\nactions\ncommunicate_soil_data: The lander channel must be free to start a communication. While the rover and lander are communicating the channel is not free and then becomes free again once the data is communicated\ncommunicate_rock_data: The lander channel must be free to start a communication. While the rover and lander are communicating the channel is not free and then becomes free again once the data is communicated\ncommunicate_image_data: The lander channel must be free to start a communication. While the rover and lander are communicating the channel is not free and then becomes free again once the data is communicated\n\n(define (domain Rover)\n(:requirements :typing :durative-actions :fluents :duration-inequalities)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t      (in_sun ?w - waypoint)\n\n)\n(:functions (energy ?r - rover) (recharge-rate ?x - rover))\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y))  (at start (>= (energy ?x) 8))\n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (decrease (energy ?x) 8)) (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action recharge\n:parameters (?x - rover ?w - waypoint)\n:duration (= ?duration (/ (- 80 (energy ?x)) (recharge-rate ?x)))\n:condition (and (at start (at ?x ?w)) (over all (at ?x ?w)) \n\t\t\t\t\t(at start (in_sun ?w)) (at start (<= (energy ?x) 80)))\n:effect (and (at end (increase (energy ?x) (* ?duration (recharge-rate ?x)))))\n)\n\n\n(:durative-action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 10)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_soil_sample ?p)) (at start (equipped_for_soil_analysis ?x)) (at start (>= (energy ?x) 3)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at start (decrease (energy ?x) 3)) (at end (have_soil_analysis ?x ?p)) (at end (not (at_soil_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (>= (energy ?x) 5)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p)) (at start (decrease (energy ?x) 5)) (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (>= (energy ?r) 2)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (and (at end (calibrated ?i ?r)) (at start (decrease (energy ?r) 2)))\n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n                      (at start (>= (energy ?r) 1))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at start (decrease (energy ?r) 1)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) (at start (>= (energy ?r) 4))\n                   (at start (visible ?x ?y)) (at start (available ?r))\n            )\n :effect (and (at start (not (available ?r))) \n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))(at start (decrease (energy ?r) 4))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (>= (energy ?r) 4))\n            )\n :effect (and (at start (not (available ?r))) (at end (communicated_rock_data ?p))(at end (available ?r)) (at start (decrease (energy ?r) 4))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r))  (at start (>= (energy ?r) 6))\n            )\n :effect (and (at start (not (available ?r))) (at end (communicated_image_data ?o ?m)) (at end (available ?r)) (at start (decrease (energy ?r) 6))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti11", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nremove the long_range_communicate_*_data actions adn the orbital_satellite_channel\n\nThis requires removing 1 predicate and 3 actions\npredicate: orbital_satellite_channel indicates if orbital satellite is available to communicate\nactions:\n\nRemove long_range_communicate_image_data\nRemove long_range_communicate_rock_data\nremove long_range_communicate_soil_data\n\n(define (domain Rover)\n(:requirements :typing :durative-actions :fluents :duration-inequalities)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t      (in_sun ?w - waypoint)\n             (orbital_satellite_available)\n\n)\n(:functions (energy ?r - rover) (recharge-rate ?x - rover))\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y))  (at start (>= (energy ?x) 8))\n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (decrease (energy ?x) 8)) (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action recharge\n:parameters (?x - rover ?w - waypoint)\n:duration (= ?duration (/ (- 80 (energy ?x)) (recharge-rate ?x)))\n:condition (and (at start (at ?x ?w)) (over all (at ?x ?w)) \n\t\t\t\t\t(at start (in_sun ?w)) (at start (<= (energy ?x) 80)))\n:effect (and (at end (increase (energy ?x) (* ?duration (recharge-rate ?x)))))\n)\n\n\n(:durative-action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 10)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_soil_sample ?p)) (at start (equipped_for_soil_analysis ?x)) (at start (>= (energy ?x) 3)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at start (decrease (energy ?x) 3)) (at end (have_soil_analysis ?x ?p)) (at end (not (at_soil_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (>= (energy ?x) 5)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p)) (at start (decrease (energy ?x) 5)) (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (>= (energy ?r) 2)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (and (at end (calibrated ?i ?r)) (at start (decrease (energy ?r) 2)))\n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n                      (at start (>= (energy ?r) 1))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at start (decrease (energy ?r) 1)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) (at start (>= (energy ?r) 4))\n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))(at start (decrease (energy ?r) 4))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l)) (at start (>= (energy ?r) 4))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r)) (at start (decrease (energy ?r) 4))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l)) (at start (>= (energy ?r) 6))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r)) (at start (decrease (energy ?r) 6))\n          )\n)\n\n(:durative-action long_range_communicate_soil_data\n :parameters (?r - rover ?p - waypoint ?x - waypoint)\n :duration (= ?duration 30)\n :condition (and (over all (at ?r ?x))  (at start (have_soil_analysis ?r ?p)) (at start (>= (energy ?r) 4))\n                    (at start (available ?r))(orbital_satellite_available)\n            )\n :effect (and (at start (not (available ?r))) \n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))(at start (decrease (energy ?r) 4))\n\t)\n)\n\n(:durative-action long_range_communicate_rock_data\n :parameters (?r - rover ?p - waypoint ?x - waypoint)\n :duration (= ?duration 30)\n :condition (and (over all (at ?r ?x))  (at start (have_rock_analysis ?r ?p)) \n                    (at start (available ?r)) (at start (>= (energy ?r) 4))(orbital_satellite_available)\n            )\n :effect (and (at start (not (available ?r))) (at end (communicated_rock_data ?p))(at end (available ?r)) (at start (decrease (energy ?r) 4))\n          )\n)\n\n\n(:durative-action long_range_communicate_image_data\n :parameters (?r - rover ?o - objective ?m - mode ?x - waypoint)\n :duration (= ?duration 45)\n :condition (and (over all (at ?r ?x)) (at start (have_image ?r ?o ?m)) \n                   (at start (available ?r))  (at start (>= (energy ?r) 6))(orbital_satellite_available)\n            )\n :effect (and (at start (not (available ?r)))  (at end (communicated_image_data ?o ?m)) (at end (available ?r)) (at start (decrease (energy ?r) 6))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
{"custom_id": "Rovers_Ti12", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "system", "content": "You are a PDDL domain creation expert, you modify domains based on requested changes."}, {"role": "user", "content": "Modify the following PDDL domain\nRemove the air data analysis predicates and actions\n\nThis requires removing 4 predicates and 2 actions\npredicates: equipped_for_air_analysis, have_air_analysis, communicate_air_data, at_air_sample\nactions\nRemove sample_air\nRemove communicate_air_data\n\n(define (domain Rover)\n(:requirements :typing :durative-actions :fluents :duration-inequalities)\n(:types rover waypoint store camera mode lander objective)\n\n(:predicates (at ?x - rover ?y - waypoint) \n             (at_lander ?x - lander ?y - waypoint)\n             (can_traverse ?r - rover ?x - waypoint ?y - waypoint)\n\t     (equipped_for_soil_analysis ?r - rover)\n             (equipped_for_rock_analysis ?r - rover)\n             (equipped_for_air_analysis ?r - rover)\n             (equipped_for_imaging ?r - rover)\n             (empty ?s - store)\n             (have_rock_analysis ?r - rover ?w - waypoint)\n             (have_soil_analysis ?r - rover ?w - waypoint)\n             (have_air_analysis ?r - rover ?w - waypoint)\n             (full ?s - store)\n\t     (calibrated ?c - camera ?r - rover) \n\t     (supports ?c - camera ?m - mode)\n             (available ?r - rover)\n             (visible ?w - waypoint ?p - waypoint)\n             (have_image ?r - rover ?o - objective ?m - mode)\n             (communicated_soil_data ?w - waypoint)\n             (communicated_rock_data ?w - waypoint)\n             (communicated_air_data ?w - waypoint)\n             (communicated_image_data ?o - objective ?m - mode)\n\t     (at_soil_sample ?w - waypoint)\n\t     (at_rock_sample ?w - waypoint)\n            (at_air_sample ?w - waypoint)\n             (visible_from ?o - objective ?w - waypoint)\n\t     (store_of ?s - store ?r - rover)\n\t     (calibration_target ?i - camera ?o - objective)\n\t     (on_board ?i - camera ?r - rover)\n\t     (channel_free ?l - lander)\n\t      (in_sun ?w - waypoint)\n\n)\n(:functions (energy ?r - rover) (recharge-rate ?x - rover))\n\t\n(:durative-action navigate\n:parameters (?x - rover ?y - waypoint ?z - waypoint) \n:duration (= ?duration 5)\n:condition (and (over all (can_traverse ?x ?y ?z)) (at start (available ?x)) (at start (at ?x ?y))  (at start (>= (energy ?x) 8))\n                (over all (visible ?y ?z))\n\t    )\n:effect (and (at start (decrease (energy ?x) 8)) (at start (not (at ?x ?y))) (at end (at ?x ?z))))\n\n(:durative-action recharge\n:parameters (?x - rover ?w - waypoint)\n:duration (= ?duration (/ (- 80 (energy ?x)) (recharge-rate ?x)))\n:condition (and (at start (at ?x ?w)) (over all (at ?x ?w)) \n\t\t\t\t\t(at start (in_sun ?w)) (at start (<= (energy ?x) 80)))\n:effect (and (at end (increase (energy ?x) (* ?duration (recharge-rate ?x)))))\n)\n\n\n(:durative-action sample_soil\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 10)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (at_soil_sample ?p)) (at start (equipped_for_soil_analysis ?x)) (at start (>= (energy ?x) 3)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at start (decrease (energy ?x) 3)) (at end (have_soil_analysis ?x ?p)) (at end (not (at_soil_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_rock\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (>= (energy ?x) 5)) (at start (at_rock_sample ?p)) (at start (equipped_for_rock_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_rock_analysis ?x ?p)) (at start (decrease (energy ?x) 5)) (at end (not (at_rock_sample ?p)))\n\t\t)\n)\n\n(:durative-action sample_air\n:parameters (?x - rover ?s - store ?p - waypoint)\n:duration (= ?duration 8)\n:condition (and (over all (at ?x ?p)) (at start (at ?x ?p)) (at start (>= (energy ?x) 5)) (at start (at_air_sample ?p)) (at start (equipped_for_air_analysis ?x)) (at start (store_of ?s ?x)) (at start (empty ?s))\n\t\t)\n:effect (and (at start (not (empty ?s))) (at end (full ?s)) (at end (have_air_analysis ?x ?p)) (at start (decrease (energy ?x) 5)) (at end (not (at_air_sample ?p)))\n\t\t)\n)\n\n(:durative-action drop\n:parameters (?x - rover ?y - store)\n:duration (= ?duration 1)\n:condition (and (at start (store_of ?y ?x)) (at start (full ?y))\n\t\t)\n:effect (and (at end (not (full ?y))) (at end (empty ?y))\n\t)\n)\n\n(:durative-action calibrate\n :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n :duration (= ?duration 5)\n :condition (and (at start (equipped_for_imaging ?r)) (at start (>= (energy ?r) 2)) (at start (calibration_target ?i ?t)) (over all (at ?r ?w)) (at start (visible_from ?t ?w)) (at start (on_board ?i ?r))\n\t\t)\n :effect (and (at end (calibrated ?i ?r)) (at start (decrease (energy ?r) 2)))\n)\n\n\n\n\n(:durative-action take_image\n :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n :duration (= ?duration 7)\n :condition (and (over all (calibrated ?i ?r))\n\t\t\t (at start (on_board ?i ?r))\n                      (over all (equipped_for_imaging ?r))\n                      (over all (supports ?i ?m) )\n\t\t\t  (over all (visible_from ?o ?p))\n                      (over all (at ?r ?p))\n                      (at start (>= (energy ?r) 1))\n               )\n :effect (and (at end (have_image ?r ?o ?m)) (at start (decrease (energy ?r) 1)) (at end (not (calibrated ?i ?r)))\n\t\t)\n)\n\n\n(:durative-action communicate_soil_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_soil_analysis ?r ?p)) (at start (>= (energy ?r) 4))\n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))\n\t\t(at end (communicated_soil_data ?p))(at end (available ?r))(at start (decrease (energy ?r) 4))\n\t)\n)\n\n(:durative-action communicate_rock_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_rock_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l)) (at start (>= (energy ?r) 4))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_rock_data ?p))(at end (available ?r)) (at start (decrease (energy ?r) 4))\n          )\n)\n\n(:durative-action communicate_air_data\n :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n :duration (= ?duration 10)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_air_analysis ?r ?p)) \n                   (at start (visible ?x ?y)) (at start (available ?r))(at start (channel_free ?l)) (at start (>= (energy ?r) 4))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l))(at end (communicated_air_data ?p))(at end (available ?r)) (at start (decrease (energy ?r) 4))\n          )\n)\n\n\n(:durative-action communicate_image_data\n :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n :duration (= ?duration 15)\n :condition (and (over all (at ?r ?x)) (over all (at_lander ?l ?y)) (at start (have_image ?r ?o ?m)) \n                   (at start (visible ?x ?y)) (at start (available ?r)) (at start (channel_free ?l)) (at start (>= (energy ?r) 6))\n            )\n :effect (and (at start (not (available ?r))) (at start (not (channel_free ?l))) (at end (channel_free ?l)) (at end (communicated_image_data ?o ?m)) (at end (available ?r)) (at start (decrease (energy ?r) 6))\n          )\n)\n\n)\n"}], "max_tokens": 3012, "temperature": 1, "top_p": 1}}
